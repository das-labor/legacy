; ------------------------------------------------
; Fehlerbehandlung FPGA Komunikation 04/2009 SAURON
; ------------------------------------------------

; Bei der Assemblierung wird ein ROM Baustein mit JTAG Anschluss erstellt
                    VHDL      "jtag_template.vhd", "d:\\borg_sender\sender\picoblaze_rom.vhd", "pb_rom"
                    MEM       "picoblaze.mem"     ; Assembliertes Programm exportieren
                    EXEC      "transfer.bat"      ; und übertragen an den FPGA
; Portmap für den Simulator

; Eingangs - Ports
mem_datain          DSIN      0
i1                  DSIN      1
i2                  DSIN      2
i3                  DSIN      3
; Ausgangs - Ports
mem_wr_en           DSOUT     10                  ; q0
mem_dataout         DSOUT     11                  ; q1
mem_addr            DSOUT     12                  ; q2

tpg_pattern         DSOUT     13                  ; q3
tpg_mux             DSOUT     14                  ; q4
tpg_i1              DSOUT     15                  ; q5
tpg_i2              DSOUT     16                  ; q6
tpg_i3              DSOUT     17                  ; q7
tpg_i4              DSOUT     18                  ; q8
q9                  DSOUT     19
; Anbindung an 7-Segment Display
int_hi              DSOUT     24                  ; segment encoding
int_lo              DSOUT     25                  ; .     0
bin0                DSOUT     26                  ; .    ---
bin1                DSOUT     27                  ; . 5 |   | 1
bin2                DSOUT     28                  ; .    ---   <- 6
bin3                DSOUT     29                  ; . 4 |   | 2
hell0               DSOUT     30                  ; .    ---  *
hell1               DSOUT     31                  ; .     3   7
hell2               DSOUT     32
hell3               DSOUT     33
hex_mode            DSOUT     34
bin_mode            DSOUT     35
punkte              DSOUT     36
; kleinkram
led                 DSOUT     40                  ; LEDS

schalter            DSIN      50                  ; Schalter und Taster
Taster              DSIN      51

; ========================== MEMORY ========================================

init: 
                    LOAD      s8, 0
                    LOAD      s9, 0
                    LOAD      sA, 0
                    LOAD      sB, 0
                    LOAD      sC, 0
                    LOAD      sD, 0
                    LOAD      sE, 0
                    LOAD      sF, 0
                    LOAD      s0, 128
init2:              OUT       s8, s0
                    SUB       s0, 1
                    JUMP      NZ, init2


; Einzelne Werte im Speicher Manuell ändern und Anzeigen

; s8 - Speicher Addresse
; s9 - Taster
; sa - Schalter
; sb - Inhalt speicher
; sc - 0 = Anzeige Adresse, 1 = Anzeige Speicherinhalt
; se - Helligkeit Display

memory: 
                    LOAD      s8, 0               ; Speicher Adresse
memloop:            LOAD      s0, sE
                    COMP      sC, 1
                    JUMP      NZ, memloop1
                    LOAD      s0, 0
memloop1:           OUT       s0, hell0           ; Helligkeit in abhängigkeit
                    OUT       s0, hell1           ; von se stellen
                    OUT       s0, hell2
                    OUT       sE, hell3

                    IN        sA, schalter        ; ändern um sa Schritte
                    COMP      sA, 0               ; sa=0 ? dann
                    JUMP      NZ, memloop2        ; sa=1
                    LOAD      sA, 1

memloop2:           IN        s9, taster          ; Taster einlesen
                    LOAD      s0, s9
                    XOR       s0, %00001000
                    CALL      Z, memplus          ; Taster BTN3 gedrückt

                    LOAD      s0, s9
                    XOR       s0, %00000100       ; Taster BTN2 gedrückt
                    CALL      Z, memminus

                    LOAD      s0, s9
                    XOR       s0, %00000010       ; Taster BTN1 gedrückt
                    CALL      Z, meminc

                    LOAD      s0, s9
                    XOR       s0, %00000001       ; Taster BTN0 gedrückt
                    CALL      Z, memdec

; Display bearbeitung
                    CALL      readmem             ; Speicheradresse Einlesen

                    COMP      sC, 0               ; Soll die addresse Angezeigt werden ?
                    JUMP      NZ, memloop3
; Adresse Anzeigen
                    OUT       s8, int_lo          ; Adresse auf Display anzeigen
                    LOAD      s0, 0
                    OUT       s0, punkte          ; Punkte Ausschalten

memloop3:           COMP      sC, 1               ; Soll Der Speicherinhalt Angezeigtwerden ?
                    JUMP      NZ, memloop4
; Inhalt Anzeigen
                    OUT       sB, int_lo          ; Speicherinhalt Anzeigen
                    LOAD      s0, %00000001
                    OUT       s0, punkte          ; Einen Punkt Anzeigen

; wenn kein Taster gedrückt wird, wird nach display Ausblenden umgeschaltet auf Speicherinhalt

memloop4:           LOAD      s0, s9              ; taster einlesen
                    COMP      s0, 0               ; nichts gedrückt ?

                    LOAD      s1, 75
                    CALL      wait                ; dann kurz warten

                    COMP      sC, 1               ; Wird der Speicherinhalt angezeigt ?
                    JUMP      Z, memloop6         ; Wenn nein :
                    SUB       sE, 1               ; Display Abdunkeln wenn nix gedrückt
                    COMP      sE, 0               ; Unterlauf Passiert ?
                    JUMP      NZ, memloop7
                    LOAD      sC, 1               ; nach unterlauf Speicherinhalt Anzeigen
; Nach unterlauf Anzeige umschalten auf Speicherinhalt
memloop6:           LOAD      sE, 255             ; Display ein
                    LOAD      sC, 1               ; Display soll speicherinhalt anzeigen
memloop7:           JUMP      memloop

; ============================= UNTERPROGRAMME MEMORY ======================================
memplus:            CALL      debounce
                    ADD       s8, sA              ; Anzahl sa schritte nach vorne springen
                    LOAD      sE, 255             ; Display Helligkeit anheben
                    LOAD      sC, 0               ; Speicheraddresse Anzeigen
; CALL      readmem             ; Speicheradresse Einlesen
                    RET       

memminus:           CALL      debounce
                    SUB       s8, sA              ; Anzahl sa schritte nach hinten springen
                    LOAD      sE, 255             ; Display Helligkeit anheben
                    LOAD      sC, 0               ; Speicheraddresse Anzeigen
; CALL      readmem             ; Speicheradresse Einlesen
                    RET       

meminc:             CALL      debounce
                    CALL      readmem
                    ADD       sB, 1               ; Memoryinhalt im 1 erhöhen
                    LOAD      sC, 1               ; Memoryinhalt anzeigen
                    CALL      writemem
                    RET       

memdec:             CALL      debounce
                    CALL      readmem
                    SUB       sB, 1               ; Memoryinhalt um 1 verringern
                    LOAD      sC, 1               ; memoryinhalt anzeigen
                    CALL      writemem
                    RET       

readmem:            OUT       s8, mem_addr        ; Zugriff auf speicheradresse s8
                    IN        sB, mem_datain      ; inhalt nach sb kopieren
                    RET       

writemem:           OUT       s8, mem_addr        ; Zugriff auf Speicheradresse s8
                    OUT       sB, mem_dataout     ; Inhalt von sb ausgeben
                    LOAD      s0, 1               ; Kurzer impuls
                    OUT       s0, mem_wr_en       ; auf Mem_wr_en
                    LOAD      s0, 0               ; sorgt für
                    OUT       s0, mem_wr_en       ; das Speichern
                    RET       
; =============================  ALLGEMEINE UNTERPROGRAMME =================================
; -             --- Unterprogramm Entprellen ---
debounce:           IN        s9, taster          ; Warten bis
                    COMP      s9, 0               ; Taster losgelassen
                    JUMP      NZ, debounce
                    CALL      wait_short
                    RET       

; -             --- Unterprogramm Warten ---
wait_short:         LOAD      s1, 255             ; Einsprungsadresse ohne Wartezeit vorgabe
                    LOAD      s0, 255
wait:               LOAD      s0, s0              ; NOP
                    SUB       s0, 1               ; In s0 (low) und s1 (high) muss die
                    JUMP      NZ, wait            ; Wartezeit übergeben werden
                    SUB       s1, 1
                    JUMP      NZ, wait
                    RET       

