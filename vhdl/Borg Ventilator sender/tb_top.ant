--------------------------------------------------------------------------------
-- Copyright (c) 1995-2007 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 9.2.04i
--  \   \         Application : ISE
--  /   /         Filename : tb_top.ant
-- /___/   /\     Timestamp : Sat Apr 18 20:08:22 2009
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: tb_top
--Device: Xilinx
--

library UNISIM;
use UNISIM.Vcomponents.ALL;
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
USE IEEE.STD_LOGIC_TEXTIO.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE STD.TEXTIO.ALL;

ENTITY tb_top IS
END tb_top;

ARCHITECTURE testbench_arch OF tb_top IS
    FILE RESULTS: TEXT OPEN WRITE_MODE IS "D:\borg_sender\sender\tb_top.ano";

    COMPONENT top
        PORT (
            clk : In std_logic;
            irq : In std_logic;
            i1 : In std_logic_vector (7 DownTo 0);
            i2 : In std_logic_vector (7 DownTo 0);
            i3 : In std_logic_vector (7 DownTo 0);
            schaltin : In std_logic_vector (7 DownTo 0);
            tast : In std_logic_vector (3 DownTo 0);
            clk_20 : Out std_logic;
            clk200 : Out std_logic;
            data_roh : Out std_logic;
            display : Out std_logic_vector (11 DownTo 0);
            f_cnt : Out std_logic_vector (7 DownTo 0);
            gnd0 : Out std_logic;
            irq_ack : Out std_logic;
            led : Out std_logic_vector (7 DownTo 0);
            out0 : Out std_logic;
            pattern_o : Out std_logic_vector (7 DownTo 0);
            switch_o : Out std_logic_vector (2 DownTo 0);
            trig : Out std_logic
        );
    END COMPONENT;

    SIGNAL clk : std_logic := '0';
    SIGNAL irq : std_logic := '0';
    SIGNAL i1 : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL i2 : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL i3 : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL schaltin : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL tast : std_logic_vector (3 DownTo 0) := "0000";
    SIGNAL clk_20 : std_logic := '0';
    SIGNAL clk200 : std_logic := '0';
    SIGNAL data_roh : std_logic := '0';
    SIGNAL display : std_logic_vector (11 DownTo 0) := "000000000000";
    SIGNAL f_cnt : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL gnd0 : std_logic := '0';
    SIGNAL irq_ack : std_logic := '0';
    SIGNAL led : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL out0 : std_logic := '0';
    SIGNAL pattern_o : std_logic_vector (7 DownTo 0) := "00000000";
    SIGNAL switch_o : std_logic_vector (2 DownTo 0) := "000";
    SIGNAL trig : std_logic := '0';

    SHARED VARIABLE TX_ERROR : INTEGER := 0;
    SHARED VARIABLE TX_OUT : LINE;

    constant PERIOD : time := 20 ns;
    constant DUTY_CYCLE : real := 0.5;
    constant OFFSET : time := 10 ns;

    BEGIN
        UUT : top
        PORT MAP (
            clk => clk,
            irq => irq,
            i1 => i1,
            i2 => i2,
            i3 => i3,
            schaltin => schaltin,
            tast => tast,
            clk_20 => clk_20,
            clk200 => clk200,
            data_roh => data_roh,
            display => display,
            f_cnt => f_cnt,
            gnd0 => gnd0,
            irq_ack => irq_ack,
            led => led,
            out0 => out0,
            pattern_o => pattern_o,
            switch_o => switch_o,
            trig => trig
        );

        PROCESS    -- clock process for clk
        BEGIN
            WAIT for OFFSET;
            CLOCK_LOOP : LOOP
                clk <= '0';
                WAIT FOR (PERIOD - (PERIOD * DUTY_CYCLE));
                clk <= '1';
                WAIT FOR (PERIOD * DUTY_CYCLE);
            END LOOP CLOCK_LOOP;
        END PROCESS;

        PROCESS    -- Annotation process for clk
            VARIABLE TX_TIME : INTEGER := 0;

            PROCEDURE ANNOTATE_clk_20(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", clk_20, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, clk_20);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_clk200(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", clk200, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, clk200);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_data_roh(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", data_roh, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, data_roh);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_display(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", display, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, display);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_f_cnt(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", f_cnt, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, f_cnt);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_gnd0(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", gnd0, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, gnd0);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_irq_ack(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", irq_ack, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, irq_ack);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_led(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", led, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, led);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_out0(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", out0, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, out0);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_pattern_o(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", pattern_o, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, pattern_o);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_switch_o(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", switch_o, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, switch_o);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
            PROCEDURE ANNOTATE_trig(
                TX_TIME : INTEGER
            ) IS
                VARIABLE TX_STR : String(1 to 4096);
                VARIABLE TX_LOC : LINE;
            BEGIN
                STD.TEXTIO.write(TX_LOC, string'("Annotate["));
                STD.TEXTIO.write(TX_LOC, TX_TIME);
                STD.TEXTIO.write(TX_LOC, string'(", trig, "));
                IEEE.STD_LOGIC_TEXTIO.write(TX_LOC, trig);
                STD.TEXTIO.write(TX_LOC, string'("]"));
                TX_STR(TX_LOC.all'range) := TX_LOC.all;
                STD.TEXTIO.writeline(RESULTS, TX_LOC);
                STD.TEXTIO.Deallocate(TX_LOC);
            END;
        BEGIN
            WAIT for 1 fs;
            ANNOTATE_clk_20(0);
            ANNOTATE_clk200(0);
            ANNOTATE_data_roh(0);
            ANNOTATE_display(0);
            ANNOTATE_f_cnt(0);
            ANNOTATE_gnd0(0);
            ANNOTATE_irq_ack(0);
            ANNOTATE_led(0);
            ANNOTATE_out0(0);
            ANNOTATE_pattern_o(0);
            ANNOTATE_switch_o(0);
            ANNOTATE_trig(0);
            WAIT for OFFSET;
            TX_TIME := TX_TIME + 10;
            ANNO_LOOP : LOOP
                --Rising Edge
                WAIT for 11 ns;
                TX_TIME := TX_TIME + 11;
                ANNOTATE_clk_20(TX_TIME);
                ANNOTATE_clk200(TX_TIME);
                ANNOTATE_data_roh(TX_TIME);
                ANNOTATE_display(TX_TIME);
                ANNOTATE_f_cnt(TX_TIME);
                ANNOTATE_gnd0(TX_TIME);
                ANNOTATE_irq_ack(TX_TIME);
                ANNOTATE_led(TX_TIME);
                ANNOTATE_out0(TX_TIME);
                ANNOTATE_pattern_o(TX_TIME);
                ANNOTATE_switch_o(TX_TIME);
                ANNOTATE_trig(TX_TIME);
                WAIT for 9 ns;
                TX_TIME := TX_TIME + 9;
            END LOOP ANNO_LOOP;
        END PROCESS;

        PROCESS
            BEGIN
                WAIT FOR 1020 ns;

                STD.TEXTIO.write(TX_OUT, string'("Total[]"));
                STD.TEXTIO.writeline(RESULTS, TX_OUT);
                ASSERT (FALSE) REPORT
                    "Success! Simulation for annotation completed"
                    SEVERITY FAILURE;
            END PROCESS;

    END testbench_arch;

