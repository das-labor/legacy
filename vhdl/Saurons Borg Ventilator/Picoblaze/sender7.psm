; ------------------------------------------------
; Fehlerbehandlung FPGA Komunikation 04/2009 SAURON
; ------------------------------------------------

; Bei der Assemblierung wird ein ROM Baustein mit JTAG Anschluss erstellt
                    VHDL      "jtag_template.vhd", "d:\\borg_sender\sender\picoblaze_rom.vhd", "pb_rom"
                    MEM       "picoblaze.mem"     ; Assembliertes Programm exportieren
                    EXEC      "transfer.bat"      ; und übertragen an den FPGA
; Portmap für den Simulator

; Eingangs - Ports
mem_datain          DSIN      0
i1                  DSIN      1
i2                  DSIN      2
i3                  DSIN      3
; Ausgangs - Ports
mem_wr_en           DSOUT     10                  ; q0
mem_dataout         DSOUT     11                  ; q1
mem_addr            DSOUT     12                  ; q2

tpg_pattern         DSOUT     13                  ; q3
tpg_mux             DSOUT     14                  ; q4
tpg_i1              DSOUT     15                  ; q5
tpg_i2              DSOUT     16                  ; q6
tpg_i3              DSOUT     17                  ; q7
tpg_i4              DSOUT     18                  ; q8
q9                  DSOUT     19
; Anbindung an 7-Segment Display
int_hi              DSOUT     24                  ; segment encoding
int_lo              DSOUT     25                  ; .     0
bin0                DSOUT     26                  ; .    ---
bin1                DSOUT     27                  ; . 5 |   | 1
bin2                DSOUT     28                  ; .    ---   <- 6
bin3                DSOUT     29                  ; . 4 |   | 2
hell0               DSOUT     30                  ; .    ---  *
hell1               DSOUT     31                  ; .     3   7
hell2               DSOUT     32
hell3               DSOUT     33
hex_mode            DSOUT     34
bin_mode            DSOUT     35
punkte              DSOUT     36
; kleinkram
led                 DSOUT     40                  ; LEDS

schalter            DSIN      50                  ; Schalter und Taster
Taster              DSIN      51

                    CALL      init

; ========================== MENÜ ==========================================
; s9 Taster
; sf dauer Taster gedrückt

menu:               LOAD      s0, 1               ; Display Umschalten auf
                    OUT       s0, bin_mode        ; Bin Mode
                    OUT       s0, punkte
                    LOAD      s4, %01001001       ; Binaermuster
                    OUT       s4, bin0            ; auf
                    OUT       s4, bin1            ; allen
                    OUT       s4, bin2            ; stellen
                    OUT       s4, bin3            ; ausgeben
menuloop:           CALL      debounce            ; Taster einlesen
                    COMP      sF, 1               ; Taster kurz gedrückt ?
                    JUMP      NZ, menuloop        ; nein ? : ignorieren
                    COMP      s9, %00001000       ; Taster BTN3 gedrückt ?
                    JUMP      Z, memloop          ; ja: zur memory-bearbeitung
                    COMP      s9, %00000100       ; Taster btn2 gedrückt ?
                    JUMP      Z, testpattern      ; ja: zur Testpattern generierung
                    JUMP      menuloop
; ======================== TESTPATTERN ====================================
testpattern:        LOAD      s0, 0
                    OUT       s0, int_hi
                    OUT       s0, bin_mode
                    LOAD      s0, %00001111       ; Muxer auf
                    OUT       s0, tpg_mux         ; TPG schalten
testpatternloop:    IN        s0, schalter        ; Schalter auf
                    OUT       s0, tpg_pattern     ; TPG schalten
                    OUT       s0, int_lo
                    CALL      debounce
                    LOAD      s0, s9
                    XOR       s0, %00001000       ; Taster BTN3 gedrückt ?
                    JUMP      NZ, testpattern2
                    COMP      sF, 250             ; Taster lange gedrückt ?
                    JUMP      NZ, testpattern2
                    JUMP      menu                ; dann zum Menu
testpattern2:       JUMP      testpatternloop

; ========================== MEMORY ========================================


; Einzelne Werte im Speicher Manuell ändern und Anzeigen

; s8 - Speicher Addresse
; s9 - Taster
; sa - Schalter
; sb - Inhalt speicher
; sf - dauer Taster gedrückt


memloop:            OUT       s9, led
                    LOAD      s0, 0
                    OUT       s0, bin_mode
                    IN        sA, schalter        ; ändern um sa Schritte
                    COMP      sA, 0               ; sa=0 ? dann
                    JUMP      NZ, memloop2        ; sa=1
                    LOAD      sA, 1

memloop2:           CALL      debounce            ; Taster einlesen
                    LOAD      s0, s9
                    XOR       s0, %00001000
                    CALL      Z, memplus          ; Taster BTN3 gedrückt

                    LOAD      s0, s9
                    XOR       s0, %00000100       ; Taster BTN2 gedrückt
                    CALL      Z, memminus

                    LOAD      s0, s9
                    XOR       s0, %00000010       ; Taster BTN1 gedrückt
                    CALL      Z, meminc

                    LOAD      s0, s9
                    XOR       s0, %00000001       ; Taster BTN0 gedrückt
                    CALL      Z, memdec

                    LOAD      s0, s9
                    XOR       s0, %00001000       ; Taster BTN3 gedrückt ?
                    JUMP      NZ, memloop3
                    COMP      sF, 250             ; Taster lange gedrückt ?
                    JUMP      NZ, memloop3
                    JUMP      menu                ; dann zum Menu


memloop3: 
; Display bearbeitung
                    CALL      readmem             ; Speicheradresse Einlesen
                    CALL      malzehn             ; Addresse.inhalt
                    OUT       s2, int_lo
                    OUT       s1, int_hi
                    LOAD      s0, %00000010
                    OUT       s0, punkte          ; Einen Punkt Anzeigen
                    JUMP      memloop

; ============================= UNTERPROGRAMME MEMORY ======================================
memplus:            COMP      sF, 1               ; Taster schon länger gedrückt ?
                    JUMP      NZ, return          ; Wenn ja dann abbruch
                    ADD       s8, sA              ; Anzahl sa schritte nach vorne springen
return:             RET       

memminus:           COMP      sF, 1               ; Taster schon länger gedrückt ?
                    JUMP      NZ, return          ; Wenn ja dann abbruch
                    SUB       s8, sA              ; Anzahl sa schritte nach hinten springen
                    RET       

meminc:             COMP      sF, 1               ; Taster schon länger gedrückt ?
                    JUMP      NZ, return          ; Wenn ja dann abbruch
                    CALL      readmem
                    ADD       sB, 1               ; Memoryinhalt im 1 erhöhen
                    CALL      writemem
                    RET       

memdec:             COMP      sF, 1               ; Taster schon länger gedrückt ?
                    JUMP      NZ, return          ; Wenn ja dann abbruch
                    CALL      readmem
                    SUB       sB, 1               ; Memoryinhalt um 1 verringern
                    CALL      writemem
                    RET       

readmem:            OUT       s8, mem_addr        ; Zugriff auf speicheradresse s8
                    IN        sB, mem_datain      ; inhalt nach sb kopieren
                    RET       

writemem:           OUT       s8, mem_addr        ; Zugriff auf Speicheradresse s8
                    OUT       sB, mem_dataout     ; Inhalt von sb ausgeben
                    LOAD      s0, 1               ; Kurzer impuls
                    OUT       s0, mem_wr_en       ; auf Mem_wr_en
                    LOAD      s0, 0               ; sorgt für
                    OUT       s0, mem_wr_en       ; das Speichern
                    RET       

malzehn:            LOAD      s0, 10              ; schleifenzähler
                    LOAD      s1, 0               ; Ergebnis High Byte
                    LOAD      s2, 0               ; Ergebnis Low Byte
malzehn2:           ADD       s2, s8              ; Speicheraddresse Addieren
                    ADDC      s1, 0               ; Überlauf beachten
                    SUB       s0, 1               ; Schleifenzähler incrementieren
                    JUMP      NZ, malzehn2        ; noch nicht 10 mal?
                    ADD       s2, sB              ; Speicherinhalt addieren
                    ADDC      s1, 0               ; Überlauf beachten
                    RET       

; =============================  ALLGEMEINE UNTERPROGRAMME =================================
; -             --- Unterprogramm Entprellen ---
debounce:           LOAD      s4, 100             ; Anzahl durchläufe
debounce1:          IN        s2, taster          ; Taster einlesen,
                    LOAD      s0, 0
                    LOAD      s1, 2               ; kurz warten
                    CALL      wait                ; nochmal einlesen
                    IN        s3, taster
                    COMP      s2, s3              ; Hat sich was geändert ?
                    JUMP      NZ, debounceexit    ; Signal nicht stabil : Abbruch !
                    SUB       s4, 1               ; und noch einmal
                    JUMP      NZ, debounce1       ; das selbe
                    LOAD      s9, s3              ; Signal ist stabil: übernahme in s9
                    COMP      s9, 0
                    JUMP      NZ, debounce2       ; wenn keine Taste gedrückt
                    LOAD      sF, 0               ; zähler für dauer auf 0
                    JUMP      debounceexit
debounce2:          COMP      sF, 255             ; Zähler schon auf maximum ?
                    JUMP      Z, debounceexit     ; wenn ja, abbruch
                    ADD       sF, 1               ; Zähler increment
debounceexit:       RET       

; -             --- Unterprogramm Warten ---
wait_short:         LOAD      s1, 255             ; Einsprungsadresse ohne Wartezeit vorgabe
                    LOAD      s0, 255
wait:               LOAD      s0, s0              ; NOP
                    SUB       s0, 1               ; In s0 (low) und s1 (high) muss die
                    JUMP      NZ, wait            ; Wartezeit übergeben werden
                    SUB       s1, 1
                    JUMP      NZ, wait
                    RET       
; -             --- Initialisierung ---
init:               LOAD      s8, 0
                    LOAD      s9, 0
                    LOAD      sA, 0
                    LOAD      sB, 0
                    LOAD      sC, 0
                    LOAD      sD, 0
                    LOAD      sE, 0
                    LOAD      sF, 0
                    LOAD      s0, 10
init2:              OUT       s8, s0
                    ADD       s0, 1
                    COMP      s0, 20
                    JUMP      NZ, init2
                    LOAD      s0, 24
init3:              OUT       s8, s0
                    ADD       s0, 1
                    COMP      s0, 37
                    JUMP      NZ, init3
                    OUT       s8, led
                    LOAD      s0, 255
                    OUT       s0, hell0
                    OUT       s0, hell1
                    OUT       s0, hell2
                    OUT       s0, hell3
                    RET       
