
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         000000b0  000004fc  000004fc  00000550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000800  00000800  00000600  2**0
                  ALLOC
  3 .debug_abbrev 000001f1  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004fe  00000000  00000000  000007f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000430  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000f6  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001be  00000000  00000000  00001255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000062  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_start>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	98 00 00 00 	xor r0,r0,r0
  24:	78 1c 00 00 	mvhi sp,0x0
  28:	3b 9c 10 00 	ori sp,sp,0x1000
  2c:	37 9c ff fc 	addi sp,sp,-4
  30:	78 1a 00 00 	mvhi gp,0x0
  34:	3b 5a 08 00 	ori gp,gp,0x800
  38:	34 01 00 00 	mvi r1,0
  3c:	34 02 00 00 	mvi r2,0
  40:	34 03 00 00 	mvi r3,0
  44:	f8 00 00 88 	calli 264 <main>

00000048 <irq_enable>:
  48:	34 01 00 01 	mvi r1,1
  4c:	d0 01 00 00 	wcsr IE,r1
  50:	c3 a0 00 00 	ret

00000054 <irq_mask>:
  54:	34 01 00 0f 	mvi r1,15
  58:	d0 21 00 00 	wcsr IM,r1
  5c:	c3 a0 00 00 	ret

00000060 <irq_disable>:
  60:	34 01 00 00 	mvi r1,0
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <jump>:
  6c:	c0 20 00 00 	b r1

00000070 <halt>:
  70:	e0 00 00 00 	bi 70 <halt>

00000074 <_save_all>:
  74:	37 9c ff 80 	addi sp,sp,-128
  78:	5b 81 00 04 	sw (sp+4),r1
  7c:	5b 82 00 08 	sw (sp+8),r2
  80:	5b 83 00 0c 	sw (sp+12),r3
  84:	5b 84 00 10 	sw (sp+16),r4
  88:	5b 85 00 14 	sw (sp+20),r5
  8c:	5b 86 00 18 	sw (sp+24),r6
  90:	5b 87 00 1c 	sw (sp+28),r7
  94:	5b 88 00 20 	sw (sp+32),r8
  98:	5b 89 00 24 	sw (sp+36),r9
  9c:	5b 8a 00 28 	sw (sp+40),r10
  a0:	5b 9e 00 78 	sw (sp+120),ea
  a4:	5b 9f 00 7c 	sw (sp+124),ba
  a8:	2b 81 00 80 	lw r1,(sp+128)
  ac:	5b 81 00 74 	sw (sp+116),r1
  b0:	bb 80 08 00 	mv r1,sp
  b4:	34 21 00 80 	addi r1,r1,128
  b8:	5b 81 00 70 	sw (sp+112),r1
  bc:	c3 a0 00 00 	ret

000000c0 <_restore_all_and_return>:
  c0:	2b 81 00 04 	lw r1,(sp+4)
  c4:	2b 82 00 08 	lw r2,(sp+8)
  c8:	2b 83 00 0c 	lw r3,(sp+12)
  cc:	2b 84 00 10 	lw r4,(sp+16)
  d0:	2b 85 00 14 	lw r5,(sp+20)
  d4:	2b 86 00 18 	lw r6,(sp+24)
  d8:	2b 87 00 1c 	lw r7,(sp+28)
  dc:	2b 88 00 20 	lw r8,(sp+32)
  e0:	2b 89 00 24 	lw r9,(sp+36)
  e4:	2b 8a 00 28 	lw r10,(sp+40)
  e8:	2b 9d 00 74 	lw ra,(sp+116)
  ec:	2b 9e 00 78 	lw ea,(sp+120)
  f0:	2b 9f 00 7c 	lw ba,(sp+124)
  f4:	2b 9c 00 70 	lw sp,(sp+112)
  f8:	c3 c0 00 00 	eret

000000fc <getHex>:
#include "spike_hw.h"

uint32_t getHex() {
  fc:	37 9c ff fc 	addi sp,sp,-4
 100:	5b 9d 00 04 	sw (sp+4),ra
    uint8_t c = uart_getchar();
 104:	f8 00 00 de 	calli 47c <uart_getchar>
 108:	b8 20 10 00 	mv r2,r1
    if (c <= '9')
 10c:	74 21 00 39 	cmpgui r1,r1,0x39
	   return (c - '0');
 110:	34 43 ff d0 	addi r3,r2,-48
 114:	44 20 00 02 	be r1,r0,11c <getHex+0x20>
    else
	   return (c - 'A' + 0xa);
 118:	34 43 ff c9 	addi r3,r2,-55
}
 11c:	b8 60 08 00 	mv r1,r3
 120:	2b 9d 00 04 	lw ra,(sp+4)
 124:	37 9c 00 04 	addi sp,sp,4
 128:	c3 a0 00 00 	ret

0000012c <readint>:

uint32_t readint() {
 12c:	37 9c ff f4 	addi sp,sp,-12
 130:	5b 8b 00 0c 	sw (sp+12),r11
 134:	5b 8c 00 08 	sw (sp+8),r12
 138:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t val = 0, i;
 13c:	34 0c 00 00 	mvi r12,0
 140:	34 0b 00 07 	mvi r11,7
    for (i = 0; i < 8; i++) {
        val <<= 4;
 144:	3d 8c 00 04 	sli r12,r12,4
        val  += getHex();
 148:	fb ff ff ed 	calli fc <getHex>
 14c:	b5 81 60 00 	add r12,r12,r1
 150:	35 6b ff ff 	addi r11,r11,-1
 154:	4d 60 ff fc 	bge r11,r0,144 <readint+0x18>
    }
    return val;
}
 158:	b9 80 08 00 	mv r1,r12
 15c:	2b 8b 00 0c 	lw r11,(sp+12)
 160:	2b 8c 00 08 	lw r12,(sp+8)
 164:	2b 9d 00 04 	lw ra,(sp+4)
 168:	37 9c 00 0c 	addi sp,sp,12
 16c:	c3 a0 00 00 	ret

00000170 <writeint>:

void writeint(uint32_t val)
{
 170:	37 9c ff ec 	addi sp,sp,-20
 174:	5b 8b 00 14 	sw (sp+20),r11
 178:	5b 8c 00 10 	sw (sp+16),r12
 17c:	5b 8d 00 0c 	sw (sp+12),r13
 180:	5b 8e 00 08 	sw (sp+8),r14
 184:	5b 9d 00 04 	sw (sp+4),ra
 188:	78 0d f0 00 	mvhi r13,0xf000
 18c:	b8 20 58 00 	mv r11,r1
 190:	39 ad 00 00 	ori r13,r13,0x0
 194:	34 0e 00 09 	mvi r14,9
 198:	34 0c 00 07 	mvi r12,7
	uint32_t i, digit;

	for(i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 19c:	a1 6d 08 00 	and r1,r11,r13
 1a0:	00 22 00 1c 	srui r2,r1,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 1a4:	34 41 00 37 	addi r1,r2,55
 1a8:	51 c2 00 0c 	bgeu r14,r2,1d8 <writeint+0x68>
		else
			uart_putchar('0'+digit);
		val <<= 4;
 1ac:	3d 6b 00 04 	sli r11,r11,4
 1b0:	f8 00 00 bd 	calli 4a4 <uart_putchar>
 1b4:	35 8c ff ff 	addi r12,r12,-1
 1b8:	4d 80 ff f9 	bge r12,r0,19c <writeint+0x2c>
 1bc:	2b 8b 00 14 	lw r11,(sp+20)
 1c0:	2b 8c 00 10 	lw r12,(sp+16)
 1c4:	2b 8d 00 0c 	lw r13,(sp+12)
 1c8:	2b 8e 00 08 	lw r14,(sp+8)
 1cc:	2b 9d 00 04 	lw ra,(sp+4)
 1d0:	37 9c 00 14 	addi sp,sp,20
 1d4:	c3 a0 00 00 	ret
 1d8:	34 41 00 30 	addi r1,r2,48
 1dc:	e3 ff ff f4 	bi 1ac <writeint+0x3c>

000001e0 <memtest>:
	}
}

void memtest()
{
 1e0:	37 9c ff f4 	addi sp,sp,-12
 1e4:	5b 8b 00 0c 	sw (sp+12),r11
 1e8:	5b 8c 00 08 	sw (sp+8),r12
 1ec:	5b 9d 00 04 	sw (sp+4),ra
	volatile int *p;
	for (p=(int *)SRAM_START; p<(int *)(SRAM_START+SRAM_SIZE); p++) {
 1f0:	78 0b b0 00 	mvhi r11,0xb000
 1f4:	b9 60 10 00 	mv r2,r11
 1f8:	78 01 b0 03 	mvhi r1,0xb003
 1fc:	39 6b 00 00 	ori r11,r11,0x0
 200:	38 21 ff ff 	ori r1,r1,0xffff
		*p = (int) p;  
 204:	59 6b 00 00 	sw (r11+0),r11
 208:	35 6b 00 04 	addi r11,r11,4
 20c:	55 61 00 02 	bgu r11,r1,214 <memtest+0x34>
 210:	e3 ff ff fd 	bi 204 <memtest+0x24>
	}
	
	for (p=(int *)SRAM_START; p<(int *)(SRAM_START+SRAM_SIZE); p++) {
 214:	b8 40 58 00 	mv r11,r2
 218:	78 0c b0 03 	mvhi r12,0xb003
 21c:	39 6b 00 00 	ori r11,r11,0x0
 220:	39 8c ff ff 	ori r12,r12,0xffff
		if (*p != (int)p) {
 224:	29 62 00 00 	lw r2,(r11+0)
			uart_putstr("SRAM MEMTEST ERROR\n\r");
 228:	78 01 00 00 	mvhi r1,0x0
 22c:	38 21 05 58 	ori r1,r1,0x558
 230:	44 4b 00 02 	be r2,r11,238 <memtest+0x58>
 234:	f8 00 00 a5 	calli 4c8 <uart_putstr>
 238:	35 6b 00 04 	addi r11,r11,4
 23c:	55 6c 00 02 	bgu r11,r12,244 <memtest+0x64>
 240:	e3 ff ff f9 	bi 224 <memtest+0x44>
		}
	}
	uart_putstr("SRAM MEMTEST OK\n\r");
 244:	78 01 00 00 	mvhi r1,0x0
 248:	38 21 05 70 	ori r1,r1,0x570
 24c:	f8 00 00 9f 	calli 4c8 <uart_putstr>
 250:	2b 8b 00 0c 	lw r11,(sp+12)
 254:	2b 8c 00 08 	lw r12,(sp+8)
 258:	2b 9d 00 04 	lw ra,(sp+4)
 25c:	37 9c 00 0c 	addi sp,sp,12
 260:	c3 a0 00 00 	ret

00000264 <main>:
}

int main(int argc, char **argv)
{
 264:	37 9c ff e8 	addi sp,sp,-24
 268:	5b 8b 00 18 	sw (sp+24),r11
 26c:	5b 8c 00 14 	sw (sp+20),r12
 270:	5b 8d 00 10 	sw (sp+16),r13
 274:	5b 8e 00 0c 	sw (sp+12),r14
 278:	5b 8f 00 08 	sw (sp+8),r15
 27c:	5b 9d 00 04 	sw (sp+4),ra
	volatile int *p;
	// Initialize stuff
	uart_init();
 280:	f8 00 00 76 	calli 458 <uart_init>
	//irq_enable();

	uart_putstr("\r\n** SPIKE BOOTLOADER **\n\r");
 284:	78 01 00 00 	mvhi r1,0x0
 288:	38 21 05 84 	ori r1,r1,0x584
 28c:	f8 00 00 8f 	calli 4c8 <uart_putstr>
	memtest();
 290:	fb ff ff d4 	calli 1e0 <memtest>
 294:	78 0f 00 00 	mvhi r15,0x0
	for(;;) {
		uint32_t start, size, checksum, help;
		uart_putchar('>');
 298:	34 01 00 3e 	mvi r1,62
 29c:	f8 00 00 82 	calli 4a4 <uart_putchar>
		uint8_t c = uart_getchar();
 2a0:	f8 00 00 77 	calli 47c <uart_getchar>

		switch (c) {
 2a4:	34 22 ff 9b 	addi r2,r1,-101
 2a8:	74 41 00 11 	cmpgui r1,r2,0x11
 2ac:	5c 20 ff fb 	bne r1,r0,298 <main+0x34>
 2b0:	3c 41 00 02 	sli r1,r2,2
 2b4:	b9 e0 10 00 	mv r2,r15
 2b8:	38 42 05 10 	ori r2,r2,0x510
 2bc:	b4 22 08 00 	add r1,r1,r2
 2c0:	28 23 00 00 	lw r3,(r1+0)
 2c4:	c0 60 00 00 	b r3
    		case 'r':  // reset
    			jump(0x00000000);
    		case 'u':  // Upload programm
      			/* read start */
    			start = readint();
    			writeint(size);
    			uart_putchar(':'); 
    			/* read size */
    			size  = readint();
    			writeint(size); 
    			uart_putchar(':'); 
    			checksum = 0;
    			for (p = (int *) start; p < (int *) (start+size); p++) {
    				*p = readint();
    				checksum += *p;
    			}
    			writeint(checksum); 
    			uart_putstr(".\r\n");
    			break;
    		case 'g': // GO
    			uart_putchar('g');
    			uart_putchar(':');
    			start = readint();
    			writeint(start);
    			jump(start);
    			uart_putstr("XXXX");		
    			break;
    		case 'v': // view memory 
    		  start = readint();
    		  size  = readint();
    		  help = 0;
    		  for (p = (int *) start; p < (int *) (size); p++) {
    				writeint(*p);
    				if ((help++ & 4) == 3) 
    				    uart_putchar('\r');
    		  }
    		case 'e':
    		    while (1) {
    		      uart_putchar(uart_getchar());
 2c8:	f8 00 00 6d 	calli 47c <uart_getchar>
 2cc:	f8 00 00 76 	calli 4a4 <uart_putchar>
 2d0:	f8 00 00 6b 	calli 47c <uart_getchar>
 2d4:	f8 00 00 74 	calli 4a4 <uart_putchar>
 2d8:	e3 ff ff fc 	bi 2c8 <main+0x64>
 2dc:	34 01 00 00 	mvi r1,0
 2e0:	fb ff ff 63 	calli 6c <jump>
 2e4:	fb ff ff 92 	calli 12c <readint>
 2e8:	b8 20 58 00 	mv r11,r1
 2ec:	b9 c0 08 00 	mv r1,r14
 2f0:	fb ff ff a0 	calli 170 <writeint>
 2f4:	34 01 00 3a 	mvi r1,58
 2f8:	f8 00 00 6b 	calli 4a4 <uart_putchar>
 2fc:	fb ff ff 8c 	calli 12c <readint>
 300:	b8 20 70 00 	mv r14,r1
 304:	fb ff ff 9b 	calli 170 <writeint>
 308:	34 01 00 3a 	mvi r1,58
 30c:	f8 00 00 66 	calli 4a4 <uart_putchar>
 310:	34 0c 00 00 	mvi r12,0
 314:	b5 6e 68 00 	add r13,r11,r14
 318:	51 6d 00 22 	bgeu r11,r13,3a0 <main+0x13c>
 31c:	fb ff ff 84 	calli 12c <readint>
 320:	59 61 00 00 	sw (r11+0),r1
 324:	29 61 00 00 	lw r1,(r11+0)
 328:	35 6b 00 04 	addi r11,r11,4
 32c:	b5 81 60 00 	add r12,r12,r1
 330:	e3 ff ff fa 	bi 318 <main+0xb4>
 334:	fb ff ff 7e 	calli 12c <readint>
 338:	b8 20 58 00 	mv r11,r1
 33c:	fb ff ff 7c 	calli 12c <readint>
 340:	b8 20 70 00 	mv r14,r1
 344:	34 0c 00 00 	mvi r12,0
 348:	51 6e ff e0 	bgeu r11,r14,2c8 <main+0x64>
 34c:	29 61 00 00 	lw r1,(r11+0)
 350:	fb ff ff 88 	calli 170 <writeint>
 354:	21 81 00 04 	andi r1,r12,0x4
 358:	7c 21 00 03 	cmpnei r1,r1,3
 35c:	35 8c 00 01 	addi r12,r12,1
 360:	44 20 00 16 	be r1,r0,3b8 <main+0x154>
 364:	35 6b 00 04 	addi r11,r11,4
 368:	e3 ff ff f8 	bi 348 <main+0xe4>
 36c:	34 01 00 67 	mvi r1,103
 370:	f8 00 00 4d 	calli 4a4 <uart_putchar>
 374:	34 01 00 3a 	mvi r1,58
 378:	f8 00 00 4b 	calli 4a4 <uart_putchar>
 37c:	fb ff ff 6c 	calli 12c <readint>
 380:	b8 20 58 00 	mv r11,r1
 384:	fb ff ff 7b 	calli 170 <writeint>
 388:	b9 60 08 00 	mv r1,r11
 38c:	fb ff ff 38 	calli 6c <jump>
 390:	78 01 00 00 	mvhi r1,0x0
 394:	38 21 05 a0 	ori r1,r1,0x5a0
 398:	f8 00 00 4c 	calli 4c8 <uart_putstr>
 39c:	e3 ff ff bf 	bi 298 <main+0x34>
 3a0:	b9 80 08 00 	mv r1,r12
 3a4:	fb ff ff 73 	calli 170 <writeint>
 3a8:	78 01 00 00 	mvhi r1,0x0
 3ac:	38 21 05 a8 	ori r1,r1,0x5a8
 3b0:	f8 00 00 46 	calli 4c8 <uart_putstr>
 3b4:	e3 ff ff b9 	bi 298 <main+0x34>
 3b8:	34 01 00 0d 	mvi r1,13
 3bc:	f8 00 00 3a 	calli 4a4 <uart_putchar>
 3c0:	35 6b 00 04 	addi r11,r11,4
 3c4:	e3 ff ff e1 	bi 348 <main+0xe4>

000003c8 <irq_handler>:
		break;
	case 1:                                              /* uart0 rx */
		break;
	case 2:                                   /* timer0.0 (system tic) */
		tcr = timer0->tcr0;  // reset trig0
 3c8:	78 02 00 00 	mvhi r2,0x0
		msec++;
 3cc:	78 04 00 00 	mvhi r4,0x0
 3d0:	64 21 00 02 	cmpei r1,r1,2
 3d4:	38 42 05 0c 	ori r2,r2,0x50c
 3d8:	38 84 04 fc 	ori r4,r4,0x4fc
 3dc:	5c 20 00 02 	bne r1,r0,3e4 <irq_handler+0x1c>
 3e0:	c3 a0 00 00 	ret
 3e4:	28 41 00 00 	lw r1,(r2+0)
 3e8:	28 82 00 00 	lw r2,(r4+0)
 3ec:	28 23 00 00 	lw r3,(r1+0)
 3f0:	34 42 00 01 	addi r2,r2,1
 3f4:	58 82 00 00 	sw (r4+0),r2
 3f8:	c3 a0 00 00 	ret

000003fc <sleep>:
		break;
	case 3:                                               /* timer0.1 */
		break;
	};

	return;
}

/***************************************************************************
 * General utility functions
 */
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3fc:	78 02 00 00 	mvhi r2,0x0
 400:	38 42 05 0c 	ori r2,r2,0x50c
 404:	28 43 00 00 	lw r3,(r2+0)
 408:	08 21 61 a8 	muli r1,r1,25000
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 40c:	34 02 00 0a 	mvi r2,10
 410:	58 61 00 10 	sw (r3+16),r1
 414:	34 01 00 00 	mvi r1,0
 418:	58 61 00 14 	sw (r3+20),r1
 41c:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
		tcr = timer0->tcr1;
 420:	28 61 00 0c 	lw r1,(r3+12)
	} while ( ! (tcr & TIMER_TRIG) );
 424:	20 21 00 01 	andi r1,r1,0x1
 428:	44 20 ff fe 	be r1,r0,420 <sleep+0x24>
 42c:	c3 a0 00 00 	ret

00000430 <tic_init>:
}

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 430:	78 01 00 00 	mvhi r1,0x0
 434:	38 21 05 0c 	ori r1,r1,0x50c
 438:	28 23 00 00 	lw r3,(r1+0)
 43c:	34 02 61 a8 	mvi r2,25000
 440:	58 62 00 04 	sw (r3+4),r2
	timer0->counter0 = 0;
 444:	34 01 00 00 	mvi r1,0
 448:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 44c:	34 02 00 0e 	mvi r2,14
 450:	58 62 00 00 	sw (r3+0),r2
 454:	c3 a0 00 00 	ret

00000458 <uart_init>:
}

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
	uart0->ier = 0x00;  // Interrupt Enable Register
 458:	78 01 00 00 	mvhi r1,0x0
 45c:	38 21 05 08 	ori r1,r1,0x508
 460:	28 22 00 00 	lw r2,(r1+0)
 464:	34 03 00 00 	mvi r3,0
 468:	58 43 00 04 	sw (r2+4),r3
	uart0->lcr = 0x03;  // Line Control Register:    8N1
 46c:	34 01 00 03 	mvi r1,3
 470:	58 41 00 0c 	sw (r2+12),r1
	uart0->mcr = 0x00;  // Modem Control Register
 474:	58 43 00 10 	sw (r2+16),r3
 478:	c3 a0 00 00 	ret

0000047c <uart_getchar>:


	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 47c:	78 03 00 00 	mvhi r3,0x0
	while (! (uart0->lsr & UART_DR)) {
 480:	b8 60 10 00 	mv r2,r3
 484:	38 42 05 08 	ori r2,r2,0x508
 488:	28 42 00 00 	lw r2,(r2+0)
 48c:	28 41 00 14 	lw r1,(r2+20)
 490:	20 21 00 01 	andi r1,r1,0x1
 494:	44 20 ff fb 	be r1,r0,480 <uart_getchar+0x4>
	}
	return uart0->rxtx;
 498:	28 41 00 00 	lw r1,(r2+0)
}
 49c:	20 21 00 ff 	andi r1,r1,0xff
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_putchar>:

void uart_putchar(char c)
{
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 05 08 	ori r2,r2,0x508
 4ac:	28 42 00 00 	lw r2,(r2+0)
 4b0:	20 23 00 ff 	andi r3,r1,0xff
	while (! (uart0->lsr & UART_THRE)) {
 4b4:	28 41 00 14 	lw r1,(r2+20)
 4b8:	20 21 00 20 	andi r1,r1,0x20
 4bc:	44 20 ff fe 	be r1,r0,4b4 <uart_putchar+0x10>
	}
	uart0->rxtx = c;
 4c0:	58 43 00 00 	sw (r2+0),r3
 4c4:	c3 a0 00 00 	ret

000004c8 <uart_putstr>:
}

void uart_putstr(char *str)
{
 4c8:	37 9c ff f8 	addi sp,sp,-8
 4cc:	5b 8b 00 08 	sw (sp+8),r11
 4d0:	5b 9d 00 04 	sw (sp+4),ra
 4d4:	b8 20 58 00 	mv r11,r1
 4d8:	e0 00 00 03 	bi 4e4 <uart_putstr+0x1c>
	char *c = str;
	while(*c) {
		uart_putchar(*c);
 4dc:	fb ff ff f2 	calli 4a4 <uart_putchar>
		c++;
 4e0:	35 6b 00 01 	addi r11,r11,1
 4e4:	41 61 00 00 	lbu r1,(r11+0)
 4e8:	5c 20 ff fd 	bne r1,r0,4dc <uart_putstr+0x14>
 4ec:	2b 8b 00 08 	lw r11,(sp+8)
 4f0:	2b 9d 00 04 	lw ra,(sp+4)
 4f4:	37 9c 00 08 	addi sp,sp,8
 4f8:	c3 a0 00 00 	ret
