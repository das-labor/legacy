
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000594  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         0000012b  00000594  00000594  000005e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000800  00000800  00000713  2**0
                  ALLOC
  3 .debug_abbrev 000001e7  00000000  00000000  00000713  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000556  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000490  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000eb  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b8  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000062  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY
Disassembly of section .text:

00000000 <_start>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	98 00 00 00 	xor r0,r0,r0
  24:	78 1c 00 00 	mvhi sp,0x0
  28:	3b 9c 10 00 	ori sp,sp,0x1000
  2c:	37 9c ff fc 	addi sp,sp,-4
  30:	78 1a 00 00 	mvhi gp,0x0
  34:	3b 5a 08 00 	ori gp,gp,0x800
  38:	34 01 00 00 	mvi r1,0
  3c:	34 02 00 00 	mvi r2,0
  40:	34 03 00 00 	mvi r3,0
  44:	f8 00 00 a2 	calli 2cc <main>

00000048 <irq_enable>:
  48:	34 01 00 01 	mvi r1,1
  4c:	d0 01 00 00 	wcsr IE,r1
  50:	c3 a0 00 00 	ret

00000054 <irq_mask>:
  54:	34 01 00 0f 	mvi r1,15
  58:	d0 21 00 00 	wcsr IM,r1
  5c:	c3 a0 00 00 	ret

00000060 <irq_disable>:
  60:	34 01 00 00 	mvi r1,0
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <jump>:
  6c:	c0 20 00 00 	b r1

00000070 <halt>:
  70:	e0 00 00 00 	bi 70 <halt>

00000074 <_save_all>:
  74:	37 9c ff 80 	addi sp,sp,-128
  78:	5b 81 00 04 	sw (sp+4),r1
  7c:	5b 82 00 08 	sw (sp+8),r2
  80:	5b 83 00 0c 	sw (sp+12),r3
  84:	5b 84 00 10 	sw (sp+16),r4
  88:	5b 85 00 14 	sw (sp+20),r5
  8c:	5b 86 00 18 	sw (sp+24),r6
  90:	5b 87 00 1c 	sw (sp+28),r7
  94:	5b 88 00 20 	sw (sp+32),r8
  98:	5b 89 00 24 	sw (sp+36),r9
  9c:	5b 8a 00 28 	sw (sp+40),r10
  a0:	5b 9e 00 78 	sw (sp+120),ea
  a4:	5b 9f 00 7c 	sw (sp+124),ba
  a8:	2b 81 00 80 	lw r1,(sp+128)
  ac:	5b 81 00 74 	sw (sp+116),r1
  b0:	bb 80 08 00 	mv r1,sp
  b4:	34 21 00 80 	addi r1,r1,128
  b8:	5b 81 00 70 	sw (sp+112),r1
  bc:	c3 a0 00 00 	ret

000000c0 <_restore_all_and_return>:
  c0:	2b 81 00 04 	lw r1,(sp+4)
  c4:	2b 82 00 08 	lw r2,(sp+8)
  c8:	2b 83 00 0c 	lw r3,(sp+12)
  cc:	2b 84 00 10 	lw r4,(sp+16)
  d0:	2b 85 00 14 	lw r5,(sp+20)
  d4:	2b 86 00 18 	lw r6,(sp+24)
  d8:	2b 87 00 1c 	lw r7,(sp+28)
  dc:	2b 88 00 20 	lw r8,(sp+32)
  e0:	2b 89 00 24 	lw r9,(sp+36)
  e4:	2b 8a 00 28 	lw r10,(sp+40)
  e8:	2b 9d 00 74 	lw ra,(sp+116)
  ec:	2b 9e 00 78 	lw ea,(sp+120)
  f0:	2b 9f 00 7c 	lw ba,(sp+124)
  f4:	2b 9c 00 70 	lw sp,(sp+112)
  f8:	c3 c0 00 00 	eret

000000fc <readint>:
#include "spike_hw.h"

uint32_t readint(uint8_t nibbles, uint8_t* checksum) {
  fc:	37 9c ff ec 	addi sp,sp,-20
 100:	5b 8b 00 14 	sw (sp+20),r11
 104:	5b 8c 00 10 	sw (sp+16),r12
 108:	5b 8d 00 0c 	sw (sp+12),r13
 10c:	5b 8e 00 08 	sw (sp+8),r14
 110:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t val = 0, i;
 114:	34 0b 00 00 	mvi r11,0
 118:	b8 40 70 00 	mv r14,r2
 11c:	20 2d 00 ff 	andi r13,r1,0xff
    uint8_t c;
    for (i = 0; i < nibbles; i++) {
 120:	b9 60 60 00 	mv r12,r11
 124:	51 6d 00 1a 	bgeu r11,r13,18c <readint+0x90>
        val <<= 4;
        c = uart_getchar();
 128:	f8 00 00 fb 	calli 514 <uart_getchar>
        if (c <= '9')
    	   val |= (c - '0') & 0xf;
        else
    	   val |= (c - 'A' + 0xa) & 0xf; 
 12c:	34 22 ff c9 	addi r2,r1,-55
 130:	20 23 00 0f 	andi r3,r1,0xf
 134:	3d 6b 00 04 	sli r11,r11,4
 138:	74 21 00 39 	cmpgui r1,r1,0x39
 13c:	20 42 00 0f 	andi r2,r2,0xf
 140:	5c 20 00 11 	bne r1,r0,184 <readint+0x88>
 144:	b9 63 58 00 	or r11,r11,r3
    	if (i & 1)
 148:	21 81 00 01 	andi r1,r12,0x1
 14c:	64 21 00 00 	cmpei r1,r1,0
 150:	35 8c 00 01 	addi r12,r12,1
 154:	5c 20 00 04 	bne r1,r0,164 <readint+0x68>
    	   *checksum += val;      
 158:	41 c1 00 00 	lbu r1,(r14+0)
 15c:	b5 61 08 00 	add r1,r11,r1
 160:	31 c1 00 00 	sb (r14+0),r1
 164:	51 8d 00 0a 	bgeu r12,r13,18c <readint+0x90>
 168:	f8 00 00 eb 	calli 514 <uart_getchar>
 16c:	34 22 ff c9 	addi r2,r1,-55
 170:	20 23 00 0f 	andi r3,r1,0xf
 174:	3d 6b 00 04 	sli r11,r11,4
 178:	74 21 00 39 	cmpgui r1,r1,0x39
 17c:	20 42 00 0f 	andi r2,r2,0xf
 180:	44 20 ff f1 	be r1,r0,144 <readint+0x48>
 184:	b9 62 58 00 	or r11,r11,r2
 188:	e3 ff ff f0 	bi 148 <readint+0x4c>
    }
    return val;
}
 18c:	b9 60 08 00 	mv r1,r11
 190:	2b 8b 00 14 	lw r11,(sp+20)
 194:	2b 8c 00 10 	lw r12,(sp+16)
 198:	2b 8d 00 0c 	lw r13,(sp+12)
 19c:	2b 8e 00 08 	lw r14,(sp+8)
 1a0:	2b 9d 00 04 	lw ra,(sp+4)
 1a4:	37 9c 00 14 	addi sp,sp,20
 1a8:	c3 a0 00 00 	ret

000001ac <writeint>:

void writeint(uint8_t nibbles, uint32_t val)
{
 1ac:	37 9c ff e8 	addi sp,sp,-24
 1b0:	5b 8b 00 18 	sw (sp+24),r11
 1b4:	5b 8c 00 14 	sw (sp+20),r12
 1b8:	5b 8d 00 10 	sw (sp+16),r13
 1bc:	5b 8e 00 0c 	sw (sp+12),r14
 1c0:	5b 8f 00 08 	sw (sp+8),r15
 1c4:	5b 9d 00 04 	sw (sp+4),ra
 1c8:	20 21 00 ff 	andi r1,r1,0xff
 1cc:	78 0d f0 00 	mvhi r13,0xf000
 1d0:	34 03 00 08 	mvi r3,8
 1d4:	c8 61 70 00 	sub r14,r3,r1
 1d8:	b8 40 58 00 	mv r11,r2
 1dc:	39 ad 00 00 	ori r13,r13,0x0
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 1e0:	34 0c 00 00 	mvi r12,0
 1e4:	34 0f 00 09 	mvi r15,9
	    if (i >= 8-nibbles) {
    		digit = (val & 0xf0000000) >> 28;
 1e8:	a1 6d 08 00 	and r1,r11,r13
 1ec:	00 22 00 1c 	srui r2,r1,28
 1f0:	55 cc 00 04 	bgu r14,r12,200 <writeint+0x54>
    		if (digit >= 0xA) 
      			uart_putchar('A'+digit-10);
 1f4:	34 41 00 37 	addi r1,r2,55
 1f8:	51 e2 00 0e 	bgeu r15,r2,230 <writeint+0x84>
      		else
    			uart_putchar('0'+digit);
 1fc:	f8 00 00 d0 	calli 53c <uart_putchar>
 200:	35 8c 00 01 	addi r12,r12,1
	    }
		val <<= 4;
 204:	3d 6b 00 04 	sli r11,r11,4
 208:	75 81 00 07 	cmpgui r1,r12,0x7
 20c:	44 20 ff f7 	be r1,r0,1e8 <writeint+0x3c>
 210:	2b 8b 00 18 	lw r11,(sp+24)
 214:	2b 8c 00 14 	lw r12,(sp+20)
 218:	2b 8d 00 10 	lw r13,(sp+16)
 21c:	2b 8e 00 0c 	lw r14,(sp+12)
 220:	2b 8f 00 08 	lw r15,(sp+8)
 224:	2b 9d 00 04 	lw ra,(sp+4)
 228:	37 9c 00 18 	addi sp,sp,24
 22c:	c3 a0 00 00 	ret
 230:	34 41 00 30 	addi r1,r2,48
 234:	e3 ff ff f2 	bi 1fc <writeint+0x50>

00000238 <memtest>:
	}
}

void memtest()
{
 238:	37 9c ff f0 	addi sp,sp,-16
 23c:	5b 8b 00 10 	sw (sp+16),r11
 240:	5b 8c 00 0c 	sw (sp+12),r12
 244:	5b 8d 00 08 	sw (sp+8),r13
 248:	5b 9d 00 04 	sw (sp+4),ra
	volatile int *p;
	for (p=(int *)SRAM_START; p<(int *)(SRAM_START+SRAM_SIZE); p++) {
 24c:	78 0b b0 00 	mvhi r11,0xb000
 250:	b9 60 10 00 	mv r2,r11
 254:	78 01 b0 03 	mvhi r1,0xb003
 258:	39 6b 00 00 	ori r11,r11,0x0
 25c:	38 21 ff ff 	ori r1,r1,0xffff
		*p = (int) p;  
 260:	59 6b 00 00 	sw (r11+0),r11
 264:	35 6b 00 04 	addi r11,r11,4
 268:	55 61 00 02 	bgu r11,r1,270 <memtest+0x38>
 26c:	e3 ff ff fd 	bi 260 <memtest+0x28>
	}
	
	for (p=(int *)SRAM_START; p<(int *)(SRAM_START+SRAM_SIZE); p++) {
 270:	b8 40 58 00 	mv r11,r2
 274:	78 0c b0 03 	mvhi r12,0xb003
 278:	39 6b 00 00 	ori r11,r11,0x0
 27c:	39 8c ff ff 	ori r12,r12,0xffff
 280:	34 0d 00 00 	mvi r13,0
		if (*p != (int)p) {
 284:	29 62 00 00 	lw r2,(r11+0)
			uart_putstr("SRAM MEMTEST ERROR\n\r");
 288:	78 01 00 00 	mvhi r1,0x0
 28c:	38 21 06 70 	ori r1,r1,0x670
 290:	44 4b 00 02 	be r2,r11,298 <memtest+0x60>
 294:	f8 00 00 b3 	calli 560 <uart_putstr>
		}
		*p = 0;
 298:	59 6d 00 00 	sw (r11+0),r13
 29c:	35 6b 00 04 	addi r11,r11,4
 2a0:	55 6c 00 02 	bgu r11,r12,2a8 <memtest+0x70>
 2a4:	e3 ff ff f8 	bi 284 <memtest+0x4c>
	}
	uart_putstr("SRAM MEMTEST OK\n\r");
 2a8:	78 01 00 00 	mvhi r1,0x0
 2ac:	38 21 06 88 	ori r1,r1,0x688
 2b0:	f8 00 00 ac 	calli 560 <uart_putstr>
 2b4:	2b 8b 00 10 	lw r11,(sp+16)
 2b8:	2b 8c 00 0c 	lw r12,(sp+12)
 2bc:	2b 8d 00 08 	lw r13,(sp+8)
 2c0:	2b 9d 00 04 	lw ra,(sp+4)
 2c4:	37 9c 00 10 	addi sp,sp,16
 2c8:	c3 a0 00 00 	ret

000002cc <main>:
}

int main(int argc, char **argv)
{
 2cc:	37 9c ff e8 	addi sp,sp,-24
 2d0:	5b 8b 00 14 	sw (sp+20),r11
 2d4:	5b 8c 00 10 	sw (sp+16),r12
 2d8:	5b 8d 00 0c 	sw (sp+12),r13
 2dc:	5b 8e 00 08 	sw (sp+8),r14
 2e0:	5b 9d 00 04 	sw (sp+4),ra
	volatile int8_t  *p;
	volatile int32_t *p32;
	uint8_t checksum;
	// Initialize stuff
	uart_init();
 2e4:	f8 00 00 83 	calli 4f0 <uart_init>
	//irq_enable();

	uart_putstr("\r\n** SPIKE BOOTLOADER **\n\r");
 2e8:	78 01 00 00 	mvhi r1,0x0
 2ec:	38 21 06 9c 	ori r1,r1,0x69c
 2f0:	f8 00 00 9c 	calli 560 <uart_putstr>
	memtest();
 2f4:	fb ff ff d1 	calli 238 <memtest>
 2f8:	78 0e 00 00 	mvhi r14,0x0
	for(;;) {
		uint32_t start, size, checksum, help;
		uart_putchar('>');
 2fc:	34 01 00 3e 	mvi r1,62
 300:	f8 00 00 8f 	calli 53c <uart_putchar>
		uint8_t c = uart_getchar();
 304:	f8 00 00 84 	calli 514 <uart_getchar>

		switch (c) {
 308:	34 22 ff bb 	addi r2,r1,-69
 30c:	74 41 00 31 	cmpgui r1,r2,0x31
 310:	5c 20 ff fb 	bne r1,r0,2fc <main+0x30>
 314:	3c 41 00 02 	sli r1,r2,2
 318:	b9 c0 10 00 	mv r2,r14
 31c:	38 42 05 a8 	ori r2,r2,0x5a8
 320:	b4 22 08 00 	add r1,r1,r2
 324:	28 23 00 00 	lw r3,(r1+0)
 328:	c0 60 00 00 	b r3
    		case 'r': // reset
    			jump(0x00000000);
    			break;
    		case 'u': // Upload programm
      			checksum = 0;
      			/* read size */
    			size  = readint(2, (uint8_t *) &checksum);
    			size -= 5;
      			/* read start */
    			start = readint(8, (uint8_t *) &checksum);
    			for (p = (int8_t *) start; p < (int8_t *) (start+size); p++) {
    				*p = readint(2, (uint8_t *) &checksum);
    			}
    			writeint(2, ~checksum);
    			break;
    		case 'g': // go
    			start = readint(8, (uint8_t *) &checksum);
    			jump(start);
    			uart_putstr("XX");		
    			break;
    		case 'v': // view memory 
    		  start = readint(8, (uint8_t *) &checksum);
    		  size  = readint(8, (uint8_t *) &checksum);
    	      help = 0;
    		  for (p32 = (int32_t *) start; p32 < (int32_t *) (size); p32++) {
    				if (!(help++ & 3)) {
    				    uart_putstr("\r\n[");
    				    writeint(8, (uint32_t) p32);
    				    uart_putchar(']');    
    				}
    				uart_putchar(' ');    
    				writeint(8, *p32);
    		  }
    		  break;
    		case 'e': // echo test
    		    while (1) {
    		      uart_putchar(uart_getchar());
 32c:	f8 00 00 7a 	calli 514 <uart_getchar>
 330:	f8 00 00 83 	calli 53c <uart_putchar>
 334:	f8 00 00 78 	calli 514 <uart_getchar>
 338:	f8 00 00 81 	calli 53c <uart_putchar>
 33c:	e3 ff ff fc 	bi 32c <main+0x60>
    		    }
    		    break;
    		case 'E':
    		    checksum = 0;
 340:	34 01 00 00 	mvi r1,0
 344:	5b 81 00 18 	sw (sp+24),r1
    		    while (1) {
    		          readint(8, (uint8_t *) &checksum);
 348:	37 82 00 18 	addi r2,sp,24
 34c:	34 01 00 08 	mvi r1,8
 350:	fb ff ff 6b 	calli fc <readint>
    		          writeint(2, checksum); 
 354:	2b 82 00 18 	lw r2,(sp+24)
 358:	34 01 00 02 	mvi r1,2
 35c:	fb ff ff 94 	calli 1ac <writeint>
 360:	e3 ff ff fa 	bi 348 <main+0x7c>
 364:	37 82 00 18 	addi r2,sp,24
 368:	34 01 00 08 	mvi r1,8
 36c:	fb ff ff 64 	calli fc <readint>
 370:	b8 20 58 00 	mv r11,r1
 374:	34 01 00 08 	mvi r1,8
 378:	37 82 00 18 	addi r2,sp,24
 37c:	fb ff ff 60 	calli fc <readint>
 380:	b8 20 60 00 	mv r12,r1
 384:	34 0d 00 00 	mvi r13,0
 388:	51 6c ff dd 	bgeu r11,r12,2fc <main+0x30>
 38c:	21 a1 00 03 	andi r1,r13,0x3
 390:	35 ad 00 01 	addi r13,r13,1
 394:	5c 20 00 09 	bne r1,r0,3b8 <main+0xec>
 398:	78 01 00 00 	mvhi r1,0x0
 39c:	38 21 06 b8 	ori r1,r1,0x6b8
 3a0:	f8 00 00 70 	calli 560 <uart_putstr>
 3a4:	34 01 00 08 	mvi r1,8
 3a8:	b9 60 10 00 	mv r2,r11
 3ac:	fb ff ff 80 	calli 1ac <writeint>
 3b0:	34 01 00 5d 	mvi r1,93
 3b4:	f8 00 00 62 	calli 53c <uart_putchar>
 3b8:	34 01 00 20 	mvi r1,32
 3bc:	f8 00 00 60 	calli 53c <uart_putchar>
 3c0:	29 62 00 00 	lw r2,(r11+0)
 3c4:	34 01 00 08 	mvi r1,8
 3c8:	fb ff ff 79 	calli 1ac <writeint>
 3cc:	35 6b 00 04 	addi r11,r11,4
 3d0:	e3 ff ff ee 	bi 388 <main+0xbc>
 3d4:	34 01 00 00 	mvi r1,0
 3d8:	5b 81 00 18 	sw (sp+24),r1
 3dc:	37 82 00 18 	addi r2,sp,24
 3e0:	34 01 00 02 	mvi r1,2
 3e4:	fb ff ff 46 	calli fc <readint>
 3e8:	34 2c ff fb 	addi r12,r1,-5
 3ec:	34 01 00 08 	mvi r1,8
 3f0:	37 82 00 18 	addi r2,sp,24
 3f4:	fb ff ff 42 	calli fc <readint>
 3f8:	b4 2c 68 00 	add r13,r1,r12
 3fc:	b8 20 60 00 	mv r12,r1
 400:	50 2d 00 13 	bgeu r1,r13,44c <main+0x180>
 404:	34 01 00 02 	mvi r1,2
 408:	37 82 00 18 	addi r2,sp,24
 40c:	fb ff ff 3c 	calli fc <readint>
 410:	31 81 00 00 	sb (r12+0),r1
 414:	35 8c 00 01 	addi r12,r12,1
 418:	51 8d 00 0d 	bgeu r12,r13,44c <main+0x180>
 41c:	e3 ff ff fa 	bi 404 <main+0x138>
 420:	34 01 00 00 	mvi r1,0
 424:	fb ff ff 12 	calli 6c <jump>
 428:	e3 ff ff b5 	bi 2fc <main+0x30>
 42c:	37 82 00 18 	addi r2,sp,24
 430:	34 01 00 08 	mvi r1,8
 434:	fb ff ff 32 	calli fc <readint>
 438:	fb ff ff 0d 	calli 6c <jump>
 43c:	78 01 00 00 	mvhi r1,0x0
 440:	38 21 06 bc 	ori r1,r1,0x6bc
 444:	f8 00 00 47 	calli 560 <uart_putstr>
 448:	e3 ff ff ad 	bi 2fc <main+0x30>
 44c:	2b 82 00 18 	lw r2,(sp+24)
 450:	34 01 00 02 	mvi r1,2
 454:	a4 40 10 00 	not r2,r2
 458:	fb ff ff 55 	calli 1ac <writeint>
 45c:	e3 ff ff a8 	bi 2fc <main+0x30>

00000460 <irq_handler>:
		break;
	case 1:                                              /* uart0 rx */
		break;
	case 2:                                   /* timer0.0 (system tic) */
		tcr = timer0->tcr0;  // reset trig0
 460:	78 02 00 00 	mvhi r2,0x0
		msec++;
 464:	78 04 00 00 	mvhi r4,0x0
 468:	64 21 00 02 	cmpei r1,r1,2
 46c:	38 42 05 a4 	ori r2,r2,0x5a4
 470:	38 84 05 94 	ori r4,r4,0x594
 474:	5c 20 00 02 	bne r1,r0,47c <irq_handler+0x1c>
 478:	c3 a0 00 00 	ret
 47c:	28 41 00 00 	lw r1,(r2+0)
 480:	28 82 00 00 	lw r2,(r4+0)
 484:	28 23 00 00 	lw r3,(r1+0)
 488:	34 42 00 01 	addi r2,r2,1
 48c:	58 82 00 00 	sw (r4+0),r2
 490:	c3 a0 00 00 	ret

00000494 <sleep>:
		break;
	case 3:                                               /* timer0.1 */
		break;
	};

	return;
}

/***************************************************************************
 * General utility functions
 */
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 494:	78 02 00 00 	mvhi r2,0x0
 498:	38 42 05 a4 	ori r2,r2,0x5a4
 49c:	28 43 00 00 	lw r3,(r2+0)
 4a0:	08 21 61 a8 	muli r1,r1,25000
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 4a4:	34 02 00 0a 	mvi r2,10
 4a8:	58 61 00 10 	sw (r3+16),r1
 4ac:	34 01 00 00 	mvi r1,0
 4b0:	58 61 00 14 	sw (r3+20),r1
 4b4:	58 62 00 0c 	sw (r3+12),r2

	do {
		//halt();
		tcr = timer0->tcr1;
 4b8:	28 61 00 0c 	lw r1,(r3+12)
	} while ( ! (tcr & TIMER_TRIG) );
 4bc:	20 21 00 01 	andi r1,r1,0x1
 4c0:	44 20 ff fe 	be r1,r0,4b8 <sleep+0x24>
 4c4:	c3 a0 00 00 	ret

000004c8 <tic_init>:
}

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 4c8:	78 01 00 00 	mvhi r1,0x0
 4cc:	38 21 05 a4 	ori r1,r1,0x5a4
 4d0:	28 23 00 00 	lw r3,(r1+0)
 4d4:	34 02 61 a8 	mvi r2,25000
 4d8:	58 62 00 04 	sw (r3+4),r2
	timer0->counter0 = 0;
 4dc:	34 01 00 00 	mvi r1,0
 4e0:	58 61 00 08 	sw (r3+8),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4e4:	34 02 00 0e 	mvi r2,14
 4e8:	58 62 00 00 	sw (r3+0),r2
 4ec:	c3 a0 00 00 	ret

000004f0 <uart_init>:
}

/***************************************************************************
 * UART Functions
 */
void uart_init()
{
	uart0->ier = 0x00;  // Interrupt Enable Register
 4f0:	78 01 00 00 	mvhi r1,0x0
 4f4:	38 21 05 a0 	ori r1,r1,0x5a0
 4f8:	28 22 00 00 	lw r2,(r1+0)
 4fc:	34 03 00 00 	mvi r3,0
 500:	58 43 00 04 	sw (r2+4),r3
	uart0->lcr = 0x03;  // Line Control Register:    8N1
 504:	34 01 00 03 	mvi r1,3
 508:	58 41 00 0c 	sw (r2+12),r1
	uart0->mcr = 0x00;  // Modem Control Register
 50c:	58 43 00 10 	sw (r2+16),r3
 510:	c3 a0 00 00 	ret

00000514 <uart_getchar>:


	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
 514:	78 03 00 00 	mvhi r3,0x0
	while (! (uart0->lsr & UART_DR)) {
 518:	b8 60 10 00 	mv r2,r3
 51c:	38 42 05 a0 	ori r2,r2,0x5a0
 520:	28 42 00 00 	lw r2,(r2+0)
 524:	28 41 00 14 	lw r1,(r2+20)
 528:	20 21 00 01 	andi r1,r1,0x1
 52c:	44 20 ff fb 	be r1,r0,518 <uart_getchar+0x4>
	}
	return uart0->rxtx;
 530:	28 41 00 00 	lw r1,(r2+0)
}
 534:	20 21 00 ff 	andi r1,r1,0xff
 538:	c3 a0 00 00 	ret

0000053c <uart_putchar>:

void uart_putchar(char c)
{
 53c:	78 02 00 00 	mvhi r2,0x0
 540:	38 42 05 a0 	ori r2,r2,0x5a0
 544:	28 42 00 00 	lw r2,(r2+0)
 548:	20 23 00 ff 	andi r3,r1,0xff
	while (! (uart0->lsr & UART_THRE)) {
 54c:	28 41 00 14 	lw r1,(r2+20)
 550:	20 21 00 20 	andi r1,r1,0x20
 554:	44 20 ff fe 	be r1,r0,54c <uart_putchar+0x10>
	}
	uart0->rxtx = c;
 558:	58 43 00 00 	sw (r2+0),r3
 55c:	c3 a0 00 00 	ret

00000560 <uart_putstr>:
}

void uart_putstr(char *str)
{
 560:	37 9c ff f8 	addi sp,sp,-8
 564:	5b 8b 00 08 	sw (sp+8),r11
 568:	5b 9d 00 04 	sw (sp+4),ra
 56c:	b8 20 58 00 	mv r11,r1
 570:	e0 00 00 03 	bi 57c <uart_putstr+0x1c>
	char *c = str;
	while(*c) {
		uart_putchar(*c);
 574:	fb ff ff f2 	calli 53c <uart_putchar>
		c++;
 578:	35 6b 00 01 	addi r11,r11,1
 57c:	41 61 00 00 	lbu r1,(r11+0)
 580:	5c 20 ff fd 	bne r1,r0,574 <uart_putstr+0x14>
 584:	2b 8b 00 08 	lw r11,(sp+8)
 588:	2b 9d 00 04 	lw ra,(sp+4)
 58c:	37 9c 00 08 	addi sp,sp,8
 590:	c3 a0 00 00 	ret
