
canmacht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001646  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00001646  000016da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e2  008000c4  008000c4  0000173e  2**2
                  ALLOC
  3 .noinit       00000000  008002a6  008002a6  0000173e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000173e  2**0
                  CONTENTS
  5 .stab         0000537c  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00002426  00000000  00000000  00006abc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 01 	jmp	0x27c <__init>
       4:	0c 94 35 02 	jmp	0x46a <__vector_1>
       8:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
       c:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      14:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      18:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      1c:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      20:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      24:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      28:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      2c:	0c 94 5b 01 	jmp	0x2b6 <__vector_11>
      30:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      34:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      38:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      3c:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      40:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      44:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      48:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      4c:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>
      50:	0c 94 59 01 	jmp	0x2b2 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	9c 01       	movw	r18, r24
      56:	41 03       	mulsu	r20, r17
      58:	5a 01       	movw	r10, r20
      5a:	04 f6       	brge	.-128    	; 0xffffffdc <__eeprom_end+0xff7effdc>

0000005b <laptaskTcb>:
      5b:	f6 01 80 03 f8 01 03                                .......

00000062 <fontData_small6>:
      62:	00 2f 03 00 03 12 3f 12 3f 12 26 7f 32 13 0b 34     ./....?.?.&.2..4
      72:	32 1a 25 1a 28 03 7e 81 81 7e 03 03 08 1c 08 60     2.%.(.~..~.....`
      82:	08 08 20 38 07 1e 21 21 1e 02 3f 32 29 29 26 12     .. 8..!!..?2))&.
      92:	21 25 1a 18 16 3f 10 27 25 19 1e 25 25 18 01 3d     !%...?.'%..%%..=
      a2:	03 1a 25 25 1a 12 25 25 1e 24 64 08 14 22 14 14     ..%%..%%.$d.."..
      b2:	14 22 14 08 02 29 05 02 1c 22 49 55 59 12 0c 30     ."...)..."IUY..0
      c2:	0c 0b 0c 30 3f 25 25 25 1a 1e 21 21 21 12 3f 21     ...0?%%%..!!!.?!
      d2:	21 21 1e 3f 25 25 21 3f 05 05 01 1e 21 21 29 3a     !!.?%%!?....!!):
      e2:	3f 04 04 3f 3f 30 20 1f 3f 0c 12 21 3f 20 20 3f     ?..??0 .?..!?  ?
      f2:	03 0c 30 0c 03 3f 3f 03 0c 30 3f 1e 21 21 21 1e     ..0..??..0?.!!!.
     102:	3f 09 09 06 1e 21 29 11 2e 3f 09 09 09 36 12 25     ?....!)..?...6.%
     112:	29 12 01 3f 01 01 1f 20 20 20 1f 03 0c 30 0c 03     )..?...   ...0..
     122:	03 0c 30 0c 30 0c 03 21 12 0c 12 21 01 02 3c 02     ..0.0..!...!..<.
     132:	01 31 29 25 23 7f 41 07 38 41 7f 02 01 02 40 40     .1)%#.A.8A....@@
     142:	40 40 00 01 14 24 38 3f 24 24 18 18 24 24 18 24     @@...$8?$$..$$.$
     152:	24 3f 18 24 28 3e 05 18 a4 a4 7c 3f 04 38 3d fd     $?.$(>....|?.8=.
     162:	3f 08 34 3f 3c 04 3c 04 38 3c 04 38 18 24 24 18     ?.4?<.<.8<.8.$$.
     172:	fc 24 24 18 18 24 24 fc 3c 04 28 24 14 1e 24 1c     .$$..$$.<.($..$.
     182:	20 3c 0c 30 0c 0c 30 0c 30 0c 24 18 24 9c 60 1c      <.0..0.0.$.$.`.
     192:	34 24 2c 08 77 7f 77 08 01 02 01 02 3e 05 26 18     4$,.w.w.....>.&.
     1a2:	19 24 29 19 24 24 19 1d 20 3d                       .$).$$.. =

000001ac <fontIndex_small6>:
     1ac:	00 00 01 00 02 00 05 00 0a 00 0d 00 11 00 15 00     ................
     1bc:	16 00 18 00 1a 00 1c 00 1f 00 20 00 22 00 23 00     .......... .".#.
     1cc:	25 00 29 00 2b 00 2f 00 33 00 37 00 3a 00 3e 00     %.).+./.3.7.:.>.
     1dc:	41 00 45 00 49 00 4a 00 4b 00 4e 00 51 00 54 00     A.E.I.J.K.N.Q.T.
     1ec:	58 00 5f 00 64 00 69 00 6e 00 73 00 77 00 7b 00     X._.d.i.n.s.w.{.
     1fc:	80 00 84 00 85 00 88 00 8c 00 8f 00 96 00 9b 00     ................
     20c:	a0 00 a4 00 a9 00 ae 00 b2 00 b6 00 bb 00 c0 00     ................
     21c:	c7 00 cc 00 d1 00 d5 00 d7 00 d9 00 db 00 de 00     ................
     22c:	e2 00 e4 00 e7 00 eb 00 ee 00 f2 00 f5 00 f7 00     ................
     23c:	fb 00 fe 00 ff 00 00 01 03 01 04 01 09 01 0c 01     ................
     24c:	10 01 14 01 18 01 1a 01 1d 01 1f 01 22 01 25 01     ............".%.
     25c:	2a 01 2d 01 30 01 33 01 35 01 36 01 38 01 3c 01     *.-.0.3.5.6.8.<.
     26c:	41 01 44 01 48 01 4b 01                             A.D.H.K.

00000274 <menuTcb>:
     274:	95 02 b3 08 09 02 05 00                             ........

0000027c <__init>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf e5       	ldi	r28, 0x5F	; 95
     282:	d8 e0       	ldi	r29, 0x08	; 8
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61

00000288 <__do_copy_data>:
     288:	10 e0       	ldi	r17, 0x00	; 0
     28a:	a0 e6       	ldi	r26, 0x60	; 96
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	e6 e4       	ldi	r30, 0x46	; 70
     290:	f6 e1       	ldi	r31, 0x16	; 22
     292:	02 c0       	rjmp	.+4      	; 0x298 <.do_copy_data_start>

00000294 <.do_copy_data_loop>:
     294:	05 90       	lpm	r0, Z+
     296:	0d 92       	st	X+, r0

00000298 <.do_copy_data_start>:
     298:	a4 3c       	cpi	r26, 0xC4	; 196
     29a:	b1 07       	cpc	r27, r17
     29c:	d9 f7       	brne	.-10     	; 0x294 <.do_copy_data_loop>

0000029e <__do_clear_bss>:
     29e:	12 e0       	ldi	r17, 0x02	; 2
     2a0:	a4 ec       	ldi	r26, 0xC4	; 196
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <.do_clear_bss_start>

000002a6 <.do_clear_bss_loop>:
     2a6:	1d 92       	st	X+, r1

000002a8 <.do_clear_bss_start>:
     2a8:	a6 3a       	cpi	r26, 0xA6	; 166
     2aa:	b1 07       	cpc	r27, r17
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <.do_clear_bss_loop>
     2ae:	0c 94 63 01 	jmp	0x2c6 <main>

000002b2 <__bad_interrupt>:
     2b2:	0c 94 00 00 	jmp	0x0 <__heap_end>

000002b6 <__vector_11>:


AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Save interrupted context, switch stacks
     2b6:	0e 94 f2 08 	call	0x11e4 <IntProlog>
    TCNT0 = TCNT0_INIT;			// Reload the timer counter
     2ba:	86 ee       	ldi	r24, 0xE6	; 230
     2bc:	82 bf       	out	0x32, r24	; 50
    AvrXTimerHandler();         // Process Timer queue
     2be:	0e 94 8c 0a 	call	0x1518 <AvrXTimerHandler>
    Epilog();                   // Restore context of next running task
     2c2:	0e 94 3e 09 	call	0x127c <Epilog>

000002c6 <main>:
};

int main(void)
{
     2c6:	cf e5       	ldi	r28, 0x5F	; 95
     2c8:	d8 e0       	ldi	r29, 0x08	; 8
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 77 09 	call	0x12ee <AvrXSetKernelStack>

    MCUCR = 1<<SE;      	// Enable "sleep" mode (low power when idle)
     2d6:	80 e8       	ldi	r24, 0x80	; 128
     2d8:	85 bf       	out	0x35, r24	; 53
    TCNT0 = TCNT0_INIT;		// Load overflow counter of timer0
     2da:	86 ee       	ldi	r24, 0xE6	; 230
     2dc:	82 bf       	out	0x32, r24	; 50
    TCCR0 = TMC8_CK256;		// Set Timer0 to CPUCLK/256
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	83 bf       	out	0x33, r24	; 51
    TIMSK = 1<<TOIE0;		// Enable interrupt flag
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	89 bf       	out	0x39, r24	; 57

//	PORTD = 0xff;
    //InitSerialIO(UBRR_INIT);    // Initialize USART baud rate generator
	dispInit(); // Display initialisierung
     2e6:	0e 94 84 07 	call	0xf08 <dispInit>
	//xlap_init();
	PORTA = 0xff; // Tastenport
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0x00;
     2ee:	1a ba       	out	0x1a, r1	; 26
	
	//AvrXRunTask(TCB(laptask));
	//AvrXRunTask(TCB(keys));
	AvrXRunTask(TCB(menu));
     2f0:	84 e7       	ldi	r24, 0x74	; 116
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	0e 94 83 09 	call	0x1306 <AvrXRunTask>

    /* Needed for EEPROM access in monitor */
	AvrXSetSemaphore(&EEPromMutex);
     2f8:	84 ea       	ldi	r24, 0xA4	; 164
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	0e 94 f5 09 	call	0x13ea <AvrXSetSemaphore>
	

    Epilog();                   // Switch from AvrX Stack to first task
     300:	0e 94 3e 09 	call	0x127c <Epilog>
    while(1);
     304:	ff cf       	rjmp	.-2      	; 0x304 <main+0x3e>

00000306 <mcp_status>:
unsigned char mcp_status();

unsigned char mcp_status(){
	unsigned char d;
	spi_set_ss();
     306:	c2 98       	cbi	0x18, 2	; 24
	spi_data(READ_STATUS);
     308:	80 ea       	ldi	r24, 0xA0	; 160
     30a:	0e 94 3b 03 	call	0x676 <spi_data>
	d = spi_data(0);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     314:	c2 9a       	sbi	0x18, 2	; 24
	return d;
}
     316:	99 27       	eor	r25, r25
     318:	08 95       	ret

0000031a <mcp_bitmod>:

void mcp_bitmod(unsigned char reg, unsigned char mask, unsigned char val){
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	18 2f       	mov	r17, r24
     322:	06 2f       	mov	r16, r22
     324:	f4 2e       	mov	r15, r20
	spi_set_ss();
     326:	c2 98       	cbi	0x18, 2	; 24
	spi_data(BIT_MODIFY);
     328:	85 e0       	ldi	r24, 0x05	; 5
     32a:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(reg);
     32e:	81 2f       	mov	r24, r17
     330:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(mask);
     334:	80 2f       	mov	r24, r16
     336:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(val);
     33a:	8f 2d       	mov	r24, r15
     33c:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     340:	c2 9a       	sbi	0x18, 2	; 24
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	ff 90       	pop	r15
     348:	08 95       	ret

0000034a <message_load>:
}

//load a message to mcp2515 and start transmission
void message_load(can_message_t * tx_msg){
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
	unsigned char x;
	
	spi_set_ss();
     352:	c2 98       	cbi	0x18, 2	; 24
	spi_data(WRITE);
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(TXB0SIDH);
     35a:	81 e3       	ldi	r24, 0x31	; 49
     35c:	0e 94 3b 03 	call	0x676 <spi_data>

	spi_data( ((unsigned char)(tx_msg->port_src << 2)) | (tx_msg->port_dst >> 4 ) );
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	99 0f       	add	r25, r25
     364:	99 0f       	add	r25, r25
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	82 95       	swap	r24
     36a:	8f 70       	andi	r24, 0x0F	; 15
     36c:	89 2b       	or	r24, r25
     36e:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data( (unsigned char)((tx_msg->port_dst & 0x0C) << 3) | (1<<EXIDE) | (tx_msg->port_dst & 0x03) );
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	89 2f       	mov	r24, r25
     376:	8c 70       	andi	r24, 0x0C	; 12
     378:	88 0f       	add	r24, r24
     37a:	88 0f       	add	r24, r24
     37c:	88 0f       	add	r24, r24
     37e:	93 70       	andi	r25, 0x03	; 3
     380:	89 2b       	or	r24, r25
     382:	88 60       	ori	r24, 0x08	; 8
     384:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(tx_msg->addr_src);
     388:	88 81       	ld	r24, Y
     38a:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(tx_msg->addr_dst);
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(tx_msg->dlc);
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	0e 94 3b 03 	call	0x676 <spi_data>
	for(x=0;x<tx_msg->dlc;x++){
     39a:	10 e0       	ldi	r17, 0x00	; 0
     39c:	8c 81       	ldd	r24, Y+4	; 0x04
     39e:	18 17       	cp	r17, r24
     3a0:	40 f4       	brcc	.+16     	; 0x3b2 <message_load+0x68>
		spi_data(tx_msg->data[x]);
     3a2:	fe 01       	movw	r30, r28
     3a4:	e1 0f       	add	r30, r17
     3a6:	f1 1d       	adc	r31, r1
     3a8:	85 81       	ldd	r24, Z+5	; 0x05
     3aa:	0e 94 3b 03 	call	0x676 <spi_data>
     3ae:	1f 5f       	subi	r17, 0xFF	; 255
     3b0:	f5 cf       	rjmp	.-22     	; 0x39c <message_load+0x52>
	}
	spi_clear_ss();
     3b2:	c2 9a       	sbi	0x18, 2	; 24
	spi_set_ss();
     3b4:	c2 98       	cbi	0x18, 2	; 24
	spi_data(WRITE);
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(TXB0CTRL);
     3bc:	80 e3       	ldi	r24, 0x30	; 48
     3be:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data( (1<<TXREQ) );
     3c2:	88 e0       	ldi	r24, 0x08	; 8
     3c4:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     3c8:	c2 9a       	sbi	0x18, 2	; 24
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	08 95       	ret

000003d2 <message_fetch>:
}

//get a message from mcp2515 and disable RX interrupt Condition
void message_fetch(){
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
	unsigned char tmp1, tmp2, tmp3;
	unsigned char x;

	spi_set_ss();
     3d8:	c2 98       	cbi	0x18, 2	; 24
	spi_data(READ);
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(RXB0SIDH);
     3e0:	81 e6       	ldi	r24, 0x61	; 97
     3e2:	0e 94 3b 03 	call	0x676 <spi_data>
	tmp1 = spi_data(0);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 3b 03 	call	0x676 <spi_data>
     3ec:	18 2f       	mov	r17, r24
	rx_msg.port_src = tmp1 >> 2;
     3ee:	86 95       	lsr	r24
     3f0:	86 95       	lsr	r24
     3f2:	80 93 4f 01 	sts	0x014F, r24
	tmp2 = spi_data(0);
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 3b 03 	call	0x676 <spi_data>
     3fc:	98 2f       	mov	r25, r24
	tmp3 = (unsigned char)((unsigned char)(tmp2 >> 3) & 0x0C);
     3fe:	86 95       	lsr	r24
     400:	86 95       	lsr	r24
     402:	86 95       	lsr	r24
     404:	8c 70       	andi	r24, 0x0C	; 12
	rx_msg.port_dst = ((unsigned char)(tmp1 <<4 ) & 0x30) | tmp3 | (unsigned char)(tmp2 & 0x03);
     406:	12 95       	swap	r17
     408:	10 7f       	andi	r17, 0xF0	; 240
     40a:	10 73       	andi	r17, 0x30	; 48
     40c:	18 2b       	or	r17, r24
     40e:	93 70       	andi	r25, 0x03	; 3
     410:	19 2b       	or	r17, r25
     412:	10 93 50 01 	sts	0x0150, r17
	rx_msg.addr_src = spi_data(0);
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 3b 03 	call	0x676 <spi_data>
     41c:	80 93 4d 01 	sts	0x014D, r24
	rx_msg.addr_dst = spi_data(0);
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 3b 03 	call	0x676 <spi_data>
     426:	80 93 4e 01 	sts	0x014E, r24
	rx_msg.dlc = spi_data(0) & 0x0F;	
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 3b 03 	call	0x676 <spi_data>
     430:	8f 70       	andi	r24, 0x0F	; 15
     432:	80 93 51 01 	sts	0x0151, r24
	for(x=0;x<rx_msg.dlc;x++){
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	c8 17       	cp	r28, r24
     43a:	68 f4       	brcc	.+26     	; 0x456 <message_fetch+0x84>
		rx_msg.data[x] = spi_data(0);
     43c:	0c 2f       	mov	r16, r28
     43e:	11 27       	eor	r17, r17
     440:	03 5b       	subi	r16, 0xB3	; 179
     442:	1e 4f       	sbci	r17, 0xFE	; 254
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0e 94 3b 03 	call	0x676 <spi_data>
     44a:	f8 01       	movw	r30, r16
     44c:	85 83       	std	Z+5, r24	; 0x05
     44e:	cf 5f       	subi	r28, 0xFF	; 255
     450:	80 91 51 01 	lds	r24, 0x0151
     454:	f1 cf       	rjmp	.-30     	; 0x438 <message_fetch+0x66>
	}
	spi_clear_ss();
     456:	c2 9a       	sbi	0x18, 2	; 24
	
	mcp_bitmod(CANINTF, (1<<RX0IF), 0x00);
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	8c e2       	ldi	r24, 0x2C	; 44
     45e:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	08 95       	ret

0000046a <__vector_1>:
}


// *********************** Interrupt handler  **********************************
AVRX_SIGINT(SIG_INTERRUPT0)
{
	IntProlog();             // Switch to kernel stack/context
     46a:	0e 94 f2 08 	call	0x11e4 <IntProlog>
	GICR &= ~(1<<INT0);
     46e:	8b b7       	in	r24, 0x3b	; 59
     470:	8f 7b       	andi	r24, 0xBF	; 191
     472:	8b bf       	out	0x3b, r24	; 59
	EndCritical();
     474:	78 94       	sei
	unsigned char status = mcp_status();
     476:	0e 94 83 01 	call	0x306 <mcp_status>

	if ( status & 0x01 ) {	// Message in RX0
     47a:	99 27       	eor	r25, r25
     47c:	80 ff       	sbrs	r24, 0
     47e:	08 c0       	rjmp	.+16     	; 0x490 <__vector_1+0x26>
		mcp_bitmod(CANINTE, (1<<RX0IE), 0x00); //disable interrupt
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	8b e2       	ldi	r24, 0x2B	; 43
     486:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
		AvrXIntSetSemaphore(&rx_mutex);
     48a:	86 ec       	ldi	r24, 0xC6	; 198
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	27 c0       	rjmp	.+78     	; 0x4de <__vector_1+0x74>
	} else if ( status & 0x08 ) {	// TX0 empty
     490:	83 ff       	sbrs	r24, 3
     492:	27 c0       	rjmp	.+78     	; 0x4e2 <__vector_1+0x78>
		if (tx_fifo.in == tx_fifo.out)	// tx_fifo is Empty
     494:	80 91 c8 00 	lds	r24, 0x00C8
     498:	90 91 c9 00 	lds	r25, 0x00C9
     49c:	89 17       	cp	r24, r25
     49e:	31 f4       	brne	.+12     	; 0x4ac <__vector_1+0x42>
		{
			mcp_bitmod(CANINTE, (1<<TX0IE), 0x00); //disable interrupt
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	64 e0       	ldi	r22, 0x04	; 4
     4a4:	8b e2       	ldi	r24, 0x2B	; 43
     4a6:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
     4aa:	1b c0       	rjmp	.+54     	; 0x4e2 <__vector_1+0x78>
		}
		else
		{
			//Pull can message from fifo and transmit it
			message_load (&tx_fifo.buf[tx_fifo.out]);
     4ac:	8d e0       	ldi	r24, 0x0D	; 13
     4ae:	98 9f       	mul	r25, r24
     4b0:	c0 01       	movw	r24, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	85 53       	subi	r24, 0x35	; 53
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	0e 94 a5 01 	call	0x34a <message_load>
			uint8_t t = tx_fifo.out+1;
     4bc:	90 91 c9 00 	lds	r25, 0x00C9
     4c0:	9f 5f       	subi	r25, 0xFF	; 255
			if (t >= tx_fifo.size)
     4c2:	80 91 ca 00 	lds	r24, 0x00CA
     4c6:	98 17       	cp	r25, r24
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <__vector_1+0x62>
				t = 0;
     4ca:	90 e0       	ldi	r25, 0x00	; 0
			tx_fifo.out = t;
     4cc:	90 93 c9 00 	sts	0x00C9, r25
			mcp_bitmod(CANINTF, (1<<TX0IF), 0x00); //clear interrupt condition
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	64 e0       	ldi	r22, 0x04	; 4
     4d4:	8c e2       	ldi	r24, 0x2C	; 44
     4d6:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
			AvrXIntSetSemaphore(&tx_mutex); //Signal were ready for new messages
     4da:	84 ec       	ldi	r24, 0xC4	; 196
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 02 0a 	call	0x1404 <AvrXIntSetSemaphore>
		}
	}
	GICR |= (1<<INT0);
     4e2:	8b b7       	in	r24, 0x3b	; 59
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	8b bf       	out	0x3b, r24	; 59
	Epilog();                // Return to tasks
     4e8:	0e 94 3e 09 	call	0x127c <Epilog>

000004ec <mcp_reset>:
}

void mcp_reset(){
	spi_set_ss();
     4ec:	c2 98       	cbi	0x18, 2	; 24
	spi_data(RESET);
     4ee:	80 ec       	ldi	r24, 0xC0	; 192
     4f0:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     4f4:	c2 9a       	sbi	0x18, 2	; 24
     4f6:	08 95       	ret

000004f8 <mcp_write>:
}

void mcp_write(unsigned char reg, unsigned char data){
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	18 2f       	mov	r17, r24
     4fe:	06 2f       	mov	r16, r22
	spi_set_ss();
     500:	c2 98       	cbi	0x18, 2	; 24
	spi_data(WRITE);
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(reg);
     508:	81 2f       	mov	r24, r17
     50a:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(data);
     50e:	80 2f       	mov	r24, r16
     510:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     514:	c2 9a       	sbi	0x18, 2	; 24
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <mcp_read>:
}

unsigned char mcp_read(unsigned char reg){
     51c:	1f 93       	push	r17
     51e:	18 2f       	mov	r17, r24
	unsigned char d;
	spi_set_ss();
     520:	c2 98       	cbi	0x18, 2	; 24
	spi_data(READ);
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_data(reg);
     528:	81 2f       	mov	r24, r17
     52a:	0e 94 3b 03 	call	0x676 <spi_data>
	d = spi_data(0);
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 3b 03 	call	0x676 <spi_data>
	spi_clear_ss();
     534:	c2 9a       	sbi	0x18, 2	; 24
	return d;
}
     536:	99 27       	eor	r25, r25
     538:	1f 91       	pop	r17
     53a:	08 95       	ret

0000053c <can_setmode>:

/* Management */
void can_setmode( can_mode_t mode ) {
	unsigned char val = mode << 5;  
     53c:	82 95       	swap	r24
     53e:	88 0f       	add	r24, r24
     540:	80 7e       	andi	r24, 0xE0	; 224
	val |= 0x04;  // CLKEN
     542:	84 60       	ori	r24, 0x04	; 4

	mcp_write( CANCTRL, val );
     544:	68 2f       	mov	r22, r24
     546:	8f e0       	ldi	r24, 0x0F	; 15
     548:	0e 94 7c 02 	call	0x4f8 <mcp_write>
     54c:	08 95       	ret

0000054e <can_setfilter>:
}

void can_setfilter() {
	//RXM1   RXM0
	//  0      0     receive matching filter
	//  0      1     " only 11bit Identifier
	//  1      0     " only 29bit Identifier
	//  1      1     any
	mcp_write(RXB0CTRL, (1<<RXM1) | (1<<RXM0));
     54e:	60 e6       	ldi	r22, 0x60	; 96
     550:	86 2f       	mov	r24, r22
     552:	0e 94 7c 02 	call	0x4f8 <mcp_write>
     556:	08 95       	ret

00000558 <can_setled>:
}

void can_setled(unsigned char led, unsigned char state){
     558:	28 2f       	mov	r18, r24
     55a:	46 2f       	mov	r20, r22
	mcp_bitmod(BFPCTRL, 0x10<<led, state?0xff:0);
     55c:	61 11       	cpse	r22, r1
     55e:	4f ef       	ldi	r20, 0xFF	; 255
     560:	80 e1       	ldi	r24, 0x10	; 16
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <can_setled+0x12>
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	2a 95       	dec	r18
     56c:	e2 f7       	brpl	.-8      	; 0x566 <can_setled+0xe>
     56e:	68 2f       	mov	r22, r24
     570:	8c e0       	ldi	r24, 0x0C	; 12
     572:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
     576:	08 95       	ret

00000578 <delayloop>:
}

/*******************************************************************/
void delayloop(){
	unsigned char x;
	for(x=0;x<255;x++){		
     578:	80 e0       	ldi	r24, 0x00	; 0
		asm ("nop");
     57a:	00 00       	nop
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	8f 3f       	cpi	r24, 0xFF	; 255
     580:	e1 f7       	brne	.-8      	; 0x57a <delayloop+0x2>
     582:	08 95       	ret

00000584 <can_init>:
	}

}

void can_init(){
	//set Slave select high
	SPI_PORT |= (1<<SPI_PIN_SS);
     584:	c2 9a       	sbi	0x18, 2	; 24
	
	mcp_reset();
     586:	0e 94 76 02 	call	0x4ec <mcp_reset>
	
	tx_fifo.size = TX_SIZE;
     58a:	8a e0       	ldi	r24, 0x0A	; 10
     58c:	80 93 ca 00 	sts	0x00CA, r24
	tx_fifo.in = 0;
     590:	10 92 c8 00 	sts	0x00C8, r1
	tx_fifo.out = 0;
     594:	10 92 c9 00 	sts	0x00C9, r1
	
	AvrXResetSemaphore(&rx_mutex);
     598:	86 ec       	ldi	r24, 0xC6	; 198
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 51 0a 	call	0x14a2 <AvrXIntResetSemaphore>
	
	delayloop();
     5a0:	0e 94 bc 02 	call	0x578 <delayloop>
	
	mcp_write(BFPCTRL,0x0C);//RXBF Pins to Output
     5a4:	6c e0       	ldi	r22, 0x0C	; 12
     5a6:	86 2f       	mov	r24, r22
     5a8:	0e 94 7c 02 	call	0x4f8 <mcp_write>
	
	// 0x01 : 125kbit/8MHz
	// 0x03 : 125kbit/16MHz
	// 0x04 : 125kbit/20MHz
	
#	if F_MCP == 16000000L
#	define CNF1_T 0x03
#	elif F_MCP == 8000000L
#	define CNF1_T 0x01
#	elif F_MCP == 20000000L
#	define CNF1_T 0x04
#	else
#	error Can Baudrate is only defined for F_MCP 8, 16 and 20 MHz
#	endif

	mcp_write( CNF1, 0x40 | CNF1_T );
     5ac:	63 e4       	ldi	r22, 0x43	; 67
     5ae:	8a e2       	ldi	r24, 0x2A	; 42
     5b0:	0e 94 7c 02 	call	0x4f8 <mcp_write>
	mcp_write( CNF2, 0xf1 );
     5b4:	61 ef       	ldi	r22, 0xF1	; 241
     5b6:	89 e2       	ldi	r24, 0x29	; 41
     5b8:	0e 94 7c 02 	call	0x4f8 <mcp_write>
	mcp_write( CNF3, 0x05 );
     5bc:	65 e0       	ldi	r22, 0x05	; 5
     5be:	88 e2       	ldi	r24, 0x28	; 40
     5c0:	0e 94 7c 02 	call	0x4f8 <mcp_write>

	// configure IRQ
	// this only configures the INT Output of the mcp2515, not the int on the Atmel
	mcp_write( CANINTE, (1<<RX0IE) );
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	8b e2       	ldi	r24, 0x2B	; 43
     5c8:	0e 94 7c 02 	call	0x4f8 <mcp_write>

	//the TX Interrupt is enabled when needed, so set flag that buffer is empty
	mcp_bitmod( CANINTF, (1<<TX0IF), 0xff );
     5cc:	4f ef       	ldi	r20, 0xFF	; 255
     5ce:	64 e0       	ldi	r22, 0x04	; 4
     5d0:	8c e2       	ldi	r24, 0x2C	; 44
     5d2:	0e 94 8d 01 	call	0x31a <mcp_bitmod>

	can_setfilter();
     5d6:	0e 94 a7 02 	call	0x54e <can_setfilter>
	can_setmode(normal);
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 9e 02 	call	0x53c <can_setmode>

#ifdef CLASSIC_ATMEL
	//this turns on INT0 on the Atmel
	MCUCR |=  (1<<ISC01);
	GIMSK |= (1<<INT0);
#else
	//this turns on INT0 on the Atmega
	//MCUCR |=  (1<<ISC01);
	GICR |= (1<<INT0);
     5e0:	8b b7       	in	r24, 0x3b	; 59
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	8b bf       	out	0x3b, r24	; 59
     5e6:	08 95       	ret

000005e8 <can_get>:
#endif

}

void can_get(){
	AvrXWaitSemaphore(&rx_mutex);
     5e8:	86 ec       	ldi	r24, 0xC6	; 198
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 de 09 	call	0x13bc <AvrXWaitSemaphore>
	message_fetch();
     5f0:	0e 94 e9 01 	call	0x3d2 <message_fetch>
	mcp_bitmod( CANINTE, (1<<RX0IE), 0xff); //interrupt back on
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	8b e2       	ldi	r24, 0x2B	; 43
     5fa:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
     5fe:	08 95       	ret

00000600 <can_put>:
}

uint16_t can_put(can_message_t * msg){
     600:	bc 01       	movw	r22, r24
	uint8_t t = tx_fifo.in+1;
     602:	20 91 c8 00 	lds	r18, 0x00C8
     606:	42 2f       	mov	r20, r18
     608:	4f 5f       	subi	r20, 0xFF	; 255
	if (t >= tx_fifo.size)
     60a:	80 91 ca 00 	lds	r24, 0x00CA
     60e:	48 17       	cp	r20, r24
     610:	08 f0       	brcs	.+2      	; 0x614 <can_put+0x14>
		t = 0;
     612:	40 e0       	ldi	r20, 0x00	; 0
	if (t == tx_fifo.out)	// isFull()
     614:	80 91 c9 00 	lds	r24, 0x00C9
     618:	48 17       	cp	r20, r24
     61a:	19 f4       	brne	.+6      	; 0x622 <can_put+0x22>
		return FIFO_ERR;
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	9f ef       	ldi	r25, 0xFF	; 255
     620:	08 95       	ret
	memcpy (&tx_fifo.buf[tx_fifo.in], msg, sizeof(can_message_t));
     622:	33 27       	eor	r19, r19
     624:	8d e0       	ldi	r24, 0x0D	; 13
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e5 53       	subi	r30, 0x35	; 53
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	db 01       	movw	r26, r22
     63c:	8d e0       	ldi	r24, 0x0D	; 13
     63e:	0d 90       	ld	r0, X+
     640:	01 92       	st	Z+, r0
     642:	81 50       	subi	r24, 0x01	; 1
     644:	e1 f7       	brne	.-8      	; 0x63e <can_put+0x3e>
	tx_fifo.in = t;
     646:	40 93 c8 00 	sts	0x00C8, r20
	//AvrXSetSemaphore(&p->Producer);
	GICR &= ~(1<<INT0);
     64a:	8b b7       	in	r24, 0x3b	; 59
     64c:	8f 7b       	andi	r24, 0xBF	; 191
     64e:	8b bf       	out	0x3b, r24	; 59
	mcp_bitmod(CANINTE, (1<<TX0IE), 0xff); //enable interrupt
     650:	4f ef       	ldi	r20, 0xFF	; 255
     652:	64 e0       	ldi	r22, 0x04	; 4
     654:	8b e2       	ldi	r24, 0x2B	; 43
     656:	0e 94 8d 01 	call	0x31a <mcp_bitmod>
	GICR |= (1<<INT0);
     65a:	8b b7       	in	r24, 0x3b	; 59
     65c:	80 64       	ori	r24, 0x40	; 64
     65e:	8b bf       	out	0x3b, r24	; 59
	return FIFO_OK;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
}
     664:	08 95       	ret

00000666 <spi_init>:
#include "spi.h"

void spi_init(){
	//set output SPI pins to output
	SPI_DDR |= (1<<SPI_PIN_MOSI) | (1<<SPI_PIN_SCK) | (1<<SPI_PIN_SS);
     666:	87 b3       	in	r24, 0x17	; 23
     668:	8c 62       	ori	r24, 0x2C	; 44
     66a:	87 bb       	out	0x17, r24	; 23

#ifdef SPI_HARDWARE
	//          0             1
	//DORD   msb first     lsb first
	//CPOL   low idle      high idle
	//CPHA   rising edge  fallling edge
	
	//SPR0    SPR1
	// 0        0       ck/4
	// 0        1       ck/16
	// 1        0       ck/64
	// 1        1       ck/128
	
	//Interrupt disable, SPI enable, MSB first, master, clk low idle, data valid on rising edge, ck/4
	SPCR = (0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	8d b9       	out	0x0d, r24	; 13

	//Double speed on
	SPSR = (1<<SPI2X);
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	8e b9       	out	0x0e, r24	; 14
     674:	08 95       	ret

00000676 <spi_data>:
#endif
}

#ifndef SPI_HARDWARE
unsigned char spi_data(unsigned char c){
	unsigned char x, d=d;
	for(x=0;x<8;x++){
		if(c & 0x80){
			SPI_PORT |= (1<<SPI_PIN_MOSI);
		}else{
			SPI_PORT &= ~(1<<SPI_PIN_MOSI);	
		}
		SPI_PORT |= (1<<SPI_PIN_SCK);
		d<<=1;
		if(SPI_PIN & (1<<SPI_PIN_MISO)){
			d|=1;
		}
		SPI_PORT &= ~(1<<SPI_PIN_SCK);
		c<<=1;
	}
	return d;
}
#else
unsigned char spi_data(unsigned char c) {
	SPDR = c;
     676:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     678:	77 9b       	sbis	0x0e, 7	; 14
     67a:	fe cf       	rjmp	.-4      	; 0x678 <spi_data+0x2>
	c = SPDR;
     67c:	8f b1       	in	r24, 0x0f	; 15
	return (c);
}
     67e:	99 27       	eor	r25, r25
     680:	08 95       	ret

00000682 <keys>:
AVRX_GCC_TASKDEF(keys, 20, 4) {

	while(1) {

		AvrXDelay(&switchtimer, 20);
     682:	64 e1       	ldi	r22, 0x14	; 20
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e6       	ldi	r24, 0x60	; 96
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 5e 0a 	call	0x14bc <AvrXDelay>
     68e:	f9 cf       	rjmp	.-14     	; 0x682 <keys>

00000690 <process_mgt_msg>:


void process_mgt_msg() {
	static can_message_t msg = {0, 0, PORT_MGT, PORT_MGT, 1, {FKT_MGT_PONG}};
	switch(rx_msg.data[0]) {
     690:	80 91 52 01 	lds	r24, 0x0152
     694:	99 27       	eor	r25, r25
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	91 05       	cpc	r25, r1
     69a:	49 f0       	breq	.+18     	; 0x6ae <process_mgt_msg+0x1e>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	91 05       	cpc	r25, r1
     6a0:	1c f4       	brge	.+6      	; 0x6a8 <process_mgt_msg+0x18>
     6a2:	89 2b       	or	r24, r25
     6a4:	71 f0       	breq	.+28     	; 0x6c2 <process_mgt_msg+0x32>
     6a6:	08 95       	ret
     6a8:	04 97       	sbiw	r24, 0x04	; 4
     6aa:	a1 f0       	breq	.+40     	; 0x6d4 <process_mgt_msg+0x44>
     6ac:	08 95       	ret
		case FKT_MGT_RESET:
			wdt_enable(0);
     6ae:	88 e1       	ldi	r24, 0x18	; 24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	28 e0       	ldi	r18, 0x08	; 8
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	a8 95       	wdr
     6ba:	81 bd       	out	0x21, r24	; 33
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	21 bd       	out	0x21, r18	; 33
			while(1);
     6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <process_mgt_msg+0x30>
		case FKT_MGT_PING:
			msg.addr_src = myaddr;
     6c2:	80 91 f7 01 	lds	r24, 0x01F7
     6c6:	80 93 61 00 	sts	0x0061, r24
			msg.addr_dst = rx_msg.addr_src;
     6ca:	80 91 4d 01 	lds	r24, 0x014D
     6ce:	80 93 62 00 	sts	0x0062, r24
     6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <process_mgt_msg+0x66>
			can_put(&msg);
			break;
		case FKT_MGT_DESC:
			msg.addr_src = myaddr;
     6d4:	80 91 f7 01 	lds	r24, 0x01F7
     6d8:	80 93 61 00 	sts	0x0061, r24
			msg.addr_dst = rx_msg.addr_src;
     6dc:	80 91 4d 01 	lds	r24, 0x014D
     6e0:	80 93 62 00 	sts	0x0062, r24
			msg.dlc = 2;
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	80 93 65 00 	sts	0x0065, r24
			msg.data[2] = PORT_MOOD;
     6ea:	87 e1       	ldi	r24, 0x17	; 23
     6ec:	80 93 68 00 	sts	0x0068, r24
			msg.data[1] = PORT_TEMP;
     6f0:	83 e2       	ldi	r24, 0x23	; 35
     6f2:	80 93 67 00 	sts	0x0067, r24
			can_put(&msg);
     6f6:	81 e6       	ldi	r24, 0x61	; 97
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 00 03 	call	0x600 <can_put>
     6fe:	08 95       	ret

00000700 <laptask>:
			break;
	}	
}


AVRX_GCC_TASKDEF(laptask, 55, 3) {
	while (1) {
		can_get();			//get next canmessage in rx_msg
     700:	0e 94 f4 02 	call	0x5e8 <can_get>
		if(rx_msg.addr_dst == myaddr) {
     704:	90 91 4e 01 	lds	r25, 0x014E
     708:	80 91 f7 01 	lds	r24, 0x01F7
     70c:	98 17       	cp	r25, r24
     70e:	c1 f7       	brne	.-16     	; 0x700 <laptask>
			if(rx_msg.port_dst == PORT_MGT) {
     710:	80 91 50 01 	lds	r24, 0x0150
     714:	80 33       	cpi	r24, 0x30	; 48
     716:	a1 f7       	brne	.-24     	; 0x700 <laptask>
				process_mgt_msg();	
     718:	0e 94 48 03 	call	0x690 <process_mgt_msg>
     71c:	f1 cf       	rjmp	.-30     	; 0x700 <laptask>

0000071e <xlap_init>:
    Read one byte from EEPROM address \c addr. */

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
  uint8_t result;
  asm volatile
     722:	0e 94 1b 0b 	call	0x1636 <__eeprom_read_byte_1C1D1E>
     726:	80 2d       	mov	r24, r0
     728:	80 93 f7 01 	sts	0x01F7, r24
			}
		}
	}
};

void xlap_init() {
	myaddr = eeprom_read_byte(0x00);
	spi_init();
     72c:	0e 94 33 03 	call	0x666 <spi_init>
	can_init();
     730:	0e 94 c2 02 	call	0x584 <can_init>
     734:	08 95       	ret

00000736 <draw_Text>:
font fonts[MAX_FONTS];


void draw_Text(char *str, unsigned int posx, char posy, unsigned char fontNr, 
               unsigned char space, unsigned char color) {
     736:	2f 92       	push	r2
     738:	3f 92       	push	r3
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	4c 01       	movw	r8, r24
     75c:	24 2e       	mov	r2, r20
     75e:	52 2e       	mov	r5, r18
     760:	30 2e       	mov	r3, r16
     762:	4e 2c       	mov	r4, r14
	unsigned char byte, align;
    char x, y, glyph = *str;
     764:	fc 01       	movw	r30, r24
     766:	40 81       	ld	r20, Z
	unsigned int charC, charEnd;
	
	fonts[0] = font_small6;
     768:	ae ef       	ldi	r26, 0xFE	; 254
     76a:	b1 e0       	ldi	r27, 0x01	; 1
     76c:	ee e6       	ldi	r30, 0x6E	; 110
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	29 e0       	ldi	r18, 0x09	; 9
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	21 50       	subi	r18, 0x01	; 1
     778:	e1 f7       	brne	.-8      	; 0x772 <draw_Text+0x3c>

	align = fonts[fontNr].storebytes - 1;
     77a:	85 2d       	mov	r24, r5
     77c:	99 27       	eor	r25, r25
     77e:	fc 01       	movw	r30, r24
     780:	13 e0       	ldi	r17, 0x03	; 3
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	1a 95       	dec	r17
     788:	e1 f7       	brne	.-8      	; 0x782 <draw_Text+0x4c>
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	e2 50       	subi	r30, 0x02	; 2
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	00 85       	ldd	r16, Z+8	; 0x08
     794:	01 50       	subi	r16, 0x01	; 1

    if (fontNr >= MAX_FONTS) 
		fontNr = MAX_FONTS - 1;
     796:	52 2e       	mov	r5, r18
	if ((glyph < fonts[fontNr].glyph_beg) || (glyph > fonts[fontNr].glyph_end)) {
     798:	24 2f       	mov	r18, r20
     79a:	33 27       	eor	r19, r19
     79c:	27 fd       	sbrc	r18, 7
     79e:	30 95       	com	r19
     7a0:	80 91 03 02 	lds	r24, 0x0203
     7a4:	99 27       	eor	r25, r25
     7a6:	28 17       	cp	r18, r24
     7a8:	39 07       	cpc	r19, r25
     7aa:	34 f0       	brlt	.+12     	; 0x7b8 <draw_Text+0x82>
     7ac:	80 91 04 02 	lds	r24, 0x0204
     7b0:	99 27       	eor	r25, r25
     7b2:	82 17       	cp	r24, r18
     7b4:	93 07       	cpc	r25, r19
     7b6:	14 f4       	brge	.+4      	; 0x7bc <draw_Text+0x86>
       glyph = fonts[fontNr].glyph_def;
     7b8:	40 91 05 02 	lds	r20, 0x0205
    } 
	glyph -= fonts[fontNr].glyph_beg;
     7bc:	ee ef       	ldi	r30, 0xFE	; 254
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	85 81       	ldd	r24, Z+5	; 0x05
     7c2:	48 1b       	sub	r20, r24
	charC = pgm_read_word(fonts[fontNr].fontIndex+glyph);
     7c4:	84 2f       	mov	r24, r20
     7c6:	99 27       	eor	r25, r25
     7c8:	87 fd       	sbrc	r24, 7
     7ca:	90 95       	com	r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	21 81       	ldd	r18, Z+1	; 0x01
     7d2:	32 81       	ldd	r19, Z+2	; 0x02
     7d4:	f9 01       	movw	r30, r18
     7d6:	e8 0f       	add	r30, r24
     7d8:	f9 1f       	adc	r31, r25
     7da:	c5 91       	lpm	r28, Z+
     7dc:	d4 91       	lpm	r29, Z
	charEnd = pgm_read_word(fonts[fontNr].fontIndex+glyph+1);
     7de:	f9 01       	movw	r30, r18
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	32 96       	adiw	r30, 0x02	; 2
     7e6:	c5 90       	lpm	r12, Z+
     7e8:	d4 90       	lpm	r13, Z
	// skip part outside the display
	while (posx > NUM_COLS) { 
	    if (charC < charEnd) {                  
            charC++;
        } 
        if (charC >= charEnd) {
            x += space;
            if (!(glyph = *++str)) return;      
            if ((glyph < fonts[fontNr].glyph_beg) || (glyph > fonts[fontNr].glyph_end)) {      
               glyph = fonts[fontNr].glyph_def;
            } 
            glyph -= fonts[fontNr].glyph_beg;   
            charC = pgm_read_word(fonts[fontNr].fontIndex+glyph);
            charEnd = pgm_read_word(fonts[fontNr].fontIndex+glyph+1);
        }
        posx--;
     7ea:	61 38       	cpi	r22, 0x81	; 129
     7ec:	71 05       	cpc	r23, r1
     7ee:	08 f4       	brcc	.+2      	; 0x7f2 <draw_Text+0xbc>
     7f0:	4d c0       	rjmp	.+154    	; 0x88c <__stack+0x2d>
     7f2:	cc 15       	cp	r28, r12
     7f4:	dd 05       	cpc	r29, r13
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <draw_Text+0xc4>
     7f8:	21 96       	adiw	r28, 0x01	; 1
     7fa:	cc 15       	cp	r28, r12
     7fc:	dd 05       	cpc	r29, r13
     7fe:	08 f4       	brcc	.+2      	; 0x802 <draw_Text+0xcc>
     800:	42 c0       	rjmp	.+132    	; 0x886 <__stack+0x27>
     802:	08 94       	sec
     804:	81 1c       	adc	r8, r1
     806:	91 1c       	adc	r9, r1
     808:	f4 01       	movw	r30, r8
     80a:	40 81       	ld	r20, Z
     80c:	44 23       	and	r20, r20
     80e:	09 f4       	brne	.+2      	; 0x812 <draw_Text+0xdc>
     810:	d4 c0       	rjmp	.+424    	; 0x9ba <__stack+0x15b>
     812:	a4 2f       	mov	r26, r20
     814:	bb 27       	eor	r27, r27
     816:	a7 fd       	sbrc	r26, 7
     818:	b0 95       	com	r27
     81a:	25 2d       	mov	r18, r5
     81c:	33 27       	eor	r19, r19
     81e:	f9 01       	movw	r30, r18
     820:	c3 e0       	ldi	r28, 0x03	; 3
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	ca 95       	dec	r28
     828:	e1 f7       	brne	.-8      	; 0x822 <draw_Text+0xec>
     82a:	e2 0f       	add	r30, r18
     82c:	f3 1f       	adc	r31, r19
     82e:	e2 50       	subi	r30, 0x02	; 2
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	85 81       	ldd	r24, Z+5	; 0x05
     834:	99 27       	eor	r25, r25
     836:	a8 17       	cp	r26, r24
     838:	b9 07       	cpc	r27, r25
     83a:	2c f0       	brlt	.+10     	; 0x846 <draw_Text+0x110>
     83c:	86 81       	ldd	r24, Z+6	; 0x06
     83e:	99 27       	eor	r25, r25
     840:	8a 17       	cp	r24, r26
     842:	9b 07       	cpc	r25, r27
     844:	0c f4       	brge	.+2      	; 0x848 <draw_Text+0x112>
     846:	47 81       	ldd	r20, Z+7	; 0x07
     848:	f9 01       	movw	r30, r18
     84a:	a3 e0       	ldi	r26, 0x03	; 3
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	aa 95       	dec	r26
     852:	e1 f7       	brne	.-8      	; 0x84c <draw_Text+0x116>
     854:	e2 0f       	add	r30, r18
     856:	f3 1f       	adc	r31, r19
     858:	e2 50       	subi	r30, 0x02	; 2
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	85 81       	ldd	r24, Z+5	; 0x05
     85e:	48 1b       	sub	r20, r24
     860:	84 2f       	mov	r24, r20
     862:	99 27       	eor	r25, r25
     864:	87 fd       	sbrc	r24, 7
     866:	90 95       	com	r25
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	21 81       	ldd	r18, Z+1	; 0x01
     86e:	32 81       	ldd	r19, Z+2	; 0x02
     870:	f9 01       	movw	r30, r18
     872:	e8 0f       	add	r30, r24
     874:	f9 1f       	adc	r31, r25
     876:	c5 91       	lpm	r28, Z+
     878:	d4 91       	lpm	r29, Z
     87a:	f9 01       	movw	r30, r18
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	32 96       	adiw	r30, 0x02	; 2
     882:	c5 90       	lpm	r12, Z+
     884:	d4 90       	lpm	r13, Z
     886:	61 50       	subi	r22, 0x01	; 1
     888:	70 40       	sbci	r23, 0x00	; 0
     88a:	af cf       	rjmp	.-162    	; 0x7ea <draw_Text+0xb4>
    }
	for (x = posx; x >= 0; x++) {
     88c:	76 2e       	mov	r7, r22
     88e:	66 23       	and	r22, r22
     890:	0c f4       	brge	.+2      	; 0x894 <__stack+0x35>
     892:	93 c0       	rjmp	.+294    	; 0x9ba <__stack+0x15b>
        byte = pgm_read_byte(fonts[fontNr].fontData+charC);
     894:	e5 2c       	mov	r14, r5
     896:	ff 24       	eor	r15, r15
     898:	f7 01       	movw	r30, r14
     89a:	63 e0       	ldi	r22, 0x03	; 3
     89c:	ee 0f       	add	r30, r30
     89e:	ff 1f       	adc	r31, r31
     8a0:	6a 95       	dec	r22
     8a2:	e1 f7       	brne	.-8      	; 0x89c <__stack+0x3d>
     8a4:	ee 0d       	add	r30, r14
     8a6:	ff 1d       	adc	r31, r15
     8a8:	e2 50       	subi	r30, 0x02	; 2
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	03 80       	ldd	r0, Z+3	; 0x03
     8ae:	f4 81       	ldd	r31, Z+4	; 0x04
     8b0:	e0 2d       	mov	r30, r0
     8b2:	ec 0f       	add	r30, r28
     8b4:	fd 1f       	adc	r31, r29
     8b6:	64 90       	lpm	r6, Z

		for (y = posy; y < 8+posy; y++) {
     8b8:	12 2d       	mov	r17, r2
     8ba:	22 2d       	mov	r18, r2
     8bc:	33 27       	eor	r19, r19
     8be:	27 fd       	sbrc	r18, 7
     8c0:	30 95       	com	r19
     8c2:	59 01       	movw	r10, r18
			if (byte & (1 << (y-posy)) && y-posy >= 0 && y >= 0 
     8c4:	86 2d       	mov	r24, r6
     8c6:	99 27       	eor	r25, r25
     8c8:	2a 19       	sub	r18, r10
     8ca:	3b 09       	sbc	r19, r11
     8cc:	02 2e       	mov	r0, r18
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	95 95       	asr	r25
     8d2:	87 95       	ror	r24
     8d4:	0a 94       	dec	r0
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	80 ff       	sbrs	r24, 0
     8da:	09 c0       	rjmp	.+18     	; 0x8ee <__stack+0x8f>
     8dc:	37 fd       	sbrc	r19, 7
     8de:	07 c0       	rjmp	.+14     	; 0x8ee <__stack+0x8f>
     8e0:	17 fd       	sbrc	r17, 7
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <__stack+0x8f>
			    && x < NUM_COLS) {	
               dispSetPix(x, y, color);
     8e4:	44 2d       	mov	r20, r4
     8e6:	61 2f       	mov	r22, r17
     8e8:	87 2d       	mov	r24, r7
     8ea:	0e 94 f0 04 	call	0x9e0 <dispSetPix>
     8ee:	1f 5f       	subi	r17, 0xFF	; 255
     8f0:	21 2f       	mov	r18, r17
     8f2:	33 27       	eor	r19, r19
     8f4:	27 fd       	sbrc	r18, 7
     8f6:	30 95       	com	r19
     8f8:	c5 01       	movw	r24, r10
     8fa:	08 96       	adiw	r24, 0x08	; 8
     8fc:	28 17       	cp	r18, r24
     8fe:	39 07       	cpc	r19, r25
     900:	0c f3       	brlt	.-62     	; 0x8c4 <__stack+0x65>
			}	
		}
	
		if (charC < charEnd) {
     902:	cc 15       	cp	r28, r12
     904:	dd 05       	cpc	r29, r13
     906:	08 f4       	brcc	.+2      	; 0x90a <__stack+0xab>
            charC++;
     908:	21 96       	adiw	r28, 0x01	; 1
        } 
        if (charC >= charEnd) {
     90a:	cc 15       	cp	r28, r12
     90c:	dd 05       	cpc	r29, r13
     90e:	08 f4       	brcc	.+2      	; 0x912 <__stack+0xb3>
     910:	41 c0       	rjmp	.+130    	; 0x994 <__stack+0x135>
            x += space;
     912:	73 0c       	add	r7, r3
            if (!(glyph = *++str)) return;      
     914:	08 94       	sec
     916:	81 1c       	adc	r8, r1
     918:	91 1c       	adc	r9, r1
     91a:	f4 01       	movw	r30, r8
     91c:	40 81       	ld	r20, Z
     91e:	44 23       	and	r20, r20
     920:	09 f4       	brne	.+2      	; 0x924 <__stack+0xc5>
     922:	4b c0       	rjmp	.+150    	; 0x9ba <__stack+0x15b>
            if ((glyph < fonts[fontNr].glyph_beg) || (glyph > fonts[fontNr].glyph_end)) {      
     924:	24 2f       	mov	r18, r20
     926:	33 27       	eor	r19, r19
     928:	27 fd       	sbrc	r18, 7
     92a:	30 95       	com	r19
     92c:	f7 01       	movw	r30, r14
     92e:	53 e0       	ldi	r21, 0x03	; 3
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	5a 95       	dec	r21
     936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0xd1>
     938:	ee 0d       	add	r30, r14
     93a:	ff 1d       	adc	r31, r15
     93c:	e2 50       	subi	r30, 0x02	; 2
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	85 81       	ldd	r24, Z+5	; 0x05
     942:	99 27       	eor	r25, r25
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	2c f0       	brlt	.+10     	; 0x954 <__stack+0xf5>
     94a:	86 81       	ldd	r24, Z+6	; 0x06
     94c:	99 27       	eor	r25, r25
     94e:	82 17       	cp	r24, r18
     950:	93 07       	cpc	r25, r19
     952:	0c f4       	brge	.+2      	; 0x956 <__stack+0xf7>
               glyph = fonts[fontNr].glyph_def;
     954:	47 81       	ldd	r20, Z+7	; 0x07
            } 
            glyph  -= fonts[fontNr].glyph_beg;   
     956:	f7 01       	movw	r30, r14
     958:	33 e0       	ldi	r19, 0x03	; 3
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	3a 95       	dec	r19
     960:	e1 f7       	brne	.-8      	; 0x95a <__stack+0xfb>
     962:	ee 0d       	add	r30, r14
     964:	ff 1d       	adc	r31, r15
     966:	e2 50       	subi	r30, 0x02	; 2
     968:	fe 4f       	sbci	r31, 0xFE	; 254
     96a:	85 81       	ldd	r24, Z+5	; 0x05
     96c:	48 1b       	sub	r20, r24
            charC   = pgm_read_word(fonts[fontNr].fontIndex+glyph);
     96e:	84 2f       	mov	r24, r20
     970:	99 27       	eor	r25, r25
     972:	87 fd       	sbrc	r24, 7
     974:	90 95       	com	r25
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	21 81       	ldd	r18, Z+1	; 0x01
     97c:	32 81       	ldd	r19, Z+2	; 0x02
     97e:	f9 01       	movw	r30, r18
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	c5 91       	lpm	r28, Z+
     986:	d4 91       	lpm	r29, Z
            charEnd = pgm_read_word(fonts[fontNr].fontIndex+glyph+1);
     988:	f9 01       	movw	r30, r18
     98a:	e8 0f       	add	r30, r24
     98c:	f9 1f       	adc	r31, r25
     98e:	32 96       	adiw	r30, 0x02	; 2
     990:	c5 90       	lpm	r12, Z+
     992:	d4 90       	lpm	r13, Z
        }
		align++;
     994:	0f 5f       	subi	r16, 0xFF	; 255
		if (!align) {
     996:	71 f4       	brne	.+28     	; 0x9b4 <__stack+0x155>
    		align = fonts[fontNr].storebytes - 1;
     998:	85 2d       	mov	r24, r5
     99a:	99 27       	eor	r25, r25
     99c:	fc 01       	movw	r30, r24
     99e:	23 e0       	ldi	r18, 0x03	; 3
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	2a 95       	dec	r18
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <__stack+0x141>
     9a8:	e8 0f       	add	r30, r24
     9aa:	f9 1f       	adc	r31, r25
     9ac:	e2 50       	subi	r30, 0x02	; 2
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	00 85       	ldd	r16, Z+8	; 0x08
     9b2:	01 50       	subi	r16, 0x01	; 1
     9b4:	73 94       	inc	r7
     9b6:	77 fe       	sbrs	r7, 7
     9b8:	6d cf       	rjmp	.-294    	; 0x894 <__stack+0x35>
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	7f 90       	pop	r7
     9d4:	6f 90       	pop	r6
     9d6:	5f 90       	pop	r5
     9d8:	4f 90       	pop	r4
     9da:	3f 90       	pop	r3
     9dc:	2f 90       	pop	r2
     9de:	08 95       	ret

000009e0 <dispSetPix>:
#include "s1d1565.h"
#include "grafiklcd.h"

void dispSetPix(uint8_t x, uint8_t y, uint8_t color)
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	18 2f       	mov	r17, r24
     9e8:	06 2f       	mov	r16, r22
     9ea:	c4 2f       	mov	r28, r20
	if (x < NUM_COLS && y < NUM_ROWS) {
     9ec:	87 fd       	sbrc	r24, 7
     9ee:	38 c0       	rjmp	.+112    	; 0xa60 <dispSetPix+0x80>
     9f0:	60 34       	cpi	r22, 0x40	; 64
     9f2:	b0 f5       	brcc	.+108    	; 0xa60 <dispSetPix+0x80>
		
		DISPSETPAGE(y / 8);
     9f4:	86 2f       	mov	r24, r22
     9f6:	86 95       	lsr	r24
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	80 6b       	ori	r24, 0xB0	; 176
     9fe:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

		//set read/mod/write (read doesn't increment column)
		dispWriteCommand(0xe0);
     a02:	80 ee       	ldi	r24, 0xE0	; 224
     a04:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

		// select column addr
		dispWriteCommand(0x10|(x/16));
     a08:	81 2f       	mov	r24, r17
     a0a:	82 95       	swap	r24
     a0c:	8f 70       	andi	r24, 0x0F	; 15
     a0e:	80 61       	ori	r24, 0x10	; 16
     a10:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
		dispWriteCommand(x&15);
     a14:	81 2f       	mov	r24, r17
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

		//dummy read
		dispReadByte();
     a1c:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     a20:	60 2f       	mov	r22, r16
     a22:	67 70       	andi	r22, 0x07	; 7
		//write pix
		dispWriteByte(color?(0x01 << (y % 8)) | dispReadByte():
     a24:	cc 23       	and	r28, r28
     a26:	59 f0       	breq	.+22     	; 0xa3e <dispSetPix+0x5e>
     a28:	01 e0       	ldi	r16, 0x01	; 1
     a2a:	10 e0       	ldi	r17, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <dispSetPix+0x52>
     a2e:	00 0f       	add	r16, r16
     a30:	11 1f       	adc	r17, r17
     a32:	6a 95       	dec	r22
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <dispSetPix+0x4e>
     a36:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     a3a:	80 2b       	or	r24, r16
     a3c:	0c c0       	rjmp	.+24     	; 0xa56 <dispSetPix+0x76>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <dispSetPix+0x68>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <dispSetPix+0x64>
     a4c:	18 2f       	mov	r17, r24
     a4e:	10 95       	com	r17
     a50:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     a54:	81 23       	and	r24, r17
     a56:	0e 94 53 07 	call	0xea6 <dispWriteByte>
	                        ~(0x01 << (y % 8)) & dispReadByte());

		//end read/mod/write
		dispWriteCommand(0xee);
     a5a:	8e ee       	ldi	r24, 0xEE	; 238
     a5c:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <dispHLine>:
	}
}


//drav horizontal line, x & x2 inclusive
void dispHLine(uint8_t x, uint8_t y, uint8_t x2, uint8_t color)
{
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	c8 2f       	mov	r28, r24
     a76:	e6 2e       	mov	r14, r22
     a78:	f4 2e       	mov	r15, r20
     a7a:	d2 2e       	mov	r13, r18
	//set read/mod/write (read doesn't increment column)
	dispWriteCommand(0xe0);
     a7c:	80 ee       	ldi	r24, 0xE0	; 224
     a7e:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

	DISPSETPAGE(y / 8);
     a82:	8e 2d       	mov	r24, r14
     a84:	86 95       	lsr	r24
     a86:	86 95       	lsr	r24
     a88:	86 95       	lsr	r24
     a8a:	80 6b       	ori	r24, 0xB0	; 176
     a8c:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

	// select column addr
	dispWriteCommand(0x10|(x/16));
     a90:	8c 2f       	mov	r24, r28
     a92:	82 95       	swap	r24
     a94:	8f 70       	andi	r24, 0x0F	; 15
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
	dispWriteCommand(x&15);
     a9c:	8c 2f       	mov	r24, r28
     a9e:	8f 70       	andi	r24, 0x0F	; 15
     aa0:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>

	uint8_t mask = 1 << (y%8);
     aa4:	2e 2d       	mov	r18, r14
     aa6:	27 70       	andi	r18, 0x07	; 7
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	18 2f       	mov	r17, r24
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <dispHLine+0x4a>
     ab0:	11 0f       	add	r17, r17
     ab2:	2a 95       	dec	r18
     ab4:	ea f7       	brpl	.-6      	; 0xab0 <dispHLine+0x48>
     ab6:	9c 2f       	mov	r25, r28
     ab8:	9f 5f       	subi	r25, 0xFF	; 255

	if(color){
     aba:	dd 20       	and	r13, r13
     abc:	71 f0       	breq	.+28     	; 0xada <dispHLine+0x72>
		while(x++<=x2)
		{
			//dummy read
			dispReadByte();
			//write pix
			dispWriteByte( mask | dispReadByte() );
     abe:	8c 2f       	mov	r24, r28
     ac0:	c9 2f       	mov	r28, r25
     ac2:	f8 16       	cp	r15, r24
     ac4:	c8 f0       	brcs	.+50     	; 0xaf8 <dispHLine+0x90>
     ac6:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     aca:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     ace:	81 2b       	or	r24, r17
     ad0:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     ad4:	8c 2f       	mov	r24, r28
     ad6:	cf 5f       	subi	r28, 0xFF	; 255
     ad8:	f4 cf       	rjmp	.-24     	; 0xac2 <dispHLine+0x5a>
		}
	}else{
		mask = ~mask;
     ada:	10 95       	com	r17
		while(x++<=x2)
			{
			//dummy read
			dispReadByte();
			//write pix
			dispWriteByte( mask & dispReadByte() );
     adc:	8c 2f       	mov	r24, r28
     ade:	c9 2f       	mov	r28, r25
     ae0:	f8 16       	cp	r15, r24
     ae2:	50 f0       	brcs	.+20     	; 0xaf8 <dispHLine+0x90>
     ae4:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     ae8:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     aec:	81 23       	and	r24, r17
     aee:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     af2:	8c 2f       	mov	r24, r28
     af4:	cf 5f       	subi	r28, 0xFF	; 255
     af6:	f4 cf       	rjmp	.-24     	; 0xae0 <dispHLine+0x78>
		}
	}

	while(x++<=x2)
	{
		//dummy read
		dispReadByte();
		//write pix
		dispWriteByte(color?(0x01 << (y % 8)) | dispReadByte():
     af8:	8c 2f       	mov	r24, r28
     afa:	cf 5f       	subi	r28, 0xFF	; 255
     afc:	f8 16       	cp	r15, r24
     afe:	00 f1       	brcs	.+64     	; 0xb40 <dispHLine+0xd8>
     b00:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     b04:	2e 2d       	mov	r18, r14
     b06:	27 70       	andi	r18, 0x07	; 7
     b08:	dd 20       	and	r13, r13
     b0a:	59 f0       	breq	.+22     	; 0xb22 <dispHLine+0xba>
     b0c:	01 e0       	ldi	r16, 0x01	; 1
     b0e:	10 e0       	ldi	r17, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <dispHLine+0xae>
     b12:	00 0f       	add	r16, r16
     b14:	11 1f       	adc	r17, r17
     b16:	2a 95       	dec	r18
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <dispHLine+0xaa>
     b1a:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     b1e:	80 2b       	or	r24, r16
     b20:	0c c0       	rjmp	.+24     	; 0xb3a <dispHLine+0xd2>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <dispHLine+0xc4>
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	2a 95       	dec	r18
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <dispHLine+0xc0>
     b30:	18 2f       	mov	r17, r24
     b32:	10 95       	com	r17
     b34:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     b38:	81 23       	and	r24, r17
     b3a:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     b3e:	dc cf       	rjmp	.-72     	; 0xaf8 <dispHLine+0x90>
	                        ~(0x01 << (y % 8)) & dispReadByte());
	}
	//end read/mod/write
	dispWriteCommand(0xee);
     b40:	8e ee       	ldi	r24, 0xEE	; 238
     b42:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	08 95       	ret

00000b54 <dispVLine>:
}

//drav vertical line, x & x2 inclusive
void dispVLine(uint8_t x, uint8_t y, uint8_t y2) 
{
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	e8 2e       	mov	r14, r24
     b60:	16 2f       	mov	r17, r22
     b62:	f4 2e       	mov	r15, r20
	uint8_t sp, ep, mask;
	sp=y/8;
     b64:	c6 2f       	mov	r28, r22
     b66:	c6 95       	lsr	r28
     b68:	c6 95       	lsr	r28
     b6a:	c6 95       	lsr	r28
	ep=y2/8;
     b6c:	04 2f       	mov	r16, r20
     b6e:	06 95       	lsr	r16
     b70:	06 95       	lsr	r16
     b72:	06 95       	lsr	r16

	//set read/mod/write (read doesn't increment column)
	dispWriteCommand(0xe0);
     b74:	80 ee       	ldi	r24, 0xE0	; 224
     b76:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>


	mask = 0xff << (y%8);
     b7a:	17 70       	andi	r17, 0x07	; 7
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <dispVLine+0x30>
     b82:	88 0f       	add	r24, r24
     b84:	1a 95       	dec	r17
     b86:	ea f7       	brpl	.-6      	; 0xb82 <dispVLine+0x2e>
     b88:	18 2f       	mov	r17, r24
	
	while(sp <= ep){
		if(sp == ep){
			mask &= 0xff >> (7-(y2%8));		
		}
		DISPSETPAGE(sp);
		// select column addr		dispWriteCommand(0x10|(x/16));
		dispWriteCommand(x&15);
		//dummy read
		dispReadByte();
		//write pix
		dispWriteByte(mask | dispReadByte());
		mask = 0xff;
		sp++;
	}
     b8a:	0c 17       	cp	r16, r28
     b8c:	40 f1       	brcs	.+80     	; 0xbde <dispVLine+0x8a>
     b8e:	c0 17       	cp	r28, r16
     b90:	71 f4       	brne	.+28     	; 0xbae <dispVLine+0x5a>
     b92:	8f 2d       	mov	r24, r15
     b94:	87 70       	andi	r24, 0x07	; 7
     b96:	27 e0       	ldi	r18, 0x07	; 7
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	28 1b       	sub	r18, r24
     b9c:	31 09       	sbc	r19, r1
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <dispVLine+0x54>
     ba4:	95 95       	asr	r25
     ba6:	87 95       	ror	r24
     ba8:	2a 95       	dec	r18
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <dispVLine+0x50>
     bac:	18 23       	and	r17, r24
     bae:	8c 2f       	mov	r24, r28
     bb0:	80 6b       	ori	r24, 0xB0	; 176
     bb2:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     bb6:	8e 2d       	mov	r24, r14
     bb8:	82 95       	swap	r24
     bba:	8f 70       	andi	r24, 0x0F	; 15
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     bc2:	8e 2d       	mov	r24, r14
     bc4:	8f 70       	andi	r24, 0x0F	; 15
     bc6:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     bca:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     bce:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     bd2:	81 2b       	or	r24, r17
     bd4:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     bd8:	1f ef       	ldi	r17, 0xFF	; 255
     bda:	cf 5f       	subi	r28, 0xFF	; 255
     bdc:	d6 cf       	rjmp	.-84     	; 0xb8a <dispVLine+0x36>
	//end read/mod/write
	dispWriteCommand(0xee);
}
     bde:	8e ee       	ldi	r24, 0xEE	; 238
     be0:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	08 95       	ret

00000bf0 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t color) 
{
	uint8_t sp, ep, mask;
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	78 2e       	mov	r7, r24
     c0c:	16 2f       	mov	r17, r22
     c0e:	84 2e       	mov	r8, r20
     c10:	d2 2e       	mov	r13, r18
     c12:	90 2e       	mov	r9, r16
	uint8_t y2 = y + height - 1;
	sp=y/8;
     c14:	d6 0e       	add	r13, r22
     c16:	da 94       	dec	r13
	ep=y2/8;
     c18:	f6 2e       	mov	r15, r22
     c1a:	f6 94       	lsr	r15
     c1c:	f6 94       	lsr	r15
     c1e:	f6 94       	lsr	r15

     c20:	cd 2c       	mov	r12, r13
     c22:	c6 94       	lsr	r12
     c24:	c6 94       	lsr	r12
     c26:	c6 94       	lsr	r12
	//set read/mod/write (read doesn't increment column)
	dispWriteCommand(0xe0);
	
     c28:	80 ee       	ldi	r24, 0xE0	; 224
     c2a:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
	mask = 0xff << (y%8);
	
     c2e:	17 70       	andi	r17, 0x07	; 7
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	e8 2e       	mov	r14, r24
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <fillRect+0x4a>
     c38:	ee 0c       	add	r14, r14
     c3a:	1a 95       	dec	r17
     c3c:	ea f7       	brpl	.-6      	; 0xc38 <fillRect+0x48>
	while(sp <= ep){
		uint8_t xi;
		if(sp == ep){
			mask &= 0xff >> (7-(y2%8));		
		}
		DISPSETPAGE(sp);
		// select column addr		
		for(xi = x; xi < x+width; xi++){		
			dispWriteCommand(0x10|(xi/16));
			dispWriteCommand(xi&15);
			//dummy read
			dispReadByte();
			//write pix
			if(color){
				dispWriteByte(mask | dispReadByte());
			}else{
				dispWriteByte(~mask & dispReadByte());
			}		
		}
		mask = 0xff;
		sp++;
	}
	//end read/mod/write	dispWriteCommand(0xee);
     c3e:	cf 14       	cp	r12, r15
     c40:	08 f4       	brcc	.+2      	; 0xc44 <fillRect+0x54>
     c42:	45 c0       	rjmp	.+138    	; 0xcce <fillRect+0xde>
     c44:	fc 14       	cp	r15, r12
     c46:	71 f4       	brne	.+28     	; 0xc64 <fillRect+0x74>
     c48:	8d 2d       	mov	r24, r13
     c4a:	87 70       	andi	r24, 0x07	; 7
     c4c:	27 e0       	ldi	r18, 0x07	; 7
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	28 1b       	sub	r18, r24
     c52:	31 09       	sbc	r19, r1
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <fillRect+0x6e>
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	2a 95       	dec	r18
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <fillRect+0x6a>
     c62:	e8 22       	and	r14, r24
     c64:	8f 2d       	mov	r24, r15
     c66:	80 6b       	ori	r24, 0xB0	; 176
     c68:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     c6c:	07 2d       	mov	r16, r7
     c6e:	c7 2d       	mov	r28, r7
     c70:	dd 27       	eor	r29, r29
     c72:	a8 2c       	mov	r10, r8
     c74:	bb 24       	eor	r11, r11
     c76:	ce 01       	movw	r24, r28
     c78:	8a 0d       	add	r24, r10
     c7a:	9b 1d       	adc	r25, r11
     c7c:	c8 17       	cp	r28, r24
     c7e:	d9 07       	cpc	r29, r25
     c80:	14 f5       	brge	.+68     	; 0xcc6 <fillRect+0xd6>
     c82:	80 2f       	mov	r24, r16
     c84:	82 95       	swap	r24
     c86:	8f 70       	andi	r24, 0x0F	; 15
     c88:	80 61       	ori	r24, 0x10	; 16
     c8a:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     c8e:	80 2f       	mov	r24, r16
     c90:	8f 70       	andi	r24, 0x0F	; 15
     c92:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     c96:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     c9a:	99 20       	and	r9, r9
     c9c:	21 f0       	breq	.+8      	; 0xca6 <fillRect+0xb6>
     c9e:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     ca2:	8e 29       	or	r24, r14
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <fillRect+0xc0>
     ca6:	1e 2d       	mov	r17, r14
     ca8:	10 95       	com	r17
     caa:	0e 94 b3 07 	call	0xf66 <dispReadByte>
     cae:	81 23       	and	r24, r17
     cb0:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     cb4:	0f 5f       	subi	r16, 0xFF	; 255
     cb6:	20 2f       	mov	r18, r16
     cb8:	33 27       	eor	r19, r19
     cba:	ce 01       	movw	r24, r28
     cbc:	8a 0d       	add	r24, r10
     cbe:	9b 1d       	adc	r25, r11
     cc0:	28 17       	cp	r18, r24
     cc2:	39 07       	cpc	r19, r25
     cc4:	f4 f2       	brlt	.-68     	; 0xc82 <fillRect+0x92>
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	e8 2e       	mov	r14, r24
     cca:	f3 94       	inc	r15
     ccc:	b8 cf       	rjmp	.-144    	; 0xc3e <fillRect+0x4e>
}


     cce:	8e ee       	ldi	r24, 0xEE	; 238
     cd0:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	bf 90       	pop	r11
     ce6:	af 90       	pop	r10
     ce8:	9f 90       	pop	r9
     cea:	8f 90       	pop	r8
     cec:	7f 90       	pop	r7
     cee:	08 95       	ret

00000cf0 <dispDrawRect>:

void dispDrawRect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t color) {
	  	
	dispHLine(x, y, x + width, color);		// top
	dispHLine(x, y+height, x + width, color);	// bottom
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	e8 2e       	mov	r14, r24
     cfc:	d6 2e       	mov	r13, r22
     cfe:	f4 2e       	mov	r15, r20
     d00:	12 2f       	mov	r17, r18
	dispVLine(x, y , y + height);			// left
	dispVLine(x+width, y, y + height);		// right
     d02:	f8 0e       	add	r15, r24
     d04:	20 2f       	mov	r18, r16
     d06:	4f 2d       	mov	r20, r15
     d08:	0e 94 34 05 	call	0xa68 <dispHLine>
}
     d0c:	1d 0d       	add	r17, r13
     d0e:	20 2f       	mov	r18, r16
     d10:	4f 2d       	mov	r20, r15
     d12:	61 2f       	mov	r22, r17
     d14:	8e 2d       	mov	r24, r14
     d16:	0e 94 34 05 	call	0xa68 <dispHLine>

     d1a:	41 2f       	mov	r20, r17
     d1c:	6d 2d       	mov	r22, r13
     d1e:	8e 2d       	mov	r24, r14
     d20:	0e 94 aa 05 	call	0xb54 <dispVLine>
void drawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t color) {
     d24:	41 2f       	mov	r20, r17
     d26:	6d 2d       	mov	r22, r13
     d28:	8f 2d       	mov	r24, r15
     d2a:	0e 94 aa 05 	call	0xb54 <dispVLine>
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	08 95       	ret

00000d3a <drawLine>:
	signed int i, dx, dy, sdx, sdy, dxabs, dyabs, x, y, px, py;
	dx = x2 - x1;      // the horizontal distance of the line
	dy = y2 - y1;      // the vertical distance of the line 
     d3a:	2f 92       	push	r2
     d3c:	3f 92       	push	r3
     d3e:	4f 92       	push	r4
     d40:	5f 92       	push	r5
     d42:	6f 92       	push	r6
     d44:	7f 92       	push	r7
     d46:	8f 92       	push	r8
     d48:	9f 92       	push	r9
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	23 97       	sbiw	r28, 0x03	; 3
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	09 83       	std	Y+1, r16	; 0x01
	dxabs = dx >= 0 ? dx: -dx; //abs
	dyabs = dy >= 0 ? dy: -dy; //abs
     d70:	55 27       	eor	r21, r21
     d72:	e8 2f       	mov	r30, r24
     d74:	ff 27       	eor	r31, r31
     d76:	4e 1b       	sub	r20, r30
     d78:	5f 0b       	sbc	r21, r31
	sdx = dx >= 0 ? 1: -1;     //sgn
     d7a:	33 27       	eor	r19, r19
     d7c:	77 27       	eor	r23, r23
     d7e:	26 1b       	sub	r18, r22
     d80:	37 0b       	sbc	r19, r23
	sdy = dy >= 0 ? 1: -1;     //sgn
     d82:	6a 01       	movw	r12, r20
     d84:	57 ff       	sbrs	r21, 7
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <drawLine+0x56>
     d88:	d0 94       	com	r13
     d8a:	c1 94       	neg	r12
     d8c:	d1 08       	sbc	r13, r1
     d8e:	d3 94       	inc	r13
	x = dyabs >> 1;
     d90:	89 01       	movw	r16, r18
     d92:	37 ff       	sbrs	r19, 7
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <drawLine+0x62>
     d96:	10 95       	com	r17
     d98:	01 95       	neg	r16
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
	y = dxabs >> 1;
     d9c:	57 fd       	sbrc	r21, 7
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <drawLine+0x6e>
     da0:	a1 e0       	ldi	r26, 0x01	; 1
     da2:	2a 2e       	mov	r2, r26
     da4:	31 2c       	mov	r3, r1
     da6:	03 c0       	rjmp	.+6      	; 0xdae <drawLine+0x74>
     da8:	5f ef       	ldi	r21, 0xFF	; 255
     daa:	25 2e       	mov	r2, r21
     dac:	35 2e       	mov	r3, r21
	px = x1;
     dae:	37 fd       	sbrc	r19, 7
     db0:	04 c0       	rjmp	.+8      	; 0xdba <drawLine+0x80>
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	44 2e       	mov	r4, r20
     db6:	51 2c       	mov	r5, r1
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <drawLine+0x86>
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	43 2e       	mov	r4, r19
     dbe:	53 2e       	mov	r5, r19
	py = y1;
     dc0:	38 01       	movw	r6, r16
     dc2:	75 94       	asr	r7
     dc4:	67 94       	ror	r6
    dispSetPix(px, py, color);
     dc6:	56 01       	movw	r10, r12
     dc8:	b5 94       	asr	r11
     dca:	a7 94       	ror	r10
	
     dcc:	7f 01       	movw	r14, r30
	if (dxabs >= dyabs) { // the line is more horizontal than vertical  
     dce:	7b 83       	std	Y+3, r23	; 0x03
     dd0:	6a 83       	std	Y+2, r22	; 0x02
		for (i = 0; i < dxabs; i++) {
     dd2:	49 81       	ldd	r20, Y+1	; 0x01
     dd4:	6a 81       	ldd	r22, Y+2	; 0x02
     dd6:	8e 2f       	mov	r24, r30
     dd8:	0e 94 f0 04 	call	0x9e0 <dispSetPix>
			y += dyabs; 
			if (y >= dxabs) {
     ddc:	c0 16       	cp	r12, r16
     dde:	d1 06       	cpc	r13, r17
     de0:	04 f1       	brlt	.+64     	; 0xe22 <drawLine+0xe8>
				y -= dxabs;
     de2:	88 24       	eor	r8, r8
     de4:	99 24       	eor	r9, r9
     de6:	8c 14       	cp	r8, r12
     de8:	9d 04       	cpc	r9, r13
     dea:	d4 f5       	brge	.+116    	; 0xe60 <drawLine+0x126>
				py += sdy;
     dec:	a0 0e       	add	r10, r16
     dee:	b1 1e       	adc	r11, r17
			}
     df0:	ac 14       	cp	r10, r12
     df2:	bd 04       	cpc	r11, r13
     df4:	44 f0       	brlt	.+16     	; 0xe06 <drawLine+0xcc>
			px += sdx;
     df6:	ac 18       	sub	r10, r12
     df8:	bd 08       	sbc	r11, r13
			dispSetPix(px, py, color);
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	84 0d       	add	r24, r4
     e00:	95 1d       	adc	r25, r5
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
		}
	} else { // the line is more vertical than horizontal
     e06:	e2 0c       	add	r14, r2
     e08:	f3 1c       	adc	r15, r3
		for (i = 0; i < dyabs; i++) {
     e0a:	49 81       	ldd	r20, Y+1	; 0x01
     e0c:	6a 81       	ldd	r22, Y+2	; 0x02
     e0e:	8e 2d       	mov	r24, r14
     e10:	0e 94 f0 04 	call	0x9e0 <dispSetPix>
     e14:	08 94       	sec
     e16:	81 1c       	adc	r8, r1
     e18:	91 1c       	adc	r9, r1
     e1a:	8c 14       	cp	r8, r12
     e1c:	9d 04       	cpc	r9, r13
     e1e:	34 f3       	brlt	.-52     	; 0xdec <drawLine+0xb2>
     e20:	1f c0       	rjmp	.+62     	; 0xe60 <drawLine+0x126>
			x += dxabs;
			if (x >= dyabs) {
				x -= dyabs;
     e22:	88 24       	eor	r8, r8
     e24:	99 24       	eor	r9, r9
     e26:	80 16       	cp	r8, r16
     e28:	91 06       	cpc	r9, r17
     e2a:	d4 f4       	brge	.+52     	; 0xe60 <drawLine+0x126>
				px += sdx;
     e2c:	6c 0c       	add	r6, r12
     e2e:	7d 1c       	adc	r7, r13
			}
     e30:	60 16       	cp	r6, r16
     e32:	71 06       	cpc	r7, r17
     e34:	24 f0       	brlt	.+8      	; 0xe3e <drawLine+0x104>
			py += sdy;
     e36:	60 1a       	sub	r6, r16
     e38:	71 0a       	sbc	r7, r17
			dispSetPix(px, py, color);
     e3a:	e2 0c       	add	r14, r2
     e3c:	f3 1c       	adc	r15, r3
		}
	}
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	e4 0d       	add	r30, r4
     e44:	f5 1d       	adc	r31, r5
     e46:	fb 83       	std	Y+3, r31	; 0x03
     e48:	ea 83       	std	Y+2, r30	; 0x02
}	  
     e4a:	49 81       	ldd	r20, Y+1	; 0x01
     e4c:	6a 81       	ldd	r22, Y+2	; 0x02
     e4e:	8e 2d       	mov	r24, r14
     e50:	0e 94 f0 04 	call	0x9e0 <dispSetPix>
     e54:	08 94       	sec
     e56:	81 1c       	adc	r8, r1
     e58:	91 1c       	adc	r9, r1
     e5a:	80 16       	cp	r8, r16
     e5c:	91 06       	cpc	r9, r17
     e5e:	34 f3       	brlt	.-52     	; 0xe2c <drawLine+0xf2>
     e60:	23 96       	adiw	r28, 0x03	; 3
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	3f 90       	pop	r3
     e8e:	2f 90       	pop	r2
     e90:	08 95       	ret

00000e92 <dispEnable>:
	dispWriteCommand(x&15);
}

void dispEnable (void) {
	LCD_CMD_PORT |= (0x01 << EN);
     e92:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CMD_PORT &= ~(0x01 << EN);
     e94:	c4 98       	cbi	0x18, 4	; 24
     e96:	08 95       	ret

00000e98 <dispWriteCommand>:
     e98:	c3 98       	cbi	0x18, 3	; 24
     e9a:	82 bb       	out	0x12, r24	; 18
     e9c:	c1 98       	cbi	0x18, 1	; 24
     e9e:	0e 94 49 07 	call	0xe92 <dispEnable>
     ea2:	c1 9a       	sbi	0x18, 1	; 24
     ea4:	08 95       	ret

00000ea6 <dispWriteByte>:
     ea6:	c3 9a       	sbi	0x18, 3	; 24
     ea8:	82 bb       	out	0x12, r24	; 18
     eaa:	c1 98       	cbi	0x18, 1	; 24
     eac:	0e 94 49 07 	call	0xe92 <dispEnable>
     eb0:	c1 9a       	sbi	0x18, 1	; 24
     eb2:	08 95       	ret

00000eb4 <dispGotoXY>:
     eb4:	1f 93       	push	r17
     eb6:	18 2f       	mov	r17, r24
     eb8:	86 2f       	mov	r24, r22
     eba:	80 6b       	ori	r24, 0xB0	; 176
     ebc:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     ec0:	81 2f       	mov	r24, r17
     ec2:	82 95       	swap	r24
     ec4:	8f 70       	andi	r24, 0x0F	; 15
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     ecc:	81 2f       	mov	r24, r17
     ece:	8f 70       	andi	r24, 0x0F	; 15
     ed0:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     ed4:	1f 91       	pop	r17
     ed6:	08 95       	ret

00000ed8 <dispClear>:
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	10 e0       	ldi	r17, 0x00	; 0
     ede:	61 2f       	mov	r22, r17
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	0e 94 5a 07 	call	0xeb4 <dispGotoXY>
     ee6:	c0 e0       	ldi	r28, 0x00	; 0
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 53 07 	call	0xea6 <dispWriteByte>
     eee:	cf 5f       	subi	r28, 0xFF	; 255
     ef0:	c7 ff       	sbrs	r28, 7
     ef2:	fa cf       	rjmp	.-12     	; 0xee8 <dispClear+0x10>
     ef4:	1f 5f       	subi	r17, 0xFF	; 255
     ef6:	18 30       	cpi	r17, 0x08	; 8
     ef8:	90 f3       	brcs	.-28     	; 0xede <dispClear+0x6>
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	86 2f       	mov	r24, r22
     efe:	0e 94 5a 07 	call	0xeb4 <dispGotoXY>
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	08 95       	ret

00000f08 <dispInit>:
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	81 bb       	out	0x11, r24	; 17
     f0c:	87 b3       	in	r24, 0x17	; 23
     f0e:	8e 63       	ori	r24, 0x3E	; 62
     f10:	87 bb       	out	0x17, r24	; 23
     f12:	88 b3       	in	r24, 0x18	; 24
     f14:	86 60       	ori	r24, 0x06	; 6
     f16:	88 bb       	out	0x18, r24	; 24
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f1e:	80 ea       	ldi	r24, 0xA0	; 160
     f20:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f24:	83 ea       	ldi	r24, 0xA3	; 163
     f26:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f2a:	80 ec       	ldi	r24, 0xC0	; 192
     f2c:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f30:	8f e2       	ldi	r24, 0x2F	; 47
     f32:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f36:	80 e2       	ldi	r24, 0x20	; 32
     f38:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f3c:	8c ea       	ldi	r24, 0xAC	; 172
     f3e:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f42:	81 e8       	ldi	r24, 0x81	; 129
     f44:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f4e:	84 ea       	ldi	r24, 0xA4	; 164
     f50:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f54:	8f ea       	ldi	r24, 0xAF	; 175
     f56:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f5a:	86 ea       	ldi	r24, 0xA6	; 166
     f5c:	0e 94 4c 07 	call	0xe98 <dispWriteCommand>
     f60:	0e 94 6c 07 	call	0xed8 <dispClear>
     f64:	08 95       	ret

00000f66 <dispReadByte>:
}

unsigned char dispReadByte (void) {
  unsigned char byte;

  LCD_CMD_PORT |= (0x01 << A0);
     f66:	c3 9a       	sbi	0x18, 3	; 24

  LCD_DATA_OUT = 0x00;
     f68:	12 ba       	out	0x12, r1	; 18
  LCDDD = 0x00;
     f6a:	11 ba       	out	0x11, r1	; 17
  LCD_CMD_PORT &= ~(0x01 << CS);
     f6c:	c1 98       	cbi	0x18, 1	; 24
  LCD_CMD_PORT |= (0x01 << RW);
     f6e:	c5 9a       	sbi	0x18, 5	; 24
  LCD_CMD_PORT |= (0x01 << EN);
     f70:	c4 9a       	sbi	0x18, 4	; 24

  byte = LCD_DATA_IN;
     f72:	80 b3       	in	r24, 0x10	; 16
  LCD_CMD_PORT &= ~(0x01 << EN) & ~(0x01 << RW);
     f74:	98 b3       	in	r25, 0x18	; 24
     f76:	9f 7c       	andi	r25, 0xCF	; 207
     f78:	98 bb       	out	0x18, r25	; 24
  LCD_CMD_PORT |= (0x01 << CS);
     f7a:	c1 9a       	sbi	0x18, 1	; 24
  LCDDD = 0xff;
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	91 bb       	out	0x11, r25	; 17
  return byte;
}
     f80:	99 27       	eor	r25, r25
     f82:	08 95       	ret

00000f84 <getKey>:
	while (1) {
	}
}
uint8_t getKey() {
	AvrXDelay(&switchtimer, 600);
     f84:	68 e5       	ldi	r22, 0x58	; 88
     f86:	72 e0       	ldi	r23, 0x02	; 2
     f88:	80 e6       	ldi	r24, 0x60	; 96
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 5e 0a 	call	0x14bc <AvrXDelay>
	while(1) {

		if(!(PINA & (1 << PA0))) {
     f90:	89 b3       	in	r24, 0x19	; 25
     f92:	99 27       	eor	r25, r25
     f94:	9c 01       	movw	r18, r24
     f96:	21 70       	andi	r18, 0x01	; 1
     f98:	30 70       	andi	r19, 0x00	; 0
     f9a:	80 fd       	sbrc	r24, 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <getKey+0x1e>
			return 0;
     f9e:	c9 01       	movw	r24, r18
     fa0:	08 95       	ret
		}
		if(!(PINA & (1 << PA1))) {
     fa2:	c9 99       	sbic	0x19, 1	; 25
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <getKey+0x28>
			return 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	08 95       	ret
		}
		if(!(PINA & (1 << PA2))) {
     fac:	ca 99       	sbic	0x19, 2	; 25
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <getKey+0x32>
			return 2;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	08 95       	ret
		}
		if(!(PINA & (1 << PA3))) {
     fb6:	cb 99       	sbic	0x19, 3	; 25
     fb8:	eb cf       	rjmp	.-42     	; 0xf90 <getKey+0xc>
			return 3;
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
}
     fbe:	08 95       	ret

00000fc0 <menu_handler>:

void menu_handler(void *data) {
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
	menu_t *menu = data;
	uint8_t i, key;
	int8_t sel = 0;
     fca:	10 e0       	ldi	r17, 0x00	; 0
	DRAW_MEN:
	pos.y = 0;
     fcc:	10 92 08 02 	sts	0x0208, r1

	fillRect(pos.y, pos.x, 41, 10*menu->size, 0);
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	9c 01       	movw	r18, r24
     fd6:	53 e0       	ldi	r21, 0x03	; 3
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	5a 95       	dec	r21
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <menu_handler+0x18>
     fe0:	28 0f       	add	r18, r24
     fe2:	39 1f       	adc	r19, r25
     fe4:	28 0f       	add	r18, r24
     fe6:	39 1f       	adc	r19, r25
     fe8:	00 91 08 02 	lds	r16, 0x0208
     fec:	49 e2       	ldi	r20, 0x29	; 41
     fee:	60 91 07 02 	lds	r22, 0x0207
     ff2:	80 2f       	mov	r24, r16
     ff4:	0e 94 f8 05 	call	0xbf0 <fillRect>

	for(i = 0; i < menu->size; i++) {
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	89 2b       	or	r24, r25
     ffe:	59 f1       	breq	.+86     	; 0x1056 <menu_handler+0x96>
		menu->items[i]->show(menu->items[i]->data, (sel==i));
    1000:	20 2f       	mov	r18, r16
    1002:	33 27       	eor	r19, r19
    1004:	f9 01       	movw	r30, r18
    1006:	e2 0f       	add	r30, r18
    1008:	f3 1f       	adc	r31, r19
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	e8 0f       	add	r30, r24
    1010:	f9 1f       	adc	r31, r25
    1012:	a0 81       	ld	r26, Z
    1014:	b1 81       	ldd	r27, Z+1	; 0x01
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	81 2f       	mov	r24, r17
    101a:	99 27       	eor	r25, r25
    101c:	87 fd       	sbrc	r24, 7
    101e:	90 95       	com	r25
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	09 f4       	brne	.+2      	; 0x1028 <menu_handler+0x68>
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	2d 91       	ld	r18, X+
    102a:	3c 91       	ld	r19, X
    102c:	11 97       	sbiw	r26, 0x01	; 1
    102e:	fd 01       	movw	r30, r26
    1030:	84 81       	ldd	r24, Z+4	; 0x04
    1032:	95 81       	ldd	r25, Z+5	; 0x05
    1034:	f9 01       	movw	r30, r18
    1036:	09 95       	icall
		pos.y += 9;		
    1038:	80 91 08 02 	lds	r24, 0x0208
    103c:	87 5f       	subi	r24, 0xF7	; 247
    103e:	80 93 08 02 	sts	0x0208, r24
		if(i >= 6)
    1042:	06 30       	cpi	r16, 0x06	; 6
    1044:	40 f4       	brcc	.+16     	; 0x1056 <menu_handler+0x96>
    1046:	0f 5f       	subi	r16, 0xFF	; 255
    1048:	20 2f       	mov	r18, r16
    104a:	33 27       	eor	r19, r19
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	28 17       	cp	r18, r24
    1052:	39 07       	cpc	r19, r25
    1054:	a8 f2       	brcs	.-86     	; 0x1000 <menu_handler+0x40>
			break;
	}
	while(1) {  // keyhandeling
	key = getKey();
    1056:	0e 94 c2 07 	call	0xf84 <getKey>
    105a:	08 2f       	mov	r16, r24
		// enter
		if(key == 2) {
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	41 f5       	brne	.+80     	; 0x10b0 <menu_handler+0xf0>
			fillRect(0, pos.x, 41, 10*menu->size, 0);
    1060:	2a 81       	ldd	r18, Y+2	; 0x02
    1062:	3b 81       	ldd	r19, Y+3	; 0x03
    1064:	c9 01       	movw	r24, r18
    1066:	43 e0       	ldi	r20, 0x03	; 3
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	4a 95       	dec	r20
    106e:	e1 f7       	brne	.-8      	; 0x1068 <menu_handler+0xa8>
    1070:	82 0f       	add	r24, r18
    1072:	93 1f       	adc	r25, r19
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	28 2f       	mov	r18, r24
    107c:	49 e2       	ldi	r20, 0x29	; 41
    107e:	60 91 07 02 	lds	r22, 0x0207
    1082:	80 2f       	mov	r24, r16
    1084:	0e 94 f8 05 	call	0xbf0 <fillRect>
			//pos.x += 20;
			menu->items[sel]->enter(menu->items[sel]->data); // enter
    1088:	e1 2f       	mov	r30, r17
    108a:	ff 27       	eor	r31, r31
    108c:	e7 fd       	sbrc	r30, 7
    108e:	f0 95       	com	r31
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	e8 0f       	add	r30, r24
    109a:	f9 1f       	adc	r31, r25
    109c:	01 90       	ld	r0, Z+
    109e:	f0 81       	ld	r31, Z
    10a0:	e0 2d       	mov	r30, r0
    10a2:	22 81       	ldd	r18, Z+2	; 0x02
    10a4:	33 81       	ldd	r19, Z+3	; 0x03
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	95 81       	ldd	r25, Z+5	; 0x05
    10aa:	f9 01       	movw	r30, r18
    10ac:	09 95       	icall
			
			goto DRAW_MEN;
    10ae:	8e cf       	rjmp	.-228    	; 0xfcc <menu_handler+0xc>
		}

	// zurück
		if(key == 3) {
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <menu_handler+0x102>
			//fillRect(0, pos.x, 41, 10*menu->size, 1);
			//pos.x -= 20;
			if(menu->name != "/")
    10b4:	88 81       	ld	r24, Y
    10b6:	99 81       	ldd	r25, Y+1	; 0x01
    10b8:	87 57       	subi	r24, 0x77	; 119
    10ba:	90 40       	sbci	r25, 0x00	; 0
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <menu_handler+0x100>
    10be:	4e c0       	rjmp	.+156    	; 0x115c <menu_handler+0x19c>
    10c0:	ca cf       	rjmp	.-108    	; 0x1056 <menu_handler+0x96>
				return;
		}
	//	up down
		if(key < 2) {
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	40 f6       	brcc	.-112    	; 0x1056 <menu_handler+0x96>
			pos.y = sel*9;
    10c6:	29 e0       	ldi	r18, 0x09	; 9
    10c8:	12 02       	muls	r17, r18
    10ca:	c0 01       	movw	r24, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	80 93 08 02 	sts	0x0208, r24
			menu->items[sel]->show(menu->items[sel]->data, 0);
    10d2:	e1 2f       	mov	r30, r17
    10d4:	ff 27       	eor	r31, r31
    10d6:	e7 fd       	sbrc	r30, 7
    10d8:	f0 95       	com	r31
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	e8 0f       	add	r30, r24
    10e4:	f9 1f       	adc	r31, r25
    10e6:	01 90       	ld	r0, Z+
    10e8:	f0 81       	ld	r31, Z
    10ea:	e0 2d       	mov	r30, r0
    10ec:	20 81       	ld	r18, Z
    10ee:	31 81       	ldd	r19, Z+1	; 0x01
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	84 81       	ldd	r24, Z+4	; 0x04
    10f4:	95 81       	ldd	r25, Z+5	; 0x05
    10f6:	f9 01       	movw	r30, r18
    10f8:	09 95       	icall
			if(key == 1)
    10fa:	01 30       	cpi	r16, 0x01	; 1
    10fc:	11 f4       	brne	.+4      	; 0x1102 <menu_handler+0x142>
				sel++;
    10fe:	1f 5f       	subi	r17, 0xFF	; 255
    1100:	03 c0       	rjmp	.+6      	; 0x1108 <menu_handler+0x148>
			if(key == 0)
    1102:	00 23       	and	r16, r16
    1104:	09 f4       	brne	.+2      	; 0x1108 <menu_handler+0x148>
				sel--;
    1106:	11 50       	subi	r17, 0x01	; 1
			if(sel == menu->size)
    1108:	21 2f       	mov	r18, r17
    110a:	33 27       	eor	r19, r19
    110c:	27 fd       	sbrc	r18, 7
    110e:	30 95       	com	r19
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	28 17       	cp	r18, r24
    1116:	39 07       	cpc	r19, r25
    1118:	11 f4       	brne	.+4      	; 0x111e <menu_handler+0x15e>
				sel = 0;
    111a:	10 e0       	ldi	r17, 0x00	; 0
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <menu_handler+0x166>
			if(sel < 0)
    111e:	17 ff       	sbrs	r17, 7
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <menu_handler+0x166>
				sel = menu->size - 1;
    1122:	1a 81       	ldd	r17, Y+2	; 0x02
    1124:	11 50       	subi	r17, 0x01	; 1
			pos.y = sel*9;
    1126:	e9 e0       	ldi	r30, 0x09	; 9
    1128:	1e 02       	muls	r17, r30
    112a:	c0 01       	movw	r24, r0
    112c:	11 24       	eor	r1, r1
    112e:	80 93 08 02 	sts	0x0208, r24
			menu->items[sel]->show(menu->items[sel]->data, 1);
    1132:	e1 2f       	mov	r30, r17
    1134:	ff 27       	eor	r31, r31
    1136:	e7 fd       	sbrc	r30, 7
    1138:	f0 95       	com	r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	e8 0f       	add	r30, r24
    1144:	f9 1f       	adc	r31, r25
    1146:	01 90       	ld	r0, Z+
    1148:	f0 81       	ld	r31, Z
    114a:	e0 2d       	mov	r30, r0
    114c:	20 81       	ld	r18, Z
    114e:	31 81       	ldd	r19, Z+1	; 0x01
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	95 81       	ldd	r25, Z+5	; 0x05
    1156:	f9 01       	movw	r30, r18
    1158:	09 95       	icall
    115a:	7d cf       	rjmp	.-262    	; 0x1056 <menu_handler+0x96>
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <menu>:
    1166:	89 e7       	ldi	r24, 0x79	; 121
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 e0 07 	call	0xfc0 <menu_handler>
    116e:	ff cf       	rjmp	.-2      	; 0x116e <menu+0x8>

00001170 <show_menu>:
		}
	}
}

void show_menu(void *data, uint8_t selected) {
    1170:	ef 92       	push	r14
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	16 2f       	mov	r17, r22
	menu_t *menu = data;
	dispDrawRect(pos.x, pos.y, 40, 9, 1);
    117e:	01 e0       	ldi	r16, 0x01	; 1
    1180:	29 e0       	ldi	r18, 0x09	; 9
    1182:	48 e2       	ldi	r20, 0x28	; 40
    1184:	60 91 08 02 	lds	r22, 0x0208
    1188:	80 91 07 02 	lds	r24, 0x0207
    118c:	0e 94 78 06 	call	0xcf0 <dispDrawRect>
	fillRect(pos.x+1, pos.y+1, 39, 8, selected);
    1190:	80 91 08 02 	lds	r24, 0x0208
    1194:	80 0f       	add	r24, r16
    1196:	90 91 07 02 	lds	r25, 0x0207
    119a:	01 2f       	mov	r16, r17
    119c:	28 e0       	ldi	r18, 0x08	; 8
    119e:	47 e2       	ldi	r20, 0x27	; 39
    11a0:	68 2f       	mov	r22, r24
    11a2:	89 2f       	mov	r24, r25
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	0e 94 f8 05 	call	0xbf0 <fillRect>
	draw_Text(menu->name, pos.x+2, pos.y+2, 0, 1, !selected);
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	11 23       	and	r17, r17
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <show_menu+0x42>
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	30 91 08 02 	lds	r19, 0x0208
    11b6:	3e 5f       	subi	r19, 0xFE	; 254
    11b8:	80 91 07 02 	lds	r24, 0x0207
    11bc:	99 27       	eor	r25, r25
    11be:	87 fd       	sbrc	r24, 7
    11c0:	90 95       	com	r25
    11c2:	02 96       	adiw	r24, 0x02	; 2
    11c4:	e2 2e       	mov	r14, r18
    11c6:	01 e0       	ldi	r16, 0x01	; 1
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	43 2f       	mov	r20, r19
    11cc:	bc 01       	movw	r22, r24
    11ce:	88 81       	ld	r24, Y
    11d0:	99 81       	ldd	r25, Y+1	; 0x01
    11d2:	0e 94 9b 03 	call	0x736 <draw_Text>
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ef 90       	pop	r14
    11e0:	08 95       	ret

000011e2 <show_text>:
}

void show_text(void *data, uint8_t selected) {
    11e2:	08 95       	ret

000011e4 <IntProlog>:
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	bf 93       	push	r27
    11ea:	af 93       	push	r26
    11ec:	9f 93       	push	r25
    11ee:	d2 e0       	ldi	r29, 0x02	; 2
    11f0:	c8 e9       	ldi	r28, 0x98	; 152
    11f2:	9f b7       	in	r25, 0x3f	; 63
    11f4:	ae 81       	ldd	r26, Y+6	; 0x06
    11f6:	af 5f       	subi	r26, 0xFF	; 255
    11f8:	ae 83       	std	Y+6, r26	; 0x06
    11fa:	60 f0       	brcs	.+24     	; 0x1214 <SaveContext>
    11fc:	aa 81       	ldd	r26, Y+2	; 0x02
    11fe:	bb 81       	ldd	r27, Y+3	; 0x03
    1200:	ba 2b       	or	r27, r26
    1202:	41 f4       	brne	.+16     	; 0x1214 <SaveContext>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	fe 81       	ldd	r31, Y+6	; 0x06
    120a:	ef 81       	ldd	r30, Y+7	; 0x07
    120c:	29 96       	adiw	r28, 0x09	; 9
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	09 94       	ijmp

00001214 <SaveContext>:
    1214:	8f 93       	push	r24
    1216:	7f 93       	push	r23
    1218:	6f 93       	push	r22
    121a:	5f 93       	push	r21
    121c:	4f 93       	push	r20
    121e:	3f 93       	push	r19
    1220:	2f 93       	push	r18
    1222:	1f 93       	push	r17
    1224:	0f 93       	push	r16
    1226:	ff 92       	push	r15
    1228:	ef 92       	push	r14
    122a:	df 92       	push	r13
    122c:	cf 92       	push	r12
    122e:	bf 92       	push	r11
    1230:	af 92       	push	r10
    1232:	9f 92       	push	r9
    1234:	8f 92       	push	r8
    1236:	7f 92       	push	r7
    1238:	6f 92       	push	r6
    123a:	5f 92       	push	r5
    123c:	4f 92       	push	r4
    123e:	3f 92       	push	r3
    1240:	2f 92       	push	r2
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	9f 93       	push	r25
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    124e:	39 a1       	ldd	r19, Y+33	; 0x21
    1250:	48 a1       	ldd	r20, Y+32	; 0x20
    1252:	e8 a3       	std	Y+32, r30	; 0x20
    1254:	f9 a3       	std	Y+33, r31	; 0x21
    1256:	70 f0       	brcs	.+28     	; 0x1274 <AlreadyInKernel>
    1258:	f2 e0       	ldi	r31, 0x02	; 2
    125a:	e8 e9       	ldi	r30, 0x98	; 152
    125c:	d3 81       	ldd	r29, Z+3	; 0x03
    125e:	c2 81       	ldd	r28, Z+2	; 0x02
    1260:	be b7       	in	r27, 0x3e	; 62
    1262:	ad b7       	in	r26, 0x3d	; 61
    1264:	bd 83       	std	Y+5, r27	; 0x05
    1266:	ac 83       	std	Y+4, r26	; 0x04
    1268:	24 81       	ldd	r18, Z+4	; 0x04
    126a:	2d bf       	out	0x3d, r18	; 61
    126c:	25 81       	ldd	r18, Z+5	; 0x05
    126e:	2e bf       	out	0x3e, r18	; 62
    1270:	ca 2f       	mov	r28, r26
    1272:	db 2f       	mov	r29, r27

00001274 <AlreadyInKernel>:
    1274:	11 24       	eor	r1, r1
    1276:	e3 2f       	mov	r30, r19
    1278:	f4 2f       	mov	r31, r20
    127a:	09 94       	ijmp

0000127c <Epilog>:
    127c:	ef 91       	pop	r30
    127e:	ef 91       	pop	r30

00001280 <_Epilog>:
    1280:	e8 e9       	ldi	r30, 0x98	; 152
    1282:	f2 e0       	ldi	r31, 0x02	; 2
    1284:	f8 94       	cli
    1286:	06 81       	ldd	r16, Z+6	; 0x06
    1288:	0a 95       	dec	r16
    128a:	06 83       	std	Z+6, r16	; 0x06
    128c:	54 f4       	brge	.+20     	; 0x12a2 <SkipTaskSwap>
    128e:	d1 81       	ldd	r29, Z+1	; 0x01
    1290:	c0 81       	ld	r28, Z
    1292:	d3 83       	std	Z+3, r29	; 0x03
    1294:	c2 83       	std	Z+2, r28	; 0x02
    1296:	20 96       	adiw	r28, 0x00	; 0
    1298:	39 f1       	breq	.+78     	; 0x12e8 <_IdleTask>
    129a:	bd 81       	ldd	r27, Y+5	; 0x05
    129c:	ac 81       	ldd	r26, Y+4	; 0x04
    129e:	ad bf       	out	0x3d, r26	; 61
    12a0:	be bf       	out	0x3e, r27	; 62

000012a2 <SkipTaskSwap>:
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	2f 90       	pop	r2
    12ac:	3f 90       	pop	r3
    12ae:	4f 90       	pop	r4
    12b0:	5f 90       	pop	r5
    12b2:	6f 90       	pop	r6
    12b4:	7f 90       	pop	r7
    12b6:	8f 90       	pop	r8
    12b8:	9f 90       	pop	r9
    12ba:	af 90       	pop	r10
    12bc:	bf 90       	pop	r11
    12be:	cf 90       	pop	r12
    12c0:	df 90       	pop	r13
    12c2:	ef 90       	pop	r14
    12c4:	ff 90       	pop	r15
    12c6:	0f 91       	pop	r16
    12c8:	1f 91       	pop	r17
    12ca:	2f 91       	pop	r18
    12cc:	3f 91       	pop	r19
    12ce:	4f 91       	pop	r20
    12d0:	5f 91       	pop	r21
    12d2:	6f 91       	pop	r22
    12d4:	7f 91       	pop	r23
    12d6:	8f 91       	pop	r24
    12d8:	9f 91       	pop	r25
    12da:	af 91       	pop	r26
    12dc:	bf 91       	pop	r27
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	ef 91       	pop	r30
    12e4:	ff 91       	pop	r31
    12e6:	18 95       	reti

000012e8 <_IdleTask>:
    12e8:	78 94       	sei
    12ea:	88 95       	sleep

000012ec <snooze>:
    12ec:	fd cf       	rjmp	.-6      	; 0x12e8 <_IdleTask>

000012ee <AvrXSetKernelStack>:
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	80 50       	subi	r24, 0x00	; 0
    12f4:	90 40       	sbci	r25, 0x00	; 0
    12f6:	11 f4       	brne	.+4      	; 0x12fc <sks1>
    12f8:	8d b7       	in	r24, 0x3d	; 61
    12fa:	9e b7       	in	r25, 0x3e	; 62

000012fc <sks1>:
    12fc:	80 93 9c 02 	sts	0x029C, r24
    1300:	90 93 9d 02 	sts	0x029D, r25
    1304:	09 94       	ijmp

00001306 <AvrXRunTask>:
    1306:	01 d0       	rcall	.+2      	; 0x130a <AvrXInitTask>
    1308:	23 c0       	rjmp	.+70     	; 0x1350 <AvrXResume>

0000130a <AvrXInitTask>:
    130a:	e8 2f       	mov	r30, r24
    130c:	f9 2f       	mov	r31, r25
    130e:	1d d0       	rcall	.+58     	; 0x134a <lpm_inc>
    1310:	a0 2d       	mov	r26, r0
    1312:	1b d0       	rcall	.+54     	; 0x134a <lpm_inc>
    1314:	b0 2d       	mov	r27, r0
    1316:	19 d0       	rcall	.+50     	; 0x134a <lpm_inc>
    1318:	0c 92       	st	X, r0
    131a:	17 d0       	rcall	.+46     	; 0x134a <lpm_inc>
    131c:	0e 92       	st	-X, r0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	51 e2       	ldi	r21, 0x21	; 33

00001324 <PushRegisters>:
    1324:	4e 93       	st	-X, r20
    1326:	5a 95       	dec	r21
    1328:	e9 f7       	brne	.-6      	; 0x1324 <PushRegisters>
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	0e d0       	rcall	.+28     	; 0x134a <lpm_inc>
    132e:	80 2d       	mov	r24, r0
    1330:	0c d0       	rcall	.+24     	; 0x134a <lpm_inc>
    1332:	90 2d       	mov	r25, r0
    1334:	0a d0       	rcall	.+20     	; 0x134a <lpm_inc>
    1336:	e8 2f       	mov	r30, r24
    1338:	f9 2f       	mov	r31, r25
    133a:	a4 83       	std	Z+4, r26	; 0x04
    133c:	b5 83       	std	Z+5, r27	; 0x05
    133e:	03 82       	std	Z+3, r0	; 0x03
    1340:	a0 e6       	ldi	r26, 0x60	; 96
    1342:	a2 83       	std	Z+2, r26	; 0x02
    1344:	41 83       	std	Z+1, r20	; 0x01
    1346:	40 83       	st	Z, r20
    1348:	08 95       	ret

0000134a <lpm_inc>:
    134a:	c8 95       	lpm
    134c:	31 96       	adiw	r30, 0x01	; 1
    134e:	08 95       	ret

00001350 <AvrXResume>:
    1350:	f8 94       	cli
    1352:	48 df       	rcall	.-368    	; 0x11e4 <IntProlog>
    1354:	78 94       	sei
    1356:	e8 2f       	mov	r30, r24
    1358:	f9 2f       	mov	r31, r25
    135a:	22 81       	ldd	r18, Z+2	; 0x02
    135c:	2f 7d       	andi	r18, 0xDF	; 223
    135e:	22 83       	std	Z+2, r18	; 0x02
    1360:	26 ff       	sbrs	r18, 6
    1362:	03 c0       	rjmp	.+6      	; 0x136a <ar00>
    1364:	2f 7b       	andi	r18, 0xBF	; 191
    1366:	22 83       	std	Z+2, r18	; 0x02
    1368:	01 d0       	rcall	.+2      	; 0x136c <_QueuePid>

0000136a <ar00>:
    136a:	8a cf       	rjmp	.-236    	; 0x1280 <_Epilog>

0000136c <_QueuePid>:
    136c:	e8 2f       	mov	r30, r24
    136e:	f9 2f       	mov	r31, r25
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	22 81       	ldd	r18, Z+2	; 0x02
    1374:	20 73       	andi	r18, 0x30	; 48
    1376:	e1 f4       	brne	.+56     	; 0x13b0 <_qpSUSPEND>
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	43 81       	ldd	r20, Z+3	; 0x03
    137e:	c8 e9       	ldi	r28, 0x98	; 152
    1380:	d2 e0       	ldi	r29, 0x02	; 2
    1382:	2f b7       	in	r18, 0x3f	; 63
    1384:	f8 94       	cli

00001386 <_qp00>:
    1386:	33 95       	inc	r19
    1388:	ec 2f       	mov	r30, r28
    138a:	fd 2f       	mov	r31, r29
    138c:	c0 81       	ld	r28, Z
    138e:	d1 81       	ldd	r29, Z+1	; 0x01
    1390:	20 96       	adiw	r28, 0x00	; 0
    1392:	19 f0       	breq	.+6      	; 0x139a <_qp01>
    1394:	5b 81       	ldd	r21, Y+3	; 0x03
    1396:	45 17       	cp	r20, r21
    1398:	b0 f7       	brcc	.-20     	; 0x1386 <_qp00>

0000139a <_qp01>:
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
    139e:	f9 2f       	mov	r31, r25
    13a0:	e8 2f       	mov	r30, r24
    13a2:	d1 83       	std	Z+1, r29	; 0x01
    13a4:	c0 83       	st	Z, r28
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	83 2f       	mov	r24, r19
    13ac:	2f bf       	out	0x3f, r18	; 63
    13ae:	08 95       	ret

000013b0 <_qpSUSPEND>:
    13b0:	83 2f       	mov	r24, r19
    13b2:	20 64       	ori	r18, 0x40	; 64
    13b4:	22 83       	std	Z+2, r18	; 0x02
    13b6:	08 95       	ret

000013b8 <AvrXWaitMessageAck>:
    13b8:	8e 5f       	subi	r24, 0xFE	; 254
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255

000013bc <AvrXWaitSemaphore>:
    13bc:	e8 2f       	mov	r30, r24
    13be:	f9 2f       	mov	r31, r25
    13c0:	f8 94       	cli
    13c2:	20 81       	ld	r18, Z
    13c4:	31 81       	ldd	r19, Z+1	; 0x01
    13c6:	21 50       	subi	r18, 0x01	; 1
    13c8:	30 40       	sbci	r19, 0x00	; 0
    13ca:	19 f4       	brne	.+6      	; 0x13d2 <aws01>
    13cc:	20 83       	st	Z, r18
    13ce:	31 83       	std	Z+1, r19	; 0x01
    13d0:	18 95       	reti

000013d2 <aws01>:
    13d2:	08 df       	rcall	.-496    	; 0x11e4 <IntProlog>
    13d4:	e8 e9       	ldi	r30, 0x98	; 152
    13d6:	f2 e0       	ldi	r31, 0x02	; 2
    13d8:	73 81       	ldd	r23, Z+3	; 0x03
    13da:	62 81       	ldd	r22, Z+2	; 0x02
    13dc:	3c d0       	rcall	.+120    	; 0x1456 <_RemoveObject>
    13de:	e8 2f       	mov	r30, r24
    13e0:	f9 2f       	mov	r31, r25
    13e2:	2b d0       	rcall	.+86     	; 0x143a <_AppendObject>
    13e4:	4d cf       	rjmp	.-358    	; 0x1280 <_Epilog>

000013e6 <AvrXAckMessage>:
    13e6:	8e 5f       	subi	r24, 0xFE	; 254
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255

000013ea <AvrXSetSemaphore>:
    13ea:	0c d0       	rcall	.+24     	; 0x1404 <AvrXIntSetSemaphore>
    13ec:	90 91 9e 02 	lds	r25, 0x029E
    13f0:	93 95       	inc	r25
    13f2:	89 2b       	or	r24, r25
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <axss0>
    13f6:	08 95       	ret

000013f8 <axss0>:
    13f8:	f8 94       	cli
    13fa:	f4 de       	rcall	.-536    	; 0x11e4 <IntProlog>
    13fc:	78 94       	sei
    13fe:	40 cf       	rjmp	.-384    	; 0x1280 <_Epilog>

00001400 <AvrXIntSetObjectSemaphore>:
    1400:	8e 5f       	subi	r24, 0xFE	; 254
    1402:	9f 4f       	sbci	r25, 0xFF	; 255

00001404 <AvrXIntSetSemaphore>:
    1404:	e8 2f       	mov	r30, r24
    1406:	f9 2f       	mov	r31, r25
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	2f b7       	in	r18, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	60 81       	ld	r22, Z
    1414:	86 17       	cp	r24, r22
    1416:	97 07       	cpc	r25, r23
    1418:	28 f0       	brcs	.+10     	; 0x1424 <aiss00>
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01

0000141e <BogusSemaphore>:
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	2f bf       	out	0x3f, r18	; 63
    1422:	08 95       	ret

00001424 <aiss00>:
    1424:	8f e5       	ldi	r24, 0x5F	; 95
    1426:	86 17       	cp	r24, r22
    1428:	97 07       	cpc	r25, r23
    142a:	c8 f7       	brcc	.-14     	; 0x141e <BogusSemaphore>
    142c:	23 d0       	rcall	.+70     	; 0x1474 <_RemoveObjectAt>
    142e:	2f bf       	out	0x3f, r18	; 63
    1430:	86 2f       	mov	r24, r22
    1432:	97 2f       	mov	r25, r23
    1434:	9b cf       	rjmp	.-202    	; 0x136c <_QueuePid>

00001436 <_ao00>:
    1436:	e2 2f       	mov	r30, r18
    1438:	f3 2f       	mov	r31, r19

0000143a <_AppendObject>:
    143a:	20 81       	ld	r18, Z
    143c:	31 81       	ldd	r19, Z+1	; 0x01
    143e:	20 50       	subi	r18, 0x00	; 0
    1440:	30 40       	sbci	r19, 0x00	; 0
    1442:	c9 f7       	brne	.-14     	; 0x1436 <_ao00>
    1444:	71 83       	std	Z+1, r23	; 0x01
    1446:	60 83       	st	Z, r22
    1448:	f7 2f       	mov	r31, r23
    144a:	e6 2f       	mov	r30, r22
    144c:	31 83       	std	Z+1, r19	; 0x01
    144e:	20 83       	st	Z, r18
    1450:	08 95       	ret

00001452 <_ro00>:
    1452:	f3 2f       	mov	r31, r19
    1454:	e2 2f       	mov	r30, r18

00001456 <_RemoveObject>:
    1456:	20 81       	ld	r18, Z
    1458:	31 81       	ldd	r19, Z+1	; 0x01
    145a:	62 17       	cp	r22, r18
    145c:	73 07       	cpc	r23, r19
    145e:	51 f0       	breq	.+20     	; 0x1474 <_RemoveObjectAt>
    1460:	20 50       	subi	r18, 0x00	; 0
    1462:	30 40       	sbci	r19, 0x00	; 0
    1464:	b1 f7       	brne	.-20     	; 0x1452 <_ro00>
    1466:	08 95       	ret

00001468 <_RemoveFirstObject>:
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	60 50       	subi	r22, 0x00	; 0
    146e:	70 40       	sbci	r23, 0x00	; 0
    1470:	09 f4       	brne	.+2      	; 0x1474 <_RemoveObjectAt>
    1472:	08 95       	ret

00001474 <_RemoveObjectAt>:
    1474:	4c 2f       	mov	r20, r28
    1476:	5d 2f       	mov	r21, r29
    1478:	c6 2f       	mov	r28, r22
    147a:	d7 2f       	mov	r29, r23
    147c:	79 81       	ldd	r23, Y+1	; 0x01
    147e:	68 81       	ld	r22, Y
    1480:	71 83       	std	Z+1, r23	; 0x01
    1482:	60 83       	st	Z, r22
    1484:	e6 2f       	mov	r30, r22
    1486:	f7 2f       	mov	r31, r23
    1488:	66 27       	eor	r22, r22
    148a:	68 83       	st	Y, r22
    148c:	69 83       	std	Y+1, r22	; 0x01
    148e:	7d 2f       	mov	r23, r29
    1490:	6c 2f       	mov	r22, r28
    1492:	c4 2f       	mov	r28, r20
    1494:	d5 2f       	mov	r29, r21
    1496:	98 94       	clz
    1498:	08 95       	ret

0000149a <AvrXIntResetObjectSemaphore>:
    149a:	e8 2f       	mov	r30, r24
    149c:	f9 2f       	mov	r31, r25
    149e:	32 96       	adiw	r30, 0x02	; 2
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <ars00>

000014a2 <AvrXIntResetSemaphore>:
    14a2:	f9 2f       	mov	r31, r25
    14a4:	e8 2f       	mov	r30, r24

000014a6 <ars00>:
    14a6:	f8 94       	cli
    14a8:	40 81       	ld	r20, Z
    14aa:	51 81       	ldd	r21, Z+1	; 0x01
    14ac:	41 50       	subi	r20, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <ars01>
    14b2:	4f 5f       	subi	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255

000014b6 <ars01>:
    14b6:	51 83       	std	Z+1, r21	; 0x01
    14b8:	40 83       	st	Z, r20
    14ba:	18 95       	reti

000014bc <AvrXDelay>:
    14bc:	01 d0       	rcall	.+2      	; 0x14c0 <AvrXStartTimer>
    14be:	7c cf       	rjmp	.-264    	; 0x13b8 <AvrXWaitMessageAck>

000014c0 <AvrXStartTimer>:
    14c0:	60 50       	subi	r22, 0x00	; 0
    14c2:	70 40       	sbci	r23, 0x00	; 0
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <CountNotZero>
    14c6:	8f cf       	rjmp	.-226    	; 0x13e6 <AvrXAckMessage>

000014c8 <CountNotZero>:
    14c8:	f8 94       	cli
    14ca:	8c de       	rcall	.-744    	; 0x11e4 <IntProlog>
    14cc:	78 94       	sei
    14ce:	e5 df       	rcall	.-54     	; 0x149a <AvrXIntResetObjectSemaphore>
    14d0:	e0 ea       	ldi	r30, 0xA0	; 160
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	f8 94       	cli
    14d6:	20 91 a2 02 	lds	r18, 0x02A2
    14da:	2a 95       	dec	r18
    14dc:	20 93 a2 02 	sts	0x02A2, r18
    14e0:	78 94       	sei

000014e2 <ast00>:
    14e2:	ce 2f       	mov	r28, r30
    14e4:	df 2f       	mov	r29, r31
    14e6:	e8 81       	ld	r30, Y
    14e8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ea:	30 96       	adiw	r30, 0x00	; 0
    14ec:	59 f0       	breq	.+22     	; 0x1504 <ast01>
    14ee:	24 81       	ldd	r18, Z+4	; 0x04
    14f0:	35 81       	ldd	r19, Z+5	; 0x05
    14f2:	62 1b       	sub	r22, r18
    14f4:	73 0b       	sbc	r23, r19
    14f6:	a8 f7       	brcc	.-22     	; 0x14e2 <ast00>
    14f8:	62 0f       	add	r22, r18
    14fa:	73 1f       	adc	r23, r19
    14fc:	26 1b       	sub	r18, r22
    14fe:	37 0b       	sbc	r19, r23
    1500:	24 83       	std	Z+4, r18	; 0x04
    1502:	35 83       	std	Z+5, r19	; 0x05

00001504 <ast01>:
    1504:	99 83       	std	Y+1, r25	; 0x01
    1506:	88 83       	st	Y, r24
    1508:	d9 2f       	mov	r29, r25
    150a:	c8 2f       	mov	r28, r24
    150c:	f9 83       	std	Y+1, r31	; 0x01
    150e:	e8 83       	st	Y, r30
    1510:	6c 83       	std	Y+4, r22	; 0x04
    1512:	7d 83       	std	Y+5, r23	; 0x05
    1514:	3c d0       	rcall	.+120    	; 0x158e <TimerHandler>
    1516:	b4 ce       	rjmp	.-664    	; 0x1280 <_Epilog>

00001518 <AvrXTimerHandler>:
    1518:	f8 94       	cli
    151a:	20 91 a2 02 	lds	r18, 0x02A2
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	20 93 a2 02 	sts	0x02A2, r18
    1524:	78 94       	sei
    1526:	08 f0       	brcs	.+2      	; 0x152a <ati00>
    1528:	08 95       	ret

0000152a <ati00>:
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	af 93       	push	r26
    1530:	bf 93       	push	r27
    1532:	d0 91 a1 02 	lds	r29, 0x02A1
    1536:	c0 91 a0 02 	lds	r28, 0x02A0
    153a:	20 96       	adiw	r28, 0x00	; 0
    153c:	21 f1       	breq	.+72     	; 0x1586 <ati02>
    153e:	fd 81       	ldd	r31, Y+5	; 0x05
    1540:	ec 81       	ldd	r30, Y+4	; 0x04
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	fd 83       	std	Y+5, r31	; 0x05
    1546:	ec 83       	std	Y+4, r30	; 0x04

00001548 <ati01>:
    1548:	ef 2b       	or	r30, r31
    154a:	e9 f4       	brne	.+58     	; 0x1586 <ati02>
    154c:	a8 81       	ld	r26, Y
    154e:	b9 81       	ldd	r27, Y+1	; 0x01
    1550:	b0 93 a1 02 	sts	0x02A1, r27
    1554:	a0 93 a0 02 	sts	0x02A0, r26
    1558:	f9 83       	std	Y+1, r31	; 0x01
    155a:	e8 83       	st	Y, r30
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	82 50       	subi	r24, 0x02	; 2
    1562:	90 40       	sbci	r25, 0x00	; 0
    1564:	31 f4       	brne	.+12     	; 0x1572 <ati04>
    1566:	8e 81       	ldd	r24, Y+6	; 0x06
    1568:	9f 81       	ldd	r25, Y+7	; 0x07
    156a:	7d 2f       	mov	r23, r29
    156c:	6c 2f       	mov	r22, r28
    156e:	51 d0       	rcall	.+162    	; 0x1612 <AvrXIntSendMessage>
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <ati03>

00001572 <ati04>:
    1572:	8c 2f       	mov	r24, r28
    1574:	9d 2f       	mov	r25, r29
    1576:	44 df       	rcall	.-376    	; 0x1400 <AvrXIntSetObjectSemaphore>

00001578 <ati03>:
    1578:	10 96       	adiw	r26, 0x00	; 0
    157a:	29 f0       	breq	.+10     	; 0x1586 <ati02>
    157c:	ca 2f       	mov	r28, r26
    157e:	db 2f       	mov	r29, r27
    1580:	fd 81       	ldd	r31, Y+5	; 0x05
    1582:	ec 81       	ldd	r30, Y+4	; 0x04
    1584:	e1 cf       	rjmp	.-62     	; 0x1548 <ati01>

00001586 <ati02>:
    1586:	bf 91       	pop	r27
    1588:	af 91       	pop	r26
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28

0000158e <TimerHandler>:
    158e:	f8 94       	cli
    1590:	20 91 a2 02 	lds	r18, 0x02A2
    1594:	23 95       	inc	r18
    1596:	20 93 a2 02 	sts	0x02A2, r18
    159a:	78 94       	sei
    159c:	31 f6       	brne	.-116    	; 0x152a <ati00>
    159e:	08 95       	ret

000015a0 <AvrXReadEEProm>:
    15a0:	68 2f       	mov	r22, r24
    15a2:	79 2f       	mov	r23, r25
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	84 ea       	ldi	r24, 0xA4	; 164
    15a8:	09 df       	rcall	.-494    	; 0x13bc <AvrXWaitSemaphore>

000015aa <are01>:
    15aa:	e1 99       	sbic	0x1c, 1	; 28
    15ac:	fe cf       	rjmp	.-4      	; 0x15aa <are01>
    15ae:	6e bb       	out	0x1e, r22	; 30
    15b0:	7f bb       	out	0x1f, r23	; 31
    15b2:	e0 9a       	sbi	0x1c, 0	; 28
    15b4:	0d b2       	in	r0, 0x1d	; 29
    15b6:	0f 92       	push	r0
    15b8:	18 df       	rcall	.-464    	; 0x13ea <AvrXSetSemaphore>
    15ba:	8f 91       	pop	r24
    15bc:	08 95       	ret

000015be <AvrXReadEEPromWord>:
    15be:	68 2f       	mov	r22, r24
    15c0:	79 2f       	mov	r23, r25
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	84 ea       	ldi	r24, 0xA4	; 164
    15c6:	fa de       	rcall	.-524    	; 0x13bc <AvrXWaitSemaphore>

000015c8 <arew01>:
    15c8:	e1 99       	sbic	0x1c, 1	; 28
    15ca:	fe cf       	rjmp	.-4      	; 0x15c8 <arew01>
    15cc:	6e bb       	out	0x1e, r22	; 30
    15ce:	7f bb       	out	0x1f, r23	; 31
    15d0:	e0 9a       	sbi	0x1c, 0	; 28
    15d2:	0d b2       	in	r0, 0x1d	; 29
    15d4:	0f 92       	push	r0
    15d6:	6f 5f       	subi	r22, 0xFF	; 255
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	6e bb       	out	0x1e, r22	; 30
    15dc:	7f bb       	out	0x1f, r23	; 31
    15de:	e0 9a       	sbi	0x1c, 0	; 28
    15e0:	0d b2       	in	r0, 0x1d	; 29
    15e2:	0f 92       	push	r0
    15e4:	02 df       	rcall	.-508    	; 0x13ea <AvrXSetSemaphore>
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	08 95       	ret

000015ec <AvrXWriteEEProm>:
    15ec:	46 2f       	mov	r20, r22
    15ee:	68 2f       	mov	r22, r24
    15f0:	79 2f       	mov	r23, r25
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	84 ea       	ldi	r24, 0xA4	; 164
    15f6:	e2 de       	rcall	.-572    	; 0x13bc <AvrXWaitSemaphore>

000015f8 <awe00>:
    15f8:	e1 99       	sbic	0x1c, 1	; 28
    15fa:	fe cf       	rjmp	.-4      	; 0x15f8 <awe00>
    15fc:	6e bb       	out	0x1e, r22	; 30
    15fe:	7f bb       	out	0x1f, r23	; 31
    1600:	4d bb       	out	0x1d, r20	; 29
    1602:	e2 9a       	sbi	0x1c, 2	; 28
    1604:	e1 9a       	sbi	0x1c, 1	; 28
    1606:	f1 ce       	rjmp	.-542    	; 0x13ea <AvrXSetSemaphore>

00001608 <AvrXSendMessage>:
    1608:	f8 94       	cli
    160a:	ec dd       	rcall	.-1064   	; 0x11e4 <IntProlog>
    160c:	78 94       	sei
    160e:	01 d0       	rcall	.+2      	; 0x1612 <AvrXIntSendMessage>
    1610:	37 ce       	rjmp	.-914    	; 0x1280 <_Epilog>

00001612 <AvrXIntSendMessage>:
    1612:	f9 2f       	mov	r31, r25
    1614:	e8 2f       	mov	r30, r24
    1616:	11 df       	rcall	.-478    	; 0x143a <_AppendObject>
    1618:	f3 ce       	rjmp	.-538    	; 0x1400 <AvrXIntSetObjectSemaphore>

0000161a <AvrXWaitMessage>:
    161a:	e8 2f       	mov	r30, r24
    161c:	f9 2f       	mov	r31, r25
    161e:	f8 94       	cli
    1620:	23 df       	rcall	.-442    	; 0x1468 <_RemoveFirstObject>
    1622:	78 94       	sei
    1624:	21 f4       	brne	.+8      	; 0x162e <_rm01>
    1626:	c8 de       	rcall	.-624    	; 0x13b8 <AvrXWaitMessageAck>
    1628:	82 50       	subi	r24, 0x02	; 2
    162a:	90 40       	sbci	r25, 0x00	; 0
    162c:	f6 cf       	rjmp	.-20     	; 0x161a <AvrXWaitMessage>

0000162e <_rm01>:
    162e:	35 df       	rcall	.-406    	; 0x149a <AvrXIntResetObjectSemaphore>
    1630:	86 2f       	mov	r24, r22
    1632:	97 2f       	mov	r25, r23
    1634:	08 95       	ret

00001636 <__eeprom_read_byte_1C1D1E>:
    1636:	e1 99       	sbic	0x1c, 1	; 28
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <__eeprom_read_byte_1C1D1E>
    163a:	bf bb       	out	0x1f, r27	; 31
    163c:	ae bb       	out	0x1e, r26	; 30
    163e:	e0 9a       	sbi	0x1c, 0	; 28
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	0d b2       	in	r0, 0x1d	; 29
    1644:	08 95       	ret
