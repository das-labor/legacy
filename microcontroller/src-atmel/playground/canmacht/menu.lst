   1               		.file	"menu.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 123               	.global	menuTcb
 124               		.section	.progmem.data,"a",@progbits
 127               	menuTcb:
 128 0000 0000      		.word	menuStk+134
 129 0002 0000      		.word	pm(menu)
 130 0004 0000      		.word	menuPid
 131 0006 05        		.byte	5
 132               		.data
 133               	.LC0:
 134 0000 2F00      		.string	"/"
 135               	.global	root
 138               	root:
 139 0002 0000      		.word	.LC0
 140 0004 0200      		.word	2
 141 0006 0000      		.word	items_root
 142               	.global	items_root
 145               	items_root:
 146 0008 0000      		.word	ictrl
 147 000a 0000      		.word	iinfo
 148               	.global	ictrl
 151               	ictrl:
 152 000c 0000      		.word	pm(show_menu)
 153 000e 0000      		.word	pm(menu_handler)
 154 0010 0000      		.word	mctrl
 155               	.LC1:
 156 0012 6D61 6368 		.string	"macht"
 156      7400 
 157               	.global	mctrl
 160               	mctrl:
 161 0018 0000      		.word	.LC1
 162 001a 0100      		.word	1
 163 001c 0000      		.word	bla
 164               	.global	iinfo
 167               	iinfo:
 168 001e 0000      		.word	pm(show_menu)
 169 0020 0000      		.word	pm(menu_handler)
 170 0022 0000      		.word	minfo
 171               	.LC2:
 172 0024 7769 7373 		.string	"wissen"
 172      656E 00
 173               	.global	minfo
 176               	minfo:
 177 002b 0000      		.word	.LC2
 178 002d 0100      		.word	1
 179 002f 0000      		.word	its_ctrl
 180               	.global	its_ctrl
 183               	its_ctrl:
 184 0031 0000      		.word	itemp
 185               	.global	itemp
 188               	itemp:
 189 0033 0000      		.word	pm(show_menu)
 190 0035 0000      		.word	pm(menu_handler)
 191 0037 0000      		.word	mtemp
 192               	.LC3:
 193 0039 7465 6D70 		.string	"temp"
 193      00
 194               	.global	mtemp
 197               	mtemp:
 198 003e 0000      		.word	.LC3
 199 0040 0100      		.word	1
 200 0042 0000      		.word	bla
 201               	.global	bla
 204               	bla:
 205 0044 0000      		.word	mi_i0
 206               	.global	mi_i0
 209               	mi_i0:
 210 0046 0000      		.word	pm(show_text)
 211 0048 0000      		.word	pm(menu_handler)
 212 004a 0000      		.word	root
 213               		.text
 215               	.global	getKey
 217               	getKey:
   1:menu.c        **** #include <avr/io.h>
   2:menu.c        **** #include <avrx-io.h>
   3:menu.c        **** #include <stdint.h>
   4:menu.c        **** #include <avr/interrupt.h>
   5:menu.c        **** #include <avr/pgmspace.h>
   6:menu.c        **** #include "avrx.h"               // AvrX System calls/data structures
   7:menu.c        **** #include "config.h"
   8:menu.c        **** #include "xcan.h"
   9:menu.c        **** #include "menu.h"
  10:menu.c        **** #include "text.h"
  11:menu.c        **** #include "grafiklcd.h"
  12:menu.c        **** 
  13:menu.c        **** struct {
  14:menu.c        **** 	int8_t x;
  15:menu.c        **** 	int8_t y;
  16:menu.c        **** 	} pos;
  17:menu.c        **** 
  18:menu.c        **** extern menu_t root;
  19:menu.c        **** 
  20:menu.c        **** menu_item_t mi_i0 = {&show_text, &menu_handler, &root};
  21:menu.c        **** menu_item_t *bla[] = {&mi_i0};
  22:menu.c        **** 
  23:menu.c        **** 
  24:menu.c        **** menu_t mtemp = {"temp", 1, bla};
  25:menu.c        **** menu_item_t itemp = {&show_menu, &menu_handler, &mtemp};
  26:menu.c        **** menu_item_t *its_ctrl[] = {&itemp};
  27:menu.c        **** menu_t minfo = {"wissen", 1, its_ctrl};
  28:menu.c        **** menu_item_t iinfo = {&show_menu, &menu_handler, &minfo};
  29:menu.c        **** 
  30:menu.c        **** 
  31:menu.c        **** //menu_t it_mood = {&mood};
  32:menu.c        **** menu_t mctrl = {"macht", 1, bla};
  33:menu.c        **** menu_item_t ictrl = {&show_menu, &menu_handler, &mctrl};
  34:menu.c        **** 
  35:menu.c        **** menu_item_t *items_root[] = {
  36:menu.c        **** 	&ictrl, &iinfo//, &mi_i0
  37:menu.c        **** };
  38:menu.c        **** menu_t root = {"/", 2, items_root};
  39:menu.c        **** TimerControlBlock switchtimer;
  40:menu.c        **** 
  41:menu.c        **** AVRX_GCC_TASKDEF(menu, 100, 5) {
  42:menu.c        **** //	uint8_t state, oldstate = 0;
  43:menu.c        **** 	menu_handler(&root);
  44:menu.c        **** 	while (1) {
  45:menu.c        **** 	}
  46:menu.c        **** }
  47:menu.c        **** uint8_t getKey() {
 219               	.LM1:
 220               	/* prologue: frame size=0 */
 221               	/* prologue end (size=0) */
  48:menu.c        **** 	AvrXDelay(&switchtimer, 600);
 223               	.LM2:
 224 0000 68E5      		ldi r22,lo8(600)
 225 0002 72E0      		ldi r23,hi8(600)
 226 0004 80E0      		ldi r24,lo8(switchtimer)
 227 0006 90E0      		ldi r25,hi8(switchtimer)
 228 0008 0E94 0000 		call AvrXDelay
 229               	.L2:
  49:menu.c        **** 	while(1) {
  50:menu.c        **** 
  51:menu.c        **** 		if(!(PINA & (1 << PA0))) {
 231               	.LM3:
 232 000c 89B3      		in r24,57-0x20
 233 000e 9927      		clr r25
 234 0010 9C01      		movw r18,r24
 235 0012 2170      		andi r18,lo8(1)
 236 0014 3070      		andi r19,hi8(1)
 237 0016 80FD      		sbrc r24,0
 238 0018 02C0      		rjmp .L4
  52:menu.c        **** 			return 0;
 240               	.LM4:
 241 001a C901      		movw r24,r18
 242 001c 0895      		ret
 243               	.L4:
  53:menu.c        **** 		}
  54:menu.c        **** 		if(!(PINA & (1 << PA1))) {
 245               	.LM5:
 246 001e C999      		sbic 57-0x20,1
 247 0020 03C0      		rjmp .L5
  55:menu.c        **** 			return 1;
 249               	.LM6:
 250 0022 81E0      		ldi r24,lo8(1)
 251 0024 90E0      		ldi r25,hi8(1)
 252 0026 0895      		ret
 253               	.L5:
  56:menu.c        **** 		}
  57:menu.c        **** 		if(!(PINA & (1 << PA2))) {
 255               	.LM7:
 256 0028 CA99      		sbic 57-0x20,2
 257 002a 03C0      		rjmp .L6
  58:menu.c        **** 			return 2;
 259               	.LM8:
 260 002c 82E0      		ldi r24,lo8(2)
 261 002e 90E0      		ldi r25,hi8(2)
 262 0030 0895      		ret
 263               	.L6:
  59:menu.c        **** 		}
  60:menu.c        **** 		if(!(PINA & (1 << PA3))) {
 265               	.LM9:
 266 0032 CB99      		sbic 57-0x20,3
 267 0034 EBCF      		rjmp .L2
  61:menu.c        **** 			return 3;
 269               	.LM10:
 270 0036 83E0      		ldi r24,lo8(3)
 271 0038 90E0      		ldi r25,hi8(3)
  62:menu.c        **** 		}
  63:menu.c        **** 	}
  64:menu.c        **** }
 273               	.LM11:
 274 003a 0895      		ret
 275               	/* epilogue: frame size=0 */
 276               	/* epilogue: noreturn */
 277               	/* epilogue end (size=0) */
 278               	/* function getKey size 30 (30) */
 280               	.Lscope0:
 283               	.global	menu_handler
 285               	menu_handler:
  65:menu.c        **** 
  66:menu.c        **** void menu_handler(void *data) {
 287               	.LM12:
 288               	/* prologue: frame size=0 */
 289 003c 0F93      		push r16
 290 003e 1F93      		push r17
 291 0040 CF93      		push r28
 292 0042 DF93      		push r29
 293               	/* prologue end (size=4) */
 294 0044 EC01      		movw r28,r24
  67:menu.c        **** 	menu_t *menu = data;
  68:menu.c        **** 	uint8_t i, key;
  69:menu.c        **** 	int8_t sel = 0;
 296               	.LM13:
 297 0046 10E0      		ldi r17,lo8(0)
 298               	.L9:
  70:menu.c        **** 	DRAW_MEN:
  71:menu.c        **** 	pos.y = 0;
 300               	.LM14:
 301 0048 1092 0000 		sts pos+1,__zero_reg__
  72:menu.c        **** 
  73:menu.c        **** 	fillRect(pos.y, pos.x, 41, 10*menu->size, 0);
 303               	.LM15:
 304 004c 8A81      		ldd r24,Y+2
 305 004e 9B81      		ldd r25,Y+3
 306 0050 9C01      		movw r18,r24
 307 0052 53E0      		ldi r21,3
 308 0054 220F      	1:	lsl r18
 309 0056 331F      		rol r19
 310 0058 5A95      		dec r21
 311 005a E1F7      		brne 1b
 312 005c 280F      		add r18,r24
 313 005e 391F      		adc r19,r25
 314 0060 280F      		add r18,r24
 315 0062 391F      		adc r19,r25
 316 0064 0091 0000 		lds r16,pos+1
 317 0068 49E2      		ldi r20,lo8(41)
 318 006a 6091 0000 		lds r22,pos
 319 006e 802F      		mov r24,r16
 320 0070 0E94 0000 		call fillRect
  74:menu.c        **** 
  75:menu.c        **** 	for(i = 0; i < menu->size; i++) {
 322               	.LM16:
 323 0074 8A81      		ldd r24,Y+2
 324 0076 9B81      		ldd r25,Y+3
 325 0078 892B      		or r24,r25
 326 007a 59F1      		breq .L30
 327               	.L15:
  76:menu.c        **** 		menu->items[i]->show(menu->items[i]->data, (sel==i));
 329               	.LM17:
 330 007c 202F      		mov r18,r16
 331 007e 3327      		clr r19
 332 0080 F901      		movw r30,r18
 333 0082 E20F      		add r30,r18
 334 0084 F31F      		adc r31,r19
 335 0086 8C81      		ldd r24,Y+4
 336 0088 9D81      		ldd r25,Y+5
 337 008a E80F      		add r30,r24
 338 008c F91F      		adc r31,r25
 339 008e A081      		ld r26,Z
 340 0090 B181      		ldd r27,Z+1
 341 0092 60E0      		ldi r22,lo8(0)
 342 0094 812F      		mov r24,r17
 343 0096 9927      		clr r25
 344 0098 87FD      		sbrc r24,7
 345 009a 9095      		com r25
 346 009c 8217      		cp r24,r18
 347 009e 9307      		cpc r25,r19
 348 00a0 09F4      		brne .L13
 349 00a2 61E0      		ldi r22,lo8(1)
 350               	.L13:
 351 00a4 2D91      		ld r18,X+
 352 00a6 3C91      		ld r19,X
 353 00a8 1197      		sbiw r26,1
 354 00aa FD01      		movw r30,r26
 355 00ac 8481      		ldd r24,Z+4
 356 00ae 9581      		ldd r25,Z+5
 357 00b0 F901      		movw r30,r18
 358 00b2 0995      		icall
  77:menu.c        **** 		pos.y += 9;		
 360               	.LM18:
 361 00b4 8091 0000 		lds r24,pos+1
 362 00b8 875F      		subi r24,lo8(-(9))
 363 00ba 8093 0000 		sts pos+1,r24
  78:menu.c        **** 		if(i >= 6)
 365               	.LM19:
 366 00be 0630      		cpi r16,lo8(6)
 367 00c0 40F4      		brsh .L30
 369               	.LM20:
 370 00c2 0F5F      		subi r16,lo8(-(1))
 371 00c4 202F      		mov r18,r16
 372 00c6 3327      		clr r19
 373 00c8 8A81      		ldd r24,Y+2
 374 00ca 9B81      		ldd r25,Y+3
 375 00cc 2817      		cp r18,r24
 376 00ce 3907      		cpc r19,r25
 377 00d0 A8F2      		brlo .L15
 378               	.L30:
  79:menu.c        **** 			break;
  80:menu.c        **** 	}
  81:menu.c        **** 	while(1) {  // keyhandeling
  82:menu.c        **** 	key = getKey();
 380               	.LM21:
 381 00d2 0E94 0000 		call getKey
 382 00d6 082F      		mov r16,r24
  83:menu.c        **** 		// enter
  84:menu.c        **** 		if(key == 2) {
 384               	.LM22:
 385 00d8 8230      		cpi r24,lo8(2)
 386 00da 41F5      		brne .L18
  85:menu.c        **** 			fillRect(0, pos.x, 41, 10*menu->size, 0);
 388               	.LM23:
 389 00dc 2A81      		ldd r18,Y+2
 390 00de 3B81      		ldd r19,Y+3
 391 00e0 C901      		movw r24,r18
 392 00e2 43E0      		ldi r20,3
 393 00e4 880F      	1:	lsl r24
 394 00e6 991F      		rol r25
 395 00e8 4A95      		dec r20
 396 00ea E1F7      		brne 1b
 397 00ec 820F      		add r24,r18
 398 00ee 931F      		adc r25,r19
 399 00f0 820F      		add r24,r18
 400 00f2 931F      		adc r25,r19
 401 00f4 00E0      		ldi r16,lo8(0)
 402 00f6 282F      		mov r18,r24
 403 00f8 49E2      		ldi r20,lo8(41)
 404 00fa 6091 0000 		lds r22,pos
 405 00fe 802F      		mov r24,r16
 406 0100 0E94 0000 		call fillRect
  86:menu.c        **** 			//pos.x += 20;
  87:menu.c        **** 			menu->items[sel]->enter(menu->items[sel]->data); // enter
 408               	.LM24:
 409 0104 E12F      		mov r30,r17
 410 0106 FF27      		clr r31
 411 0108 E7FD      		sbrc r30,7
 412 010a F095      		com r31
 413 010c EE0F      		add r30,r30
 414 010e FF1F      		adc r31,r31
 415 0110 8C81      		ldd r24,Y+4
 416 0112 9D81      		ldd r25,Y+5
 417 0114 E80F      		add r30,r24
 418 0116 F91F      		adc r31,r25
 419 0118 0190      		ld __tmp_reg__,Z+
 420 011a F081      		ld r31,Z
 421 011c E02D      		mov r30,__tmp_reg__
 422 011e 2281      		ldd r18,Z+2
 423 0120 3381      		ldd r19,Z+3
 424 0122 8481      		ldd r24,Z+4
 425 0124 9581      		ldd r25,Z+5
 426 0126 F901      		movw r30,r18
 427 0128 0995      		icall
  88:menu.c        **** 			
  89:menu.c        **** 			goto DRAW_MEN;
 429               	.LM25:
 430 012a 8ECF      		rjmp .L9
 431               	.L18:
  90:menu.c        **** 		}
  91:menu.c        **** 
  92:menu.c        **** 	// zurück
  93:menu.c        **** 		if(key == 3) {
 433               	.LM26:
 434 012c 8330      		cpi r24,lo8(3)
 435 012e 39F4      		brne .L19
  94:menu.c        **** 			//fillRect(0, pos.x, 41, 10*menu->size, 1);
  95:menu.c        **** 			//pos.x -= 20;
  96:menu.c        **** 			if(menu->name != "/")
 437               	.LM27:
 438 0130 8881      		ld r24,Y
 439 0132 9981      		ldd r25,Y+1
 440 0134 8050      		subi r24,lo8(.LC0)
 441 0136 9040      		sbci r25,hi8(.LC0)
 442 0138 09F0      		breq .+2
 443 013a 4EC0      		rjmp .L8
 444 013c CACF      		rjmp .L30
 445               	.L19:
  97:menu.c        **** 				return;
  98:menu.c        **** 		}
  99:menu.c        **** 	//	up down
 100:menu.c        **** 		if(key < 2) {
 447               	.LM28:
 448 013e 8230      		cpi r24,lo8(2)
 449 0140 40F6      		brsh .L30
 101:menu.c        **** 			pos.y = sel*9;
 451               	.LM29:
 452 0142 29E0      		ldi r18,lo8(9)
 453 0144 1202      		muls r17,r18
 454 0146 C001      		movw r24,r0
 455 0148 1124      		clr r1
 456 014a 8093 0000 		sts pos+1,r24
 102:menu.c        **** 			menu->items[sel]->show(menu->items[sel]->data, 0);
 458               	.LM30:
 459 014e E12F      		mov r30,r17
 460 0150 FF27      		clr r31
 461 0152 E7FD      		sbrc r30,7
 462 0154 F095      		com r31
 463 0156 EE0F      		add r30,r30
 464 0158 FF1F      		adc r31,r31
 465 015a 8C81      		ldd r24,Y+4
 466 015c 9D81      		ldd r25,Y+5
 467 015e E80F      		add r30,r24
 468 0160 F91F      		adc r31,r25
 469 0162 0190      		ld __tmp_reg__,Z+
 470 0164 F081      		ld r31,Z
 471 0166 E02D      		mov r30,__tmp_reg__
 472 0168 2081      		ld r18,Z
 473 016a 3181      		ldd r19,Z+1
 474 016c 60E0      		ldi r22,lo8(0)
 475 016e 8481      		ldd r24,Z+4
 476 0170 9581      		ldd r25,Z+5
 477 0172 F901      		movw r30,r18
 478 0174 0995      		icall
 103:menu.c        **** 			if(key == 1)
 480               	.LM31:
 481 0176 0130      		cpi r16,lo8(1)
 482 0178 11F4      		brne .L22
 104:menu.c        **** 				sel++;
 484               	.LM32:
 485 017a 1F5F      		subi r17,lo8(-(1))
 486 017c 03C0      		rjmp .L23
 487               	.L22:
 105:menu.c        **** 			if(key == 0)
 489               	.LM33:
 490 017e 0023      		tst r16
 491 0180 09F4      		brne .L23
 106:menu.c        **** 				sel--;
 493               	.LM34:
 494 0182 1150      		subi r17,lo8(-(-1))
 495               	.L23:
 107:menu.c        **** 			if(sel == menu->size)
 497               	.LM35:
 498 0184 212F      		mov r18,r17
 499 0186 3327      		clr r19
 500 0188 27FD      		sbrc r18,7
 501 018a 3095      		com r19
 502 018c 8A81      		ldd r24,Y+2
 503 018e 9B81      		ldd r25,Y+3
 504 0190 2817      		cp r18,r24
 505 0192 3907      		cpc r19,r25
 506 0194 11F4      		brne .L24
 108:menu.c        **** 				sel = 0;
 508               	.LM36:
 509 0196 10E0      		ldi r17,lo8(0)
 510 0198 04C0      		rjmp .L25
 511               	.L24:
 109:menu.c        **** 			if(sel < 0)
 513               	.LM37:
 514 019a 17FF      		sbrs r17,7
 515 019c 02C0      		rjmp .L25
 110:menu.c        **** 				sel = menu->size - 1;
 517               	.LM38:
 518 019e 1A81      		ldd r17,Y+2
 519 01a0 1150      		subi r17,lo8(-(-1))
 520               	.L25:
 111:menu.c        **** 			pos.y = sel*9;
 522               	.LM39:
 523 01a2 E9E0      		ldi r30,lo8(9)
 524 01a4 1E02      		muls r17,r30
 525 01a6 C001      		movw r24,r0
 526 01a8 1124      		clr r1
 527 01aa 8093 0000 		sts pos+1,r24
 112:menu.c        **** 			menu->items[sel]->show(menu->items[sel]->data, 1);
 529               	.LM40:
 530 01ae E12F      		mov r30,r17
 531 01b0 FF27      		clr r31
 532 01b2 E7FD      		sbrc r30,7
 533 01b4 F095      		com r31
 534 01b6 EE0F      		add r30,r30
 535 01b8 FF1F      		adc r31,r31
 536 01ba 8C81      		ldd r24,Y+4
 537 01bc 9D81      		ldd r25,Y+5
 538 01be E80F      		add r30,r24
 539 01c0 F91F      		adc r31,r25
 540 01c2 0190      		ld __tmp_reg__,Z+
 541 01c4 F081      		ld r31,Z
 542 01c6 E02D      		mov r30,__tmp_reg__
 543 01c8 2081      		ld r18,Z
 544 01ca 3181      		ldd r19,Z+1
 545 01cc 61E0      		ldi r22,lo8(1)
 546 01ce 8481      		ldd r24,Z+4
 547 01d0 9581      		ldd r25,Z+5
 548 01d2 F901      		movw r30,r18
 549 01d4 0995      		icall
 550 01d6 7DCF      		rjmp .L30
 551               	.L8:
 552               	/* epilogue: frame size=0 */
 553 01d8 DF91      		pop r29
 554 01da CF91      		pop r28
 555 01dc 1F91      		pop r17
 556 01de 0F91      		pop r16
 557 01e0 0895      		ret
 558               	/* epilogue end (size=5) */
 559               	/* function menu_handler size 212 (203) */
 567               	.Lscope1:
 569               	.global	menu
 571               	menu:
 573               	.LM41:
 574               	/* prologue: frame size=0 */
 575               	/* prologue end (size=0) */
 577               	.LM42:
 578 01e2 80E0      		ldi r24,lo8(root)
 579 01e4 90E0      		ldi r25,hi8(root)
 580 01e6 0E94 0000 		call menu_handler
 581               	.L32:
 583               	.LM43:
 584 01ea FFCF      		rjmp .L32
 585               	/* epilogue: frame size=0 */
 586               	/* epilogue: noreturn */
 587               	/* epilogue end (size=0) */
 588               	/* function menu size 5 (5) */
 590               	.Lscope2:
 594               	.global	show_menu
 596               	show_menu:
 113:menu.c        **** 		}
 114:menu.c        **** 	}
 115:menu.c        **** }
 116:menu.c        **** 
 117:menu.c        **** void show_menu(void *data, uint8_t selected) {
 598               	.LM44:
 599               	/* prologue: frame size=0 */
 600 01ec EF92      		push r14
 601 01ee 0F93      		push r16
 602 01f0 1F93      		push r17
 603 01f2 CF93      		push r28
 604 01f4 DF93      		push r29
 605               	/* prologue end (size=5) */
 606 01f6 EC01      		movw r28,r24
 607 01f8 162F      		mov r17,r22
 118:menu.c        **** 	menu_t *menu = data;
 119:menu.c        **** 	dispDrawRect(pos.x, pos.y, 40, 9, 1);
 609               	.LM45:
 610 01fa 01E0      		ldi r16,lo8(1)
 611 01fc 29E0      		ldi r18,lo8(9)
 612 01fe 48E2      		ldi r20,lo8(40)
 613 0200 6091 0000 		lds r22,pos+1
 614 0204 8091 0000 		lds r24,pos
 615 0208 0E94 0000 		call dispDrawRect
 120:menu.c        **** 	fillRect(pos.x+1, pos.y+1, 39, 8, selected);
 617               	.LM46:
 618 020c 8091 0000 		lds r24,pos+1
 619 0210 800F      		add r24,r16
 620 0212 9091 0000 		lds r25,pos
 621 0216 012F      		mov r16,r17
 622 0218 28E0      		ldi r18,lo8(8)
 623 021a 47E2      		ldi r20,lo8(39)
 624 021c 682F      		mov r22,r24
 625 021e 892F      		mov r24,r25
 626 0220 8F5F      		subi r24,lo8(-(1))
 627 0222 0E94 0000 		call fillRect
 121:menu.c        **** 	draw_Text(menu->name, pos.x+2, pos.y+2, 0, 1, !selected);
 629               	.LM47:
 630 0226 20E0      		ldi r18,lo8(0)
 631 0228 1123      		tst r17
 632 022a 09F4      		brne .L35
 634               	.LM48:
 635 022c 21E0      		ldi r18,lo8(1)
 636               	.L35:
 637 022e 3091 0000 		lds r19,pos+1
 638 0232 3E5F      		subi r19,lo8(-(2))
 639 0234 8091 0000 		lds r24,pos
 640 0238 9927      		clr r25
 641 023a 87FD      		sbrc r24,7
 642 023c 9095      		com r25
 643 023e 0296      		adiw r24,2
 644 0240 E22E      		mov r14,r18
 645 0242 01E0      		ldi r16,lo8(1)
 646 0244 20E0      		ldi r18,lo8(0)
 647 0246 432F      		mov r20,r19
 648 0248 BC01      		movw r22,r24
 649 024a 8881      		ld r24,Y
 650 024c 9981      		ldd r25,Y+1
 651 024e 0E94 0000 		call draw_Text
 652               	/* epilogue: frame size=0 */
 653 0252 DF91      		pop r29
 654 0254 CF91      		pop r28
 655 0256 1F91      		pop r17
 656 0258 0F91      		pop r16
 657 025a EF90      		pop r14
 658 025c 0895      		ret
 659               	/* epilogue end (size=6) */
 660               	/* function show_menu size 57 (46) */
 662               	.Lscope3:
 666               	.global	show_text
 668               	show_text:
 122:menu.c        **** }
 123:menu.c        **** 
 124:menu.c        **** void show_text(void *data, uint8_t selected) {
 670               	.LM49:
 671               	/* prologue: frame size=0 */
 672               	/* prologue end (size=0) */
 673               	/* epilogue: frame size=0 */
 674 025e 0895      		ret
 675               	/* epilogue end (size=1) */
 676               	/* function show_text size 1 (0) */
 678               	.Lscope4:
 679               		.comm menuPid,6,1
 680               		.comm pos,2,1
 681               		.comm switchtimer,6,1
 682               		.comm menuStk,135,1
 699               		.text
 701               	Letext:
 702               	/* File "menu.c": code  305 = 0x0131 ( 284), prologues   9, epilogues  12 */
DEFINED SYMBOLS
                            *ABS*:00000000 menu.c
     /tmp/ccWFPERD.s:3      *ABS*:0000003f __SREG__
     /tmp/ccWFPERD.s:4      *ABS*:0000003e __SP_H__
     /tmp/ccWFPERD.s:5      *ABS*:0000003d __SP_L__
     /tmp/ccWFPERD.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccWFPERD.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccWFPERD.s:127    .progmem.data:00000000 menuTcb
                            *COM*:00000087 menuStk
     /tmp/ccWFPERD.s:571    .text:000001e2 menu
                            *COM*:00000006 menuPid
     /tmp/ccWFPERD.s:138    .data:00000002 root
     /tmp/ccWFPERD.s:145    .data:00000008 items_root
     /tmp/ccWFPERD.s:151    .data:0000000c ictrl
     /tmp/ccWFPERD.s:167    .data:0000001e iinfo
     /tmp/ccWFPERD.s:596    .text:000001ec show_menu
     /tmp/ccWFPERD.s:285    .text:0000003c menu_handler
     /tmp/ccWFPERD.s:160    .data:00000018 mctrl
     /tmp/ccWFPERD.s:204    .data:00000044 bla
     /tmp/ccWFPERD.s:176    .data:0000002b minfo
     /tmp/ccWFPERD.s:183    .data:00000031 its_ctrl
     /tmp/ccWFPERD.s:188    .data:00000033 itemp
     /tmp/ccWFPERD.s:197    .data:0000003e mtemp
     /tmp/ccWFPERD.s:209    .data:00000046 mi_i0
     /tmp/ccWFPERD.s:668    .text:0000025e show_text
     /tmp/ccWFPERD.s:217    .text:00000000 getKey
                            *COM*:00000006 switchtimer
                            *COM*:00000002 pos
     /tmp/ccWFPERD.s:701    .text:00000260 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
AvrXDelay
fillRect
dispDrawRect
draw_Text
