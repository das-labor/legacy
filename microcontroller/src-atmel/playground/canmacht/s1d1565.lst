   1               		.file	"s1d1565.c"
   2               		.arch atmega32
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  74               	.global	dispEnable
  76               	dispEnable:
   1:s1d1565.c     **** #include <avr/io.h>
   2:s1d1565.c     **** 
   3:s1d1565.c     **** #include "s1d1565.h"
   4:s1d1565.c     **** 
   5:s1d1565.c     **** #define RS		2
   6:s1d1565.c     **** #define	CS		1
   7:s1d1565.c     **** #define A0		3
   8:s1d1565.c     **** #define RW		5
   9:s1d1565.c     **** #define EN		4
  10:s1d1565.c     **** 
  11:s1d1565.c     **** #define LCD_DATA_OUT	PORTD	//Port für D0-7
  12:s1d1565.c     **** #define LCD_DATA_IN	PIND
  13:s1d1565.c     **** #define LCDDD	DDRD
  14:s1d1565.c     **** 
  15:s1d1565.c     **** #define LCD_CMD_PORT	PORTB	//Port für Steuerleitungen
  16:s1d1565.c     **** #define LCDCDD	DDRB
  17:s1d1565.c     **** 
  18:s1d1565.c     **** void dispWriteCommand (unsigned char byte) {
  19:s1d1565.c     ****   LCD_CMD_PORT &= ~(0x01 << A0);
  20:s1d1565.c     ****   LCD_DATA_OUT = byte;
  21:s1d1565.c     ****   LCD_CMD_PORT &= ~(0x01 << CS);
  22:s1d1565.c     ****   dispEnable();
  23:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << CS);
  24:s1d1565.c     **** }
  25:s1d1565.c     **** 
  26:s1d1565.c     **** void dispWriteByte (unsigned char byte) {
  27:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << A0);
  28:s1d1565.c     ****   LCD_DATA_OUT = byte;
  29:s1d1565.c     ****   LCD_CMD_PORT &= ~(0x01 << CS);
  30:s1d1565.c     ****   dispEnable();
  31:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << CS);
  32:s1d1565.c     **** }
  33:s1d1565.c     **** 
  34:s1d1565.c     **** void dispInit(void) {        //Initialize LCD
  35:s1d1565.c     ****   LCDDD = 0xFF;
  36:s1d1565.c     ****   LCDCDD |= (0x01 << EN) | (0x01 << A0) | (0x01 << CS) | (0x01 << RS) | 0x01 << RW;
  37:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << CS) | (0x01 << RS);
  38:s1d1565.c     **** 
  39:s1d1565.c     **** 	dispWriteCommand(0x40);		// Start Display Line = 0
  40:s1d1565.c     **** 	dispWriteCommand(0xA0);		// ADC = normal (Anzeigerichtung nicht gespiegelt)
  41:s1d1565.c     **** 	dispWriteCommand(0xA3);		// LCD-Bias = 1/7 für 4,5-5,5V    1/9 für 3,3-4,5V
  42:s1d1565.c     **** 	dispWriteCommand(0xC0);		// Output Mode = nicht gespiegelt
  43:s1d1565.c     **** 	dispWriteCommand(0x2F);		// LCD-Spannungserzeugung/Regelung einschalten
  44:s1d1565.c     **** 	dispWriteCommand(0x20);		// V5 Regulator Resistor Ratio = 0
  45:s1d1565.c     **** 	dispWriteCommand(0xAC);		// Static Indicator off
  46:s1d1565.c     **** 	dispWriteCommand(0x81);		// Kontrasteinstellung auswählen
  47:s1d1565.c     **** 	dispWriteCommand(32);		// Kontrast = mittel (für Bias 1/7: 20-50, für 1/9: 2-10)
  48:s1d1565.c     **** 	dispWriteCommand(0xA4);		// Displaytest aus
  49:s1d1565.c     **** 	dispWriteCommand(0xAF);		// Display ein
  50:s1d1565.c     **** 	dispWriteCommand(0xA6);		// Display normal (nicht invertiert)
  51:s1d1565.c     **** 	dispClear();
  52:s1d1565.c     **** }
  53:s1d1565.c     **** 
  54:s1d1565.c     **** void dispClear(void) {
  55:s1d1565.c     ****   unsigned char x, y;
  56:s1d1565.c     ****   for (y = 0; y < 8; y++) {
  57:s1d1565.c     ****     dispGotoXY (0, y);
  58:s1d1565.c     **** 	for (x = 0; x < 128; x++)
  59:s1d1565.c     **** 	  dispWriteByte(0);
  60:s1d1565.c     ****   }
  61:s1d1565.c     ****   dispGotoXY (0, 0);
  62:s1d1565.c     **** }
  63:s1d1565.c     **** 
  64:s1d1565.c     **** void dispGotoXY (uint8_t x, uint8_t y) {
  65:s1d1565.c     **** 	dispWriteCommand(0xB0|y);
  66:s1d1565.c     **** 	dispWriteCommand(0x10|(x/16));
  67:s1d1565.c     **** 	dispWriteCommand(x&15);
  68:s1d1565.c     **** }
  69:s1d1565.c     **** 
  70:s1d1565.c     **** void dispEnable (void) {
  78               	.LM1:
  79               	/* prologue: frame size=0 */
  80               	/* prologue end (size=0) */
  71:s1d1565.c     **** 	LCD_CMD_PORT |= (0x01 << EN);
  82               	.LM2:
  83 0000 C49A      		sbi 56-0x20,4
  72:s1d1565.c     **** 	LCD_CMD_PORT &= ~(0x01 << EN);
  85               	.LM3:
  86 0002 C498      		cbi 56-0x20,4
  87               	/* epilogue: frame size=0 */
  88 0004 0895      		ret
  89               	/* epilogue end (size=1) */
  90               	/* function dispEnable size 3 (2) */
  92               	.Lscope0:
  95               	.global	dispWriteCommand
  97               	dispWriteCommand:
  99               	.LM4:
 100               	/* prologue: frame size=0 */
 101               	/* prologue end (size=0) */
 103               	.LM5:
 104 0006 C398      		cbi 56-0x20,3
 106               	.LM6:
 107 0008 82BB      		out 50-0x20,r24
 109               	.LM7:
 110 000a C198      		cbi 56-0x20,1
 112               	.LM8:
 113 000c 0E94 0000 		call dispEnable
 115               	.LM9:
 116 0010 C19A      		sbi 56-0x20,1
 117               	/* epilogue: frame size=0 */
 118 0012 0895      		ret
 119               	/* epilogue end (size=1) */
 120               	/* function dispWriteCommand size 7 (6) */
 122               	.Lscope1:
 125               	.global	dispWriteByte
 127               	dispWriteByte:
 129               	.LM10:
 130               	/* prologue: frame size=0 */
 131               	/* prologue end (size=0) */
 133               	.LM11:
 134 0014 C39A      		sbi 56-0x20,3
 136               	.LM12:
 137 0016 82BB      		out 50-0x20,r24
 139               	.LM13:
 140 0018 C198      		cbi 56-0x20,1
 142               	.LM14:
 143 001a 0E94 0000 		call dispEnable
 145               	.LM15:
 146 001e C19A      		sbi 56-0x20,1
 147               	/* epilogue: frame size=0 */
 148 0020 0895      		ret
 149               	/* epilogue end (size=1) */
 150               	/* function dispWriteByte size 7 (6) */
 152               	.Lscope2:
 156               	.global	dispGotoXY
 158               	dispGotoXY:
 160               	.LM16:
 161               	/* prologue: frame size=0 */
 162 0022 1F93      		push r17
 163               	/* prologue end (size=1) */
 164 0024 182F      		mov r17,r24
 165 0026 862F      		mov r24,r22
 167               	.LM17:
 168 0028 806B      		ori r24,lo8(-80)
 169 002a 0E94 0000 		call dispWriteCommand
 171               	.LM18:
 172 002e 812F      		mov r24,r17
 173 0030 8295      		swap r24
 174 0032 8F70      		andi r24,0x0f
 175 0034 8061      		ori r24,lo8(16)
 176 0036 0E94 0000 		call dispWriteCommand
 178               	.LM19:
 179 003a 812F      		mov r24,r17
 180 003c 8F70      		andi r24,lo8(15)
 181 003e 0E94 0000 		call dispWriteCommand
 182               	/* epilogue: frame size=0 */
 183 0042 1F91      		pop r17
 184 0044 0895      		ret
 185               	/* epilogue end (size=2) */
 186               	/* function dispGotoXY size 18 (15) */
 188               	.Lscope3:
 190               	.global	dispClear
 192               	dispClear:
 194               	.LM20:
 195               	/* prologue: frame size=0 */
 196 0046 1F93      		push r17
 197 0048 CF93      		push r28
 198               	/* prologue end (size=2) */
 200               	.LM21:
 201 004a 10E0      		ldi r17,lo8(0)
 202               	.L13:
 204               	.LM22:
 205 004c 612F      		mov r22,r17
 206 004e 80E0      		ldi r24,lo8(0)
 207 0050 0E94 0000 		call dispGotoXY
 209               	.LM23:
 210 0054 C0E0      		ldi r28,lo8(0)
 211               	.L12:
 213               	.LM24:
 214 0056 80E0      		ldi r24,lo8(0)
 215 0058 0E94 0000 		call dispWriteByte
 217               	.LM25:
 218 005c CF5F      		subi r28,lo8(-(1))
 219 005e C7FF      		sbrs r28,7
 220 0060 FACF      		rjmp .L12
 222               	.LM26:
 223 0062 1F5F      		subi r17,lo8(-(1))
 224 0064 1830      		cpi r17,lo8(8)
 225 0066 90F3      		brlo .L13
 227               	.LM27:
 228 0068 60E0      		ldi r22,lo8(0)
 229 006a 862F      		mov r24,r22
 230 006c 0E94 0000 		call dispGotoXY
 231               	/* epilogue: frame size=0 */
 232 0070 CF91      		pop r28
 233 0072 1F91      		pop r17
 234 0074 0895      		ret
 235               	/* epilogue end (size=3) */
 236               	/* function dispClear size 24 (19) */
 242               	.Lscope4:
 244               	.global	dispInit
 246               	dispInit:
 248               	.LM28:
 249               	/* prologue: frame size=0 */
 250               	/* prologue end (size=0) */
 252               	.LM29:
 253 0076 8FEF      		ldi r24,lo8(-1)
 254 0078 81BB      		out 49-0x20,r24
 256               	.LM30:
 257 007a 87B3      		in r24,55-0x20
 258 007c 8E63      		ori r24,lo8(62)
 259 007e 87BB      		out 55-0x20,r24
 261               	.LM31:
 262 0080 88B3      		in r24,56-0x20
 263 0082 8660      		ori r24,lo8(6)
 264 0084 88BB      		out 56-0x20,r24
 266               	.LM32:
 267 0086 80E4      		ldi r24,lo8(64)
 268 0088 0E94 0000 		call dispWriteCommand
 270               	.LM33:
 271 008c 80EA      		ldi r24,lo8(-96)
 272 008e 0E94 0000 		call dispWriteCommand
 274               	.LM34:
 275 0092 83EA      		ldi r24,lo8(-93)
 276 0094 0E94 0000 		call dispWriteCommand
 278               	.LM35:
 279 0098 80EC      		ldi r24,lo8(-64)
 280 009a 0E94 0000 		call dispWriteCommand
 282               	.LM36:
 283 009e 8FE2      		ldi r24,lo8(47)
 284 00a0 0E94 0000 		call dispWriteCommand
 286               	.LM37:
 287 00a4 80E2      		ldi r24,lo8(32)
 288 00a6 0E94 0000 		call dispWriteCommand
 290               	.LM38:
 291 00aa 8CEA      		ldi r24,lo8(-84)
 292 00ac 0E94 0000 		call dispWriteCommand
 294               	.LM39:
 295 00b0 81E8      		ldi r24,lo8(-127)
 296 00b2 0E94 0000 		call dispWriteCommand
 298               	.LM40:
 299 00b6 80E2      		ldi r24,lo8(32)
 300 00b8 0E94 0000 		call dispWriteCommand
 302               	.LM41:
 303 00bc 84EA      		ldi r24,lo8(-92)
 304 00be 0E94 0000 		call dispWriteCommand
 306               	.LM42:
 307 00c2 8FEA      		ldi r24,lo8(-81)
 308 00c4 0E94 0000 		call dispWriteCommand
 310               	.LM43:
 311 00c8 86EA      		ldi r24,lo8(-90)
 312 00ca 0E94 0000 		call dispWriteCommand
 314               	.LM44:
 315 00ce 0E94 0000 		call dispClear
 316               	/* epilogue: frame size=0 */
 317 00d2 0895      		ret
 318               	/* epilogue end (size=1) */
 319               	/* function dispInit size 47 (46) */
 321               	.Lscope5:
 323               	.global	dispReadByte
 325               	dispReadByte:
  73:s1d1565.c     **** }
  74:s1d1565.c     **** 
  75:s1d1565.c     **** unsigned char dispReadByte (void) {
 327               	.LM45:
 328               	/* prologue: frame size=0 */
 329               	/* prologue end (size=0) */
  76:s1d1565.c     ****   unsigned char byte;
  77:s1d1565.c     **** 
  78:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << A0);
 331               	.LM46:
 332 00d4 C39A      		sbi 56-0x20,3
  79:s1d1565.c     **** 
  80:s1d1565.c     ****   LCD_DATA_OUT = 0x00;
 334               	.LM47:
 335 00d6 12BA      		out 50-0x20,__zero_reg__
  81:s1d1565.c     ****   LCDDD = 0x00;
 337               	.LM48:
 338 00d8 11BA      		out 49-0x20,__zero_reg__
  82:s1d1565.c     ****   LCD_CMD_PORT &= ~(0x01 << CS);
 340               	.LM49:
 341 00da C198      		cbi 56-0x20,1
  83:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << RW);
 343               	.LM50:
 344 00dc C59A      		sbi 56-0x20,5
  84:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << EN);
 346               	.LM51:
 347 00de C49A      		sbi 56-0x20,4
  85:s1d1565.c     **** 
  86:s1d1565.c     ****   byte = LCD_DATA_IN;
 349               	.LM52:
 350 00e0 80B3      		in r24,48-0x20
  87:s1d1565.c     ****   LCD_CMD_PORT &= ~(0x01 << EN) & ~(0x01 << RW);
 352               	.LM53:
 353 00e2 98B3      		in r25,56-0x20
 354 00e4 9F7C      		andi r25,lo8(-49)
 355 00e6 98BB      		out 56-0x20,r25
  88:s1d1565.c     ****   LCD_CMD_PORT |= (0x01 << CS);
 357               	.LM54:
 358 00e8 C19A      		sbi 56-0x20,1
  89:s1d1565.c     ****   LCDDD = 0xff;
 360               	.LM55:
 361 00ea 9FEF      		ldi r25,lo8(-1)
 362 00ec 91BB      		out 49-0x20,r25
  90:s1d1565.c     ****   return byte;
  91:s1d1565.c     **** }
 364               	.LM56:
 365 00ee 9927      		clr r25
 366               	/* epilogue: frame size=0 */
 367 00f0 0895      		ret
 368               	/* epilogue end (size=1) */
 369               	/* function dispReadByte size 15 (14) */
 374               	.Lscope6:
 375               		.text
 377               	Letext:
 378               	/* File "s1d1565.c": code  121 = 0x0079 ( 108), prologues   3, epilogues  10 */
DEFINED SYMBOLS
                            *ABS*:00000000 s1d1565.c
     /tmp/cc6vOnl2.s:3      *ABS*:0000003f __SREG__
     /tmp/cc6vOnl2.s:4      *ABS*:0000003e __SP_H__
     /tmp/cc6vOnl2.s:5      *ABS*:0000003d __SP_L__
     /tmp/cc6vOnl2.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc6vOnl2.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc6vOnl2.s:76     .text:00000000 dispEnable
     /tmp/cc6vOnl2.s:97     .text:00000006 dispWriteCommand
     /tmp/cc6vOnl2.s:127    .text:00000014 dispWriteByte
     /tmp/cc6vOnl2.s:158    .text:00000022 dispGotoXY
     /tmp/cc6vOnl2.s:192    .text:00000046 dispClear
     /tmp/cc6vOnl2.s:246    .text:00000076 dispInit
     /tmp/cc6vOnl2.s:325    .text:000000d4 dispReadByte
     /tmp/cc6vOnl2.s:377    .text:000000f2 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
