
foodloader:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         00000380  00001c00  00001c00  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001f80  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  0000041a  2**0
                  ALLOC
  3 .noinit       00000000  0080006c  0080006c  0000041a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000041a  2**0
                  CONTENTS
  5 .stab         00000fa8  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000b3e  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassemblierung der Sektion .text:

00001c00 <__vectors>:
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <__ctors_end>
    1c02:	2b c0       	rjmp	.+86     	; 0x1c5a <__bad_interrupt>
    1c04:	2a c0       	rjmp	.+84     	; 0x1c5a <__bad_interrupt>
    1c06:	29 c0       	rjmp	.+82     	; 0x1c5a <__bad_interrupt>
    1c08:	28 c0       	rjmp	.+80     	; 0x1c5a <__bad_interrupt>
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <__bad_interrupt>
    1c0c:	26 c0       	rjmp	.+76     	; 0x1c5a <__bad_interrupt>
    1c0e:	25 c0       	rjmp	.+74     	; 0x1c5a <__bad_interrupt>
    1c10:	24 c0       	rjmp	.+72     	; 0x1c5a <__bad_interrupt>
    1c12:	23 c0       	rjmp	.+70     	; 0x1c5a <__bad_interrupt>
    1c14:	22 c0       	rjmp	.+68     	; 0x1c5a <__bad_interrupt>
    1c16:	21 c0       	rjmp	.+66     	; 0x1c5a <__bad_interrupt>
    1c18:	20 c0       	rjmp	.+64     	; 0x1c5a <__bad_interrupt>
    1c1a:	1f c0       	rjmp	.+62     	; 0x1c5a <__bad_interrupt>
    1c1c:	1e c0       	rjmp	.+60     	; 0x1c5a <__bad_interrupt>
    1c1e:	1d c0       	rjmp	.+58     	; 0x1c5a <__bad_interrupt>
    1c20:	1c c0       	rjmp	.+56     	; 0x1c5a <__bad_interrupt>
    1c22:	1b c0       	rjmp	.+54     	; 0x1c5a <__bad_interrupt>
    1c24:	1a c0       	rjmp	.+52     	; 0x1c5a <__bad_interrupt>

00001c26 <__ctors_end>:
    1c26:	11 24       	eor	r1, r1
    1c28:	1f be       	out	0x3f, r1	; 63
    1c2a:	cf e5       	ldi	r28, 0x5F	; 95
    1c2c:	d4 e0       	ldi	r29, 0x04	; 4
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	cd bf       	out	0x3d, r28	; 61

00001c32 <__do_copy_data>:
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	a0 e6       	ldi	r26, 0x60	; 96
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e0 e8       	ldi	r30, 0x80	; 128
    1c3a:	ff e1       	ldi	r31, 0x1F	; 31
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <.do_copy_data_start>

00001c3e <.do_copy_data_loop>:
    1c3e:	05 90       	lpm	r0, Z+
    1c40:	0d 92       	st	X+, r0

00001c42 <.do_copy_data_start>:
    1c42:	a6 36       	cpi	r26, 0x66	; 102
    1c44:	b1 07       	cpc	r27, r17
    1c46:	d9 f7       	brne	.-10     	; 0x1c3e <.do_copy_data_loop>

00001c48 <__do_clear_bss>:
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	a6 e6       	ldi	r26, 0x66	; 102
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <.do_clear_bss_start>

00001c50 <.do_clear_bss_loop>:
    1c50:	1d 92       	st	X+, r1

00001c52 <.do_clear_bss_start>:
    1c52:	ac 36       	cpi	r26, 0x6C	; 108
    1c54:	b1 07       	cpc	r27, r17
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <.do_clear_bss_loop>
    1c58:	16 c0       	rjmp	.+44     	; 0x1c86 <main>

00001c5a <__bad_interrupt>:
    1c5a:	d2 cf       	rjmp	.-92     	; 0x1c00 <__vectors>

00001c5c <uart_putc>:
static noinline void uart_putc(uint8_t data)
/*{{{*/ {

    /* loop until data has been transmitted */
    while (!(_UCSRA_UART0 & _BV(_UDRE_UART0)));
    1c5c:	5d 9b       	sbis	0x0b, 5	; 11
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <uart_putc>

    /* put data in buffer */
    _UDR_UART0 = data;
    1c60:	8c b9       	out	0x0c, r24	; 12
    1c62:	08 95       	ret

00001c64 <uart_getc>:

} /* }}} */

/** output a string */
static inline void uart_puts(uint8_t buffer[])
/*{{{*/ {

    /* send everything until end of string */
    while (*buffer != 0) {
        uart_putc(*buffer);
        buffer++;
    }

} /* }}} */

/** block until one character has been read */
static noinline uint8_t uart_getc(void)
/*{{{*/ {

    /* wait if a byte has been received */
    while (!(_UCSRA_UART0 & _BV(_RXC_UART0)));
    1c64:	5f 9b       	sbis	0x0b, 7	; 11
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <uart_getc>

    /* return received byte */
    return _UDR_UART0;
    1c68:	8c b1       	in	r24, 0x0c	; 12

} /* }}} */
    1c6a:	99 27       	eor	r25, r25
    1c6c:	08 95       	ret

00001c6e <start_application>:

/* loop a few times, and see if the character is received */
static inline uint8_t wait_for_char(void)
/*{{{*/ {
    uint8_t i;

    for(i = 0; i < 5; i++) {
        _delay_loop_2(65535);

        if(_UCSRA_UART0 & _BV(_RXC_UART0)) {
            if(_UDR_UART0 == BOOTLOADER_ENTRY_CHAR) {
                    return 1;
            }
        }
    }

    /* never received the character */
    return 0;
} /* }}} */

/** init the hardware uart */
static inline void init_uart(void)
/*{{{*/ {

    /* set baud rate */
    _UBRRH_UART0 = (uint8_t)(UART_UBRR >> 8);  /* high byte */
    _UBRRL_UART0 = (uint8_t)UART_UBRR;         /* low byte */

    /* set mode */
    _UCSRC_UART0 = UART_UCSRC;

    /* enable transmitter, receiver */
    _UCSRB_UART0 = _BV(_TXEN_UART0) | _BV(_RXEN_UART0);

} /* }}} */

/** move interrupt vectors to application section and jump to main program */
static noinline void start_application(void)
/* {{{ */ {

        /* reset input pin */
        BOOTLOADER_PORT &= BOOTLOADER_MASK;
    1c6e:	85 b3       	in	r24, 0x15	; 21
    1c70:	81 70       	andi	r24, 0x01	; 1
    1c72:	85 bb       	out	0x15, r24	; 21

        /* move interrupt vectors to application section and jump to main program */
        _IVREG = _BV(IVCE);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	8b bf       	out	0x3b, r24	; 59
        _IVREG = 0;
    1c78:	1b be       	out	0x3b, r1	; 59
        jump_to_application();
    1c7a:	e0 91 66 00 	lds	r30, 0x0066
    1c7e:	f0 91 67 00 	lds	r31, 0x0067
    1c82:	09 95       	icall
    1c84:	08 95       	ret

00001c86 <main>:

} /* }}} */

int main(void)
/* {{{ */ {
    1c86:	cf e5       	ldi	r28, 0x5F	; 95
    1c88:	d4 e0       	ldi	r29, 0x04	; 4
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	cd bf       	out	0x3d, r28	; 61

#   ifdef HONOR_WATCHDOG_RESET
    /* if this reset was caused by the watchdog timer, just start the
     * application, else disable the watchdog */
    if (MCUSR & _BV(WDRF))
    1c8e:	04 b6       	in	r0, 0x34	; 52
    1c90:	03 fe       	sbrs	r0, 3
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <main+0x1a>
        jump_to_application();
    1c94:	e0 91 66 00 	lds	r30, 0x0066
    1c98:	f0 91 67 00 	lds	r31, 0x0067
    1c9c:	09 95       	icall
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <main+0x26>
    else
        wdt_disable();
    1ca0:	88 e1       	ldi	r24, 0x18	; 24
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	81 bd       	out	0x21, r24	; 33
    1ca8:	11 bc       	out	0x21, r1	; 33
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	10 bc       	out	0x20, r1	; 32
    1cae:	88 e0       	ldi	r24, 0x08	; 8
    1cb0:	89 b9       	out	0x09, r24	; 9
    1cb2:	86 e8       	ldi	r24, 0x86	; 134
    1cb4:	80 bd       	out	0x20, r24	; 32
    1cb6:	88 e1       	ldi	r24, 0x18	; 24
    1cb8:	8a b9       	out	0x0a, r24	; 10
#   endif


    uint8_t memory_type;

    /* BUF_T is defined in config.h, according the pagesize */
    BUF_T buffer_size;

    init_uart();

    /* send boot message */
#   if SEND_BOOT_MESSAGE
        uart_putc('b');
    1cba:	82 e6       	ldi	r24, 0x62	; 98
    1cbc:	cf df       	rcall	.-98     	; 0x1c5c <uart_putc>
#   endif

    /* configure pin as input and enable pullup */
    BOOTLOADER_DDR &= ~BOOTLOADER_MASK;
    1cbe:	a0 98       	cbi	0x14, 0	; 20
    BOOTLOADER_PORT |= BOOTLOADER_MASK;
    1cc0:	a8 9a       	sbi	0x15, 0	; 21
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	ef ef       	ldi	r30, 0xFF	; 255
    1cc6:	ff ef       	ldi	r31, 0xFF	; 255
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc8:	cf 01       	movw	r24, r30
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <main+0x44>
    1cce:	5f 9b       	sbis	0x0b, 7	; 11
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <main+0x52>
    1cd2:	8c b1       	in	r24, 0x0c	; 12
    1cd4:	80 37       	cpi	r24, 0x70	; 112
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <main+0x5c>
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	25 30       	cpi	r18, 0x05	; 5
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <main+0x5a>
    1cde:	38 c1       	rjmp	.+624    	; 0x1f50 <main+0x2ca>
    1ce0:	f3 cf       	rjmp	.-26     	; 0x1cc8 <main+0x42>

    /* bootloader activation methods */
    if (
#   ifdef BOOTLOADER_JUMPER
	I don't want this, so throw error please!!
            /* 1) activation via jumper */
            ((BOOTLOADER_PIN & BOOTLOADER_MASK) == 0) ||
#   endif
#   ifdef BOOTLOADER_CHAR
            /* 2) or activation via char */
            wait_for_char() ||
#   endif
            0) {

        goto start_bootloader;

    } else {
#       if SEND_BOOT_MESSAGE
        uart_putc('a');
#       endif

        start_application();
    }


start_bootloader:

#   if SEND_BOOT_MESSAGE
    uart_putc('p');
    1ce2:	80 e7       	ldi	r24, 0x70	; 112
    1ce4:	bb df       	rcall	.-138    	; 0x1c5c <uart_putc>
#   endif

    /* main loop */
    while (1)
    {
        uint8_t command;

        /* block until a command has been received */
        command = uart_getc();
    1ce6:	be df       	rcall	.-132    	; 0x1c64 <uart_getc>

        switch (command)
    1ce8:	86 35       	cpi	r24, 0x56	; 86
    1cea:	09 f4       	brne	.+2      	; 0x1cee <main+0x68>
    1cec:	7c c0       	rjmp	.+248    	; 0x1de6 <main+0x160>
    1cee:	87 35       	cpi	r24, 0x57	; 87
    1cf0:	c8 f4       	brcc	.+50     	; 0x1d24 <main+0x9e>
    1cf2:	8c 34       	cpi	r24, 0x4C	; 76
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <main+0x72>
    1cf6:	ee c0       	rjmp	.+476    	; 0x1ed4 <main+0x24e>
    1cf8:	8d 34       	cpi	r24, 0x4D	; 77
    1cfa:	50 f4       	brcc	.+20     	; 0x1d10 <main+0x8a>
    1cfc:	82 34       	cpi	r24, 0x42	; 66
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <main+0x7c>
    1d00:	80 c0       	rjmp	.+256    	; 0x1e02 <main+0x17c>
    1d02:	85 34       	cpi	r24, 0x45	; 69
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <main+0x82>
    1d06:	e6 c0       	rjmp	.+460    	; 0x1ed4 <main+0x24e>
    1d08:	81 34       	cpi	r24, 0x41	; 65
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <main+0x88>
    1d0c:	1f c1       	rjmp	.+574    	; 0x1f4c <main+0x2c6>
    1d0e:	28 c0       	rjmp	.+80     	; 0x1d60 <main+0xda>
    1d10:	83 35       	cpi	r24, 0x53	; 83
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <main+0x90>
    1d14:	60 c0       	rjmp	.+192    	; 0x1dd6 <main+0x150>
    1d16:	84 35       	cpi	r24, 0x54	; 84
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <main+0x96>
    1d1a:	51 c0       	rjmp	.+162    	; 0x1dbe <main+0x138>
    1d1c:	80 35       	cpi	r24, 0x50	; 80
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <main+0x9c>
    1d20:	15 c1       	rjmp	.+554    	; 0x1f4c <main+0x2c6>
    1d22:	d8 c0       	rjmp	.+432    	; 0x1ed4 <main+0x24e>
    1d24:	85 36       	cpi	r24, 0x65	; 101
    1d26:	81 f1       	breq	.+96     	; 0x1d88 <main+0x102>
    1d28:	86 36       	cpi	r24, 0x66	; 102
    1d2a:	48 f4       	brcc	.+18     	; 0x1d3e <main+0xb8>
    1d2c:	81 36       	cpi	r24, 0x61	; 97
    1d2e:	b1 f0       	breq	.+44     	; 0x1d5c <main+0xd6>
    1d30:	82 36       	cpi	r24, 0x62	; 98
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <main+0xb0>
    1d34:	60 c0       	rjmp	.+192    	; 0x1df6 <main+0x170>
    1d36:	88 35       	cpi	r24, 0x58	; 88
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <main+0xb6>
    1d3a:	08 c1       	rjmp	.+528    	; 0x1f4c <main+0x2c6>
    1d3c:	5a c0       	rjmp	.+180    	; 0x1df2 <main+0x16c>
    1d3e:	80 37       	cpi	r24, 0x70	; 112
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <main+0xbe>
    1d42:	55 c0       	rjmp	.+170    	; 0x1dee <main+0x168>
    1d44:	81 37       	cpi	r24, 0x71	; 113
    1d46:	20 f4       	brcc	.+8      	; 0x1d50 <main+0xca>
    1d48:	87 36       	cpi	r24, 0x67	; 103
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <main+0xc8>
    1d4c:	ff c0       	rjmp	.+510    	; 0x1f4c <main+0x2c6>
    1d4e:	c4 c0       	rjmp	.+392    	; 0x1ed8 <main+0x252>
    1d50:	83 37       	cpi	r24, 0x73	; 115
    1d52:	b9 f1       	breq	.+110    	; 0x1dc2 <main+0x13c>
    1d54:	84 37       	cpi	r24, 0x74	; 116
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <main+0xd4>
    1d58:	f9 c0       	rjmp	.+498    	; 0x1f4c <main+0x2c6>
    1d5a:	39 c0       	rjmp	.+114    	; 0x1dce <main+0x148>
        {
            case 'P':   /* enter programming mode, respond with CR */
            case 'L':   /* leave programming mode, respond with CR */
#if EXIT_BOOTLOADER == 0
            case 'E':   /* exit bootloader, ignored */
#endif
                        uart_putc('\r');
                        break;

            case 'a':   /* report if we support address autoincrementing: yes, of course */
                        uart_putc('Y');
    1d5c:	89 e5       	ldi	r24, 0x59	; 89
    1d5e:	c2 cf       	rjmp	.-124    	; 0x1ce4 <main+0x5e>
                        break;

            case 'A':   /* set write address start (in words), read high and low byte and respond with CR */
                        /* {{{ */

                        /* eeprom address is a byte address */
                        eeprom_address = (uart_getc() << 8) | uart_getc();
    1d60:	81 df       	rcall	.-254    	; 0x1c64 <uart_getc>
    1d62:	08 2f       	mov	r16, r24
    1d64:	7f df       	rcall	.-258    	; 0x1c64 <uart_getc>
    1d66:	11 27       	eor	r17, r17
    1d68:	10 2f       	mov	r17, r16
    1d6a:	00 27       	eor	r16, r16
    1d6c:	99 27       	eor	r25, r25
    1d6e:	08 2b       	or	r16, r24
    1d70:	19 2b       	or	r17, r25
    1d72:	10 93 69 00 	sts	0x0069, r17
    1d76:	00 93 68 00 	sts	0x0068, r16

                        /* flash address is a byte address too, but we get a
                         * word address so convert it */
                        flash_address = eeprom_address << 1;
    1d7a:	00 0f       	add	r16, r16
    1d7c:	11 1f       	adc	r17, r17
    1d7e:	10 93 6b 00 	sts	0x006B, r17
    1d82:	00 93 6a 00 	sts	0x006A, r16
    1d86:	a6 c0       	rjmp	.+332    	; 0x1ed4 <main+0x24e>

                        /* acknowledge */
                        uart_putc('\r');
                        break;

                        /* }}} */

            case 'e':   /* do a chip-erase, respond with CR afterwards */
                        /* {{{ */

                        /* iterate over all pages in flash, and try to erase every single
                         * one of them (the bootloader section should be protected by lock-bits (!) */

                        for (flash_address = 0; flash_address < BOOT_SECTION_START; flash_address += SPM_PAGESIZE) {
    1d88:	10 92 6b 00 	sts	0x006B, r1
    1d8c:	10 92 6a 00 	sts	0x006A, r1
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	23 e0       	ldi	r18, 0x03	; 3
                            boot_page_erase_safe(flash_address);
    1d96:	07 b6       	in	r0, 0x37	; 55
    1d98:	00 fc       	sbrc	r0, 0
    1d9a:	fd cf       	rjmp	.-6      	; 0x1d96 <main+0x110>
    1d9c:	e1 99       	sbic	0x1c, 1	; 28
    1d9e:	fe cf       	rjmp	.-4      	; 0x1d9c <main+0x116>
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 93 57 00 	sts	0x0057, r18
    1da6:	e8 95       	spm
    1da8:	80 5c       	subi	r24, 0xC0	; 192
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	3c e1       	ldi	r19, 0x1C	; 28
    1dae:	80 30       	cpi	r24, 0x00	; 0
    1db0:	93 07       	cpc	r25, r19
    1db2:	88 f3       	brcs	.-30     	; 0x1d96 <main+0x110>
    1db4:	90 93 6b 00 	sts	0x006B, r25
    1db8:	80 93 6a 00 	sts	0x006A, r24
    1dbc:	8b c0       	rjmp	.+278    	; 0x1ed4 <main+0x24e>
                        }

                        uart_putc('\r');
                        break;

                        /* }}} */

            case 'T':   /* select device type: received device type and respond with CR */
                        /* ignore this command, only the device this bootloader
                         * is installed on can be programmed :) */

                        /* discard byte and acknowledge */
                        uart_getc();
    1dbe:	52 df       	rcall	.-348    	; 0x1c64 <uart_getc>
    1dc0:	89 c0       	rjmp	.+274    	; 0x1ed4 <main+0x24e>
                        uart_putc('\r');
                        break;

            case 's':   /* read signature bytes: respond with the three signature bytes for this MCU */
                        uart_putc(_SIG_BYTE_3);
    1dc2:	87 e0       	ldi	r24, 0x07	; 7
    1dc4:	4b df       	rcall	.-362    	; 0x1c5c <uart_putc>
                        uart_putc(_SIG_BYTE_2);
    1dc6:	83 e9       	ldi	r24, 0x93	; 147
    1dc8:	49 df       	rcall	.-366    	; 0x1c5c <uart_putc>
                        uart_putc(_SIG_BYTE_1);
    1dca:	8e e1       	ldi	r24, 0x1E	; 30
    1dcc:	8b cf       	rjmp	.-234    	; 0x1ce4 <main+0x5e>
                        break;

            case 't':   /* return supported device codes (only one in this case), and terminate with a nullbyte */
                        uart_putc(_AVR910_DEVCODE);
    1dce:	86 e7       	ldi	r24, 0x76	; 118
    1dd0:	45 df       	rcall	.-374    	; 0x1c5c <uart_putc>
                        uart_putc(0);
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	87 cf       	rjmp	.-242    	; 0x1ce4 <main+0x5e>
                        break;

            case 'S':   /* give software identifier, send exactly 7 chars */
                        uart_puts((uint8_t *)"FDL v");
    1dd6:	c0 e6       	ldi	r28, 0x60	; 96
    1dd8:	d0 e0       	ldi	r29, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <main+0x15a>
    1ddc:	3f df       	rcall	.-386    	; 0x1c5c <uart_putc>
    1dde:	21 96       	adiw	r28, 0x01	; 1
    1de0:	88 81       	ld	r24, Y
    1de2:	88 23       	and	r24, r24
    1de4:	d9 f7       	brne	.-10     	; 0x1ddc <main+0x156>

            case 'V':   /* return software version (2 byte) */
                        uart_putc(VERSION_BYTE_1);
    1de6:	80 e3       	ldi	r24, 0x30	; 48
    1de8:	39 df       	rcall	.-398    	; 0x1c5c <uart_putc>
                        uart_putc(VERSION_BYTE_2);
    1dea:	82 e3       	ldi	r24, 0x32	; 50
    1dec:	7b cf       	rjmp	.-266    	; 0x1ce4 <main+0x5e>
                        break;

            case 'p':   /* send programmer type, in this case 'S' for serial */
                        uart_putc('S');
    1dee:	83 e5       	ldi	r24, 0x53	; 83
    1df0:	79 cf       	rjmp	.-270    	; 0x1ce4 <main+0x5e>
                        break;

#if EXIT_BOOTLOADER == 1
            case 'E':   /* exit bootloader */
#endif
            case 'X':   /* start application */

                        start_application();
    1df2:	3d df       	rcall	.-390    	; 0x1c6e <start_application>
    1df4:	6f c0       	rjmp	.+222    	; 0x1ed4 <main+0x24e>
                        uart_putc('\r');

                        break;

            case 'b':   /* check block support: return yes and 2 bytes block size we support */
                        uart_putc('Y');
    1df6:	89 e5       	ldi	r24, 0x59	; 89
    1df8:	31 df       	rcall	.-414    	; 0x1c5c <uart_putc>
                        uart_putc(HIGH(BLOCKSIZE));
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	2f df       	rcall	.-418    	; 0x1c5c <uart_putc>
                        uart_putc(LOW(BLOCKSIZE));
    1dfe:	80 e4       	ldi	r24, 0x40	; 64
    1e00:	71 cf       	rjmp	.-286    	; 0x1ce4 <main+0x5e>
                        break;

            case 'B':   /* start block flash or eeprom load (fill mcu internal page buffer) */
                        /* {{{ */

                        /* first, read buffer size (in bytes) */
                        buffer_size = (uart_getc() << 8) | uart_getc();
    1e02:	30 df       	rcall	.-416    	; 0x1c64 <uart_getc>
    1e04:	2f df       	rcall	.-418    	; 0x1c64 <uart_getc>
    1e06:	d8 2e       	mov	r13, r24

                        /* check if our buffer can hold all this data */
                        if (buffer_size > BLOCKSIZE) {
    1e08:	80 e4       	ldi	r24, 0x40	; 64
    1e0a:	8d 15       	cp	r24, r13
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <main+0x18a>
    1e0e:	9e c0       	rjmp	.+316    	; 0x1f4c <main+0x2c6>
                            uart_putc('?');
                            break;
                        }

                        /* then, read flash ('F') or eeprom ('E') memory type */
                        memory_type = uart_getc();
    1e10:	29 df       	rcall	.-430    	; 0x1c64 <uart_getc>

                        /* memory type is flash */
                        if (memory_type == 'F')
    1e12:	86 34       	cpi	r24, 0x46	; 70
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <main+0x192>
    1e16:	46 c0       	rjmp	.+140    	; 0x1ea4 <main+0x21e>
                        /* {{{ */ {

                            BUF_T i;
                            uint16_t temp_word_buffer;

                            if (flash_address > BOOT_SECTION_START) {
    1e18:	80 91 6a 00 	lds	r24, 0x006A
    1e1c:	90 91 6b 00 	lds	r25, 0x006B
    1e20:	81 50       	subi	r24, 0x01	; 1
    1e22:	9c 41       	sbci	r25, 0x1C	; 28
    1e24:	10 f0       	brcs	.+4      	; 0x1e2a <main+0x1a4>
                                uart_putc(0);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	19 df       	rcall	.-462    	; 0x1c5c <uart_putc>
                            }

                            uint16_t temp_address = flash_address;
    1e2a:	c0 91 6a 00 	lds	r28, 0x006A
    1e2e:	d0 91 6b 00 	lds	r29, 0x006B
                            boot_spm_busy_wait();
    1e32:	07 b6       	in	r0, 0x37	; 55
    1e34:	00 fc       	sbrc	r0, 0
    1e36:	fd cf       	rjmp	.-6      	; 0x1e32 <main+0x1ac>
    1e38:	ee 24       	eor	r14, r14
    1e3a:	ff 24       	eor	r15, r15
    1e3c:	11 c0       	rjmp	.+34     	; 0x1e60 <main+0x1da>

                            /* read data, wordwise, low byte first */
                            for (i = 0; i < buffer_size/2; i++) {

                                /* get data word */
                                temp_word_buffer = uart_getc() | (uart_getc() << 8);
    1e3e:	12 df       	rcall	.-476    	; 0x1c64 <uart_getc>
    1e40:	08 2f       	mov	r16, r24
    1e42:	10 df       	rcall	.-480    	; 0x1c64 <uart_getc>

                                /* write data to temporary buffer */
                                boot_page_fill(temp_address, temp_word_buffer);
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	11 27       	eor	r17, r17
    1e48:	99 27       	eor	r25, r25
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	88 27       	eor	r24, r24
    1e4e:	08 2b       	or	r16, r24
    1e50:	19 2b       	or	r17, r25
    1e52:	08 01       	movw	r0, r16
    1e54:	fe 01       	movw	r30, r28
    1e56:	20 93 57 00 	sts	0x0057, r18
    1e5a:	e8 95       	spm
    1e5c:	11 24       	eor	r1, r1

                                /* increment by two, since temp_address is a byte
                                 * address, but we are writing words! */
                                temp_address += 2;
    1e5e:	22 96       	adiw	r28, 0x02	; 2
    1e60:	9e 2d       	mov	r25, r14
    1e62:	08 94       	sec
    1e64:	e1 1c       	adc	r14, r1
    1e66:	f1 1c       	adc	r15, r1
    1e68:	8d 2d       	mov	r24, r13
    1e6a:	86 95       	lsr	r24
    1e6c:	98 17       	cp	r25, r24
    1e6e:	38 f3       	brcs	.-50     	; 0x1e3e <main+0x1b8>
                            }

                            /* after filling the temp buffer, write the page and wait till we're done */
                            boot_page_write_safe(flash_address);
    1e70:	07 b6       	in	r0, 0x37	; 55
    1e72:	00 fc       	sbrc	r0, 0
    1e74:	fd cf       	rjmp	.-6      	; 0x1e70 <main+0x1ea>
    1e76:	e1 99       	sbic	0x1c, 1	; 28
    1e78:	fe cf       	rjmp	.-4      	; 0x1e76 <main+0x1f0>
    1e7a:	25 e0       	ldi	r18, 0x05	; 5
    1e7c:	80 91 6a 00 	lds	r24, 0x006A
    1e80:	90 91 6b 00 	lds	r25, 0x006B
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 93 57 00 	sts	0x0057, r18
    1e8a:	e8 95       	spm
                            boot_spm_busy_wait();
    1e8c:	07 b6       	in	r0, 0x37	; 55
    1e8e:	00 fc       	sbrc	r0, 0
    1e90:	fd cf       	rjmp	.-6      	; 0x1e8c <main+0x206>

                            /* re-enable application flash section, so we can read it again */
                            boot_rww_enable();
    1e92:	81 e1       	ldi	r24, 0x11	; 17
    1e94:	80 93 57 00 	sts	0x0057, r24
    1e98:	e8 95       	spm

                            /* store next page's address, since we do auto-address-incrementing */
                            flash_address = temp_address;
    1e9a:	d0 93 6b 00 	sts	0x006B, r29
    1e9e:	c0 93 6a 00 	sts	0x006A, r28
    1ea2:	18 c0       	rjmp	.+48     	; 0x1ed4 <main+0x24e>

                            uart_putc('\r');

                        } /* }}} */
                        else if (memory_type == 'E')
    1ea4:	85 34       	cpi	r24, 0x45	; 69
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <main+0x224>
    1ea8:	51 c0       	rjmp	.+162    	; 0x1f4c <main+0x2c6>
    1eaa:	00 e0       	ldi	r16, 0x00	; 0
    1eac:	11 c0       	rjmp	.+34     	; 0x1ed0 <main+0x24a>
                        /* {{{ */ {

                            //uart_putc('E');
                            uint8_t temp_data;
                            BUF_T i;

                            for (i = 0; i < buffer_size; i++) {
                                temp_data = uart_getc();
    1eae:	da de       	rcall	.-588    	; 0x1c64 <uart_getc>
                                eeprom_write_byte( (uint8_t *)eeprom_address, temp_data);
    1eb0:	a0 91 68 00 	lds	r26, 0x0068
    1eb4:	b0 91 69 00 	lds	r27, 0x0069

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  asm volatile (
    1eb8:	08 2e       	mov	r0, r24
    1eba:	56 d0       	rcall	.+172    	; 0x1f68 <__eeprom_write_byte_1C1D1E>

                                eeprom_address++;
    1ebc:	80 91 68 00 	lds	r24, 0x0068
    1ec0:	90 91 69 00 	lds	r25, 0x0069
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	90 93 69 00 	sts	0x0069, r25
    1eca:	80 93 68 00 	sts	0x0068, r24
    1ece:	0f 5f       	subi	r16, 0xFF	; 255
    1ed0:	0d 15       	cp	r16, r13
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <main+0x228>
                            }

                            uart_putc('\r');
    1ed4:	8d e0       	ldi	r24, 0x0D	; 13
    1ed6:	06 cf       	rjmp	.-500    	; 0x1ce4 <main+0x5e>

                        } /* }}} */
                        else {
                            uart_putc('?');
                        }

                        break;

                        /* }}} */

            case 'g':   /* start block flash or eeprom read */
                        /* {{{ */

                        /* first, read byte counter */
                        buffer_size = (uart_getc() << 8) | uart_getc();
    1ed8:	c5 de       	rcall	.-630    	; 0x1c64 <uart_getc>
    1eda:	c4 de       	rcall	.-632    	; 0x1c64 <uart_getc>
    1edc:	e8 2e       	mov	r14, r24

                        /* then, read memory type */
                        memory_type = uart_getc();
    1ede:	c2 de       	rcall	.-636    	; 0x1c64 <uart_getc>

                        /* memory type is flash */
                        if (memory_type == 'F')
    1ee0:	86 34       	cpi	r24, 0x46	; 70
    1ee2:	e1 f4       	brne	.+56     	; 0x1f1c <main+0x296>
    1ee4:	ff 24       	eor	r15, r15
    1ee6:	17 c0       	rjmp	.+46     	; 0x1f16 <main+0x290>
                        /* {{{ */ {

                            /* read buffer_size words */
                            for (BUF_T i = 0; i < buffer_size; i += 2) {
                                uint16_t temp_word_buffer;

                                /* read word */
                                temp_word_buffer = pgm_read_word(flash_address);
    1ee8:	e0 91 6a 00 	lds	r30, 0x006A
    1eec:	f0 91 6b 00 	lds	r31, 0x006B
    1ef0:	05 91       	lpm	r16, Z+
    1ef2:	14 91       	lpm	r17, Z

                                /* send data */
                                uart_putc(LOW(temp_word_buffer));
    1ef4:	80 2f       	mov	r24, r16
    1ef6:	b2 de       	rcall	.-668    	; 0x1c5c <uart_putc>
                                uart_putc(HIGH(temp_word_buffer));
    1ef8:	01 2f       	mov	r16, r17
    1efa:	11 27       	eor	r17, r17
    1efc:	80 2f       	mov	r24, r16
    1efe:	ae de       	rcall	.-676    	; 0x1c5c <uart_putc>

                                /* increment address by 2, since it's a byte address */
                                flash_address += 2;
    1f00:	80 91 6a 00 	lds	r24, 0x006A
    1f04:	90 91 6b 00 	lds	r25, 0x006B
    1f08:	02 96       	adiw	r24, 0x02	; 2
    1f0a:	90 93 6b 00 	sts	0x006B, r25
    1f0e:	80 93 6a 00 	sts	0x006A, r24
    1f12:	32 e0       	ldi	r19, 0x02	; 2
    1f14:	f3 0e       	add	r15, r19
    1f16:	fe 14       	cp	r15, r14
    1f18:	38 f3       	brcs	.-50     	; 0x1ee8 <main+0x262>
    1f1a:	e5 ce       	rjmp	.-566    	; 0x1ce6 <main+0x60>
                            }

                        } /* }}} */
                        /* if memory type is eeprom */
                        else if (memory_type == 'E')
    1f1c:	85 34       	cpi	r24, 0x45	; 69
    1f1e:	b1 f4       	brne	.+44     	; 0x1f4c <main+0x2c6>
    1f20:	00 e0       	ldi	r16, 0x00	; 0
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <main+0x2c0>
    1f24:	a0 91 68 00 	lds	r26, 0x0068
    1f28:	b0 91 69 00 	lds	r27, 0x0069
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  asm volatile
    1f2c:	15 d0       	rcall	.+42     	; 0x1f58 <__eeprom_read_byte_1C1D1E>
    1f2e:	80 2d       	mov	r24, r0
                        /* {{{ */ {

                            for (uint8_t i = 0; i < buffer_size; i += 1) {
                                uint8_t temp_buffer;

                                /* read and send byte */
                                temp_buffer = eeprom_read_byte((uint8_t *)eeprom_address);
                                uart_putc(temp_buffer);
    1f30:	95 de       	rcall	.-726    	; 0x1c5c <uart_putc>

                                eeprom_address++;
    1f32:	80 91 68 00 	lds	r24, 0x0068
    1f36:	90 91 69 00 	lds	r25, 0x0069
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	90 93 69 00 	sts	0x0069, r25
    1f40:	80 93 68 00 	sts	0x0068, r24
    1f44:	0f 5f       	subi	r16, 0xFF	; 255
    1f46:	0e 15       	cp	r16, r14
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <main+0x29e>
    1f4a:	cd ce       	rjmp	.-614    	; 0x1ce6 <main+0x60>
                            }
                        } /* }}} */
                        else {
                            uart_putc('?');
                        }

                        break;

                        /* }}} */

            /* NOT IMPLEMENTED: */
            /* {{{ */
            /* 'c': write program memory, low byte -- NOT IMPLEMENTED */
            /* 'C': write program memory, high byte -- NOT IMPLEMENTED */
            /* 'm': issue page write -- NOT IMPLEMENTED */
            /* 'r': read lock bits -- NOT IMPLEMENTED */
            /* 'R': read program memory -- NOT IMPLEMENTED */
            /* 'd': read data (== eeprom) memory -- NOT IMPLEMENT */
            /* 'D': write data (== eeprom) memory -- NOT IMPLEMENTED */
            /* 'l': write lock bits -- NOT IMPLEMENTED */
            /* 'F': read fuse bits -- NOT IMPLEMENTED */
            /* 'N': read high fuse bits -- NOT IMPLEMENTED */
            /* 'Q': read extended fuse bits -- NOT IMPLEMENTED */ /* }}} */

            default:    /* default: respond with '?' */
                        uart_putc('?');
    1f4c:	8f e3       	ldi	r24, 0x3F	; 63
    1f4e:	ca ce       	rjmp	.-620    	; 0x1ce4 <main+0x5e>
    1f50:	81 e6       	ldi	r24, 0x61	; 97
    1f52:	84 de       	rcall	.-760    	; 0x1c5c <uart_putc>
    1f54:	8c de       	rcall	.-744    	; 0x1c6e <start_application>
    1f56:	c5 ce       	rjmp	.-630    	; 0x1ce2 <main+0x5c>

00001f58 <__eeprom_read_byte_1C1D1E>:
    1f58:	e1 99       	sbic	0x1c, 1	; 28
    1f5a:	fe cf       	rjmp	.-4      	; 0x1f58 <__eeprom_read_byte_1C1D1E>
    1f5c:	bf bb       	out	0x1f, r27	; 31
    1f5e:	ae bb       	out	0x1e, r26	; 30
    1f60:	e0 9a       	sbi	0x1c, 0	; 28
    1f62:	11 96       	adiw	r26, 0x01	; 1
    1f64:	0d b2       	in	r0, 0x1d	; 29
    1f66:	08 95       	ret

00001f68 <__eeprom_write_byte_1C1D1E>:
    1f68:	e1 99       	sbic	0x1c, 1	; 28
    1f6a:	fe cf       	rjmp	.-4      	; 0x1f68 <__eeprom_write_byte_1C1D1E>
    1f6c:	bf bb       	out	0x1f, r27	; 31
    1f6e:	ae bb       	out	0x1e, r26	; 30
    1f70:	0d ba       	out	0x1d, r0	; 29
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	e2 9a       	sbi	0x1c, 2	; 28
    1f7a:	e1 9a       	sbi	0x1c, 1	; 28
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	08 95       	ret
