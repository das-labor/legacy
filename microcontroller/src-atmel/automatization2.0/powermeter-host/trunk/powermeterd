#!/usr/bin/env python

from can import ControlPacket, LAPPacket, CANSocket, hexdump, CANError

import sys
import socket
import subprocess
from string import Template
from time import strftime, time, sleep

POWERMETER_RRD_CMD = "rrdtool update powermeter.rrd N:$U1:$U2:$U3:$I1:$I2:$I3:$S1:$S2:$S3:$P1:$P2:$P3:$E1:$E2:$E3"
GW_POWER_RRD_CMD   = "rrdtool update gateway-power.rrd N:$U:$I"
GW_PSTATS_RRD_CMD  = "rrdtool update gateway-pstats.rrd N:$RXPKT:$TXPKT:$RXBYTES:$TXBYTES"
AUTOREPORT_CMD = "lapcontrol -s kvm  gw control 07"

CONSOLE_OUT = """
%(TIME)s:
            L1           L2           L3          SUM
---+------------+------------+------------+------------
 U | %(U1)10.2f | %(U2)10.2f | %(U3)10.2f | %(U)10.2f
 I | %(I1)10.2f | %(I2)10.2f | %(I3)10.2f | %(I)10.2f
 S | %(S1)10.2f | %(S2)10.2f | %(S3)10.2f | %(S)10.2f
 P | %(P1)10.2f | %(P2)10.2f | %(P3)10.2f | %(P)10.2f
 E | %(E1)10d | %(E2)10d | %(E3)10d |
"""

# E | %(E1)10d | %(E2)10d | %(E3)10d |
val_map = {
    0x01: "P1", 0x02: "P2", 0x03: "P3",
    0x04: "S1", 0x05: "S2", 0x06: "S3",
    0x07: "U1", 0x08: "U2", 0x09: "U3",
    0x0a: "I1", 0x0b: "I2", 0x0c: "I3",
    0x0d: "E1", 0x0e: "E2", 0x0f: "E3",
}

val_fac = {
    'U': (1.65*215)/2048,
    'I': 1000./(33*2048),
    'P': (1.65*215*1000)/(33*2048*2048),
    'S': (1.65*215*1000)/(33*2048*2048),
#    'E': 7.5e-5,
    'E': (1.65*215*1000)/(33*2048*2048),
}


def all_unknowm_values():
    values = {}
    for k in val_map.values():
        values[k] = "UNK"
    return values

def parse_pm_pkt(pkt):
    """ Return (name, val) if the pkt contains parsable values.

        If pkt contains unknwon value-type, return (None, None).
    """
    data = pkt.data

    if len(data) != 5:
        return None, None

    vt = data[0]

    if vt not in val_map:
        return None, None

    name = val_map[vt]
    fac = val_fac[name[0]]

    val = data[1] + (data[2] << 8) + (data[3] << 16) + (data[4] << 24)
    val = val * fac
    
    return name, val

def update_rrd(cmd, vals):
    cmd_tmpl = Template(cmd)
    cmd = cmd_tmpl.substitute(vals)
    if subprocess.call(cmd.split()) != 0:
        raise Error("Updateing rrd failrd")



def initialize():
    # Enabe CAN-GW auto-reporting
    print "Enabling CAN GW autoreport..."
    subprocess.call(AUTOREPORT_CMD.split())

#############################################################################
# Main

if __name__ == "__main__":

    initialize()
    last_init = time()

    while 1:
        try:
            c = CANSocket()

            # We start with an empty set
            values = all_unknowm_values()
            gw_power_ts = 0
            gw_pstats_ts = 0

            while True:
                # Reinitialize peers once per hour
                if time() - last_init > 3600:
                    inititalize()
                    last_init = time()

                pkt = c.get_pkt()

                if isinstance(pkt, ControlPacket):
                    if pkt.id == "POWER_DRAW":
                        if (time()-gw_power_ts) < 1.:
                            continue
                        print "GW_POWER_DRAW: U=%5.2f I=%5.2f" % (pkt.u, pkt.i)
                        gw_power_ts = time()
                        vals = {"U": pkt.u, "I": pkt.i}
                        update_rrd(GW_POWER_RRD_CMD, vals)
                    elif pkt.id == "PSTATS":
                        if (time()-gw_pstats_ts) < 1.:
                            continue
                        print "GW_PSTATS: RX_pkts=%d TX_pkts=%d RX_bytes=%d TX_bytes=%d" % (pkt.rx_pkts, pkt.tx_pkts, pkt.rx_bytes, pkt.tx_bytes)
                        gw_pstats_ts = time()
                        vals = {"RXPKT": pkt.rx_pkts, "TXPKT": pkt.tx_pkts, "RXBYTES": pkt.rx_bytes, "TXBYTES": pkt.tx_bytes}
                        update_rrd(GW_PSTATS_RRD_CMD, vals)
                elif isinstance(pkt, LAPPacket):
                    # Is it the powermeter talking?
                    if pkt.sa != 5 or pkt.sp != 0x3c:
                        continue

                    name, val = parse_pm_pkt(pkt)
                    if name is None:   # unknown value 
                        continue
        
                    values[name] = val

                    # All values received?
                    if name == "E3":
                        try:
                            values['U'] = (values['U1'] + values['U2'] + values['U3']) / 3
                            values['I'] = values['I1'] + values['I2'] + values['I3'] 
                            values['S'] = values['S1'] + values['S2'] + values['S3'] 
                            values['P'] = values['P1'] + values['P2'] + values['P3'] 
                            values['E1'] = int(values['E1'])
                            values['E2'] = int(values['E2'])
                            values['E3'] = int(values['E3'])
                            values['TIME'] = strftime("%H:%M:%S")
                            print CONSOLE_OUT % values
                            update_rrd(POWERMETER_RRD_CMD, values)
                        except:
                            pass
                        values = all_unknowm_values()
        except CANError as err:
            print "CANError: ", err
            sleep(10)
            c.close()

