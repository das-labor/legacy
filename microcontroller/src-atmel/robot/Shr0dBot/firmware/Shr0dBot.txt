==== TODO ====

** HARDWARE [V1] ** FEATURE COMPLETE
+ Ready poject and documentation for first wiki appearance


** HARDWARE [V1.5] ** FEATURE COMPLETE
+ Document changes


** HARDWARE [V2]
+ Construct top lighting, possibly use 68 ohm resistors
+ Finish hot-glue roof
++ Before doing this, finish bootloading


** CHASSIS [V1] ** FEATURE COMPLETE
+ Ready poject and documentation for first wiki appearance


** CHASSIS [V2]
+ Add complete cover
+ Add easy-to-access power-switch


** WIKI DOC [V1]
+ Make photos
+ Think of a good article structure / topic list [OASE Model -> Orientation Analisys Synthesis Evaluation ??]
++ Topics:
++ Idea / Motivation [Orientation]
++ Components, parts list [Analysis]
+++ Document how the different sensor systems work (encoder, motor current drain, accelerometer)
++ Sources, other examples [Analysis]
++ Document chassis / hardware setup [Analysis or Synthesis -> mainboard sections?]
++ Prototype [Synthesis]
+++ Document blocking pwm switching circuit
++ Construction [Synthesis]
++ Roughly document mainboard sections / make an overview [Synthesis or Analysis?]
+++ Say that i have a motor board
+++ Document acc sensor level interfacing, power supply
+++ Document connector pinouts (encoder i/o, encoder power, motor power, motor i/o, motor current drain measure, acc i/o, acc power)
+++ Document motor current drain measurement circuit
+++ RFM12 [Additional subsystem doc?]
++++ Document antenna design (graphics?)
++++ Document Soeren's standard RFM12 connector (graphics?)


** WIKI DOC [V1.5]
+ say i've added dc noise suppression ceramic disc capacitors to motors
+ say i've soldered 0,1ohm resistor to LM293D motor supply voltage and add a cable+connector
+ say i've added small (min. 1nF?) capacitances to acc_x,y,z
++ measure if this gives an advantage
+ say i've changed battery voltage divider to 1/3 to be able to use internal 2,56V adc voltage reference


** DOCUMENTATION
+ Document accu pack (5x NiMH = 6.0V, motor runs best @ 5V -> diode eats 0,7v)


** HARDWARE [V2] DOC
+ Added steering neutral position detector (using a light barrier)
+ No front/back and top lighting enable transistor base resistor (as this is an emitter thingy)


** TESTS
+ Test acc sensor fullscale select
+ (Test opamp current amplification) as soon as measure line is ready | DONE


** RFM12USB
+ Update airdump to use new packet format
+ Integrate rfmusbcmd with airdump
+ Write c++ based driver using libusb wrapper
++ implement connect/disconnect device
++ implement fetch notification packets
++ implement fetch raw data packet
++ implement put raw data packet
+ Document host driver code
+ Use rfmusbcmd/airdump as example code -> document
+ Cleanup directories (add host/, host/driver/, common/, host/rfmusbcmd/)
+ Create separate to-do file

** SOFTWARE [V1]
+ Implement direct steering commands (steer_left(), steer_right())
+ Implement direct motion remote control subsystem (move, steer), possibly via behavior
+ Implement simple behavior control function
++ Find a simple way to check if a behavior shall be active
++ Find a simple way to start(init)/run/stop behaviors
+ Implement unblock-gearbox behavior

** SOFTWARE [other]
+ Implement better behavior control function
++ Find a more sane way to check if a behavior shall be active
++ Find a more sane way to start(init)/run/stop behaviors
+ Implement ACC value processing & conversion functions (necessary?)
+ Implement battery voltage level processing
+ Implement low power sleep mode


** HGROBO LIB
+ Code encoder sampling in asm (see how to use pin/port defines -> use inline asm or separate file)
+ Same goes for motor pid
+ In long-term, find a solution for motor configuration, possibly via defines
+ Code 2x encoder sampling int


==== SCRATCH ====

code radiocommand function
rfm12 commands to set drive modes

drive modes / movement commands

* set target abs-speed, target encoder count (implies direction) -> controlled movement
** move relative via call with current-encoder-count + relative-count
( now implemented as set target speed (implies direction) and set target encoder count (also implies direction)
( movement into wrong direction wll result in no movement
( could be implemented as pid later on
* set target speed (implies direction) -> free ride
* acceleration / deceleration could be added later

disadvantages:
* tick function needs to be called regularly to ensure stop condition is evaluated

advantages:
* simple interface
* target is always reachable (can't move in wrong direction)

behavior control model:
* http://lejos.sourceforge.net/tutorial/behavior/
* implement drive modes / movement commands as behaviors later on
* implement highest priority behavior remote to make direct use of drive / movement modes


7744bit / 968byte ram = 44 * 44 * 4 bit table or 3 tables (2bit hit forward 1bit brightness (or transition), 1bit seen before)



==== ATMEGA32 PIN CONFIGURATION ====

Names in () are or were planned.
Pins marked with [in] are inputs, whilst the ones marked with [out] are outputs.
All other pins make use of their respective special function(s).


** GENERIC
RESET	- ISP RESET, RESET SWITCH
XTAL1,2	- 16MHZ, no capacitors
VCC,
AVCC,
AREF	- +5V 7805, 100nF
GND	- COMMON GROUND


** PORT A
0 - BATTERY POWER DIVIDER (1nF load) [ADC0]
1 - MOTOR 1 CURRENT MEASUREMENT (capacitive load?) [ADC1]
5 - ACCELEROMETER X (1nF load) [ADC7]
6 - ACCELEROMETER Y (1nF load) [ADC6]
7 - ACCELEROMETER Z (1nF load) [ADC5]


** PORT B
0 - ENCODER A PHASE A [in]
1 - ENCODER A PHASE B [in]
2 - RFM12 INTERRUPT [INT2]
3 - ACCELEROMETER FULLSCALE, 10K SERIES RESISTOR [OUT]
4 - ISP [SPI SS] 
5 - ISP, RFM12 [SPI MOSI]
6 - ISP, RFM12 [SPI MISO]
7 - ISP, RFM12 [SPI SCK]


** PORT C
0 - RFM12 SLAVE SELECT [out]
2 - MOTOR 2 FORWARD [out]
3 - MOTOR 2 REVERSE [out]
4 - FRONT/BACK LIGHTING [out]
5 - MOTOR 1 FORWARD [out]
6 - MOTOR 1 REVERSE [out]
7 - STEERING NEUTRAL POSITION DETECTOR LIGHT BARRIER [in, pullup]


** PORT D
4 - PWM MOTOR 2 [OC1B]
5 - PWM MOTOR 1 [OC1A]
7 - TOP LIGHTING [OC2]


** FREE
1 I/o LINE (PD6)
1/2 I²C (PC1/SDA is still free)
2 INTERRUPTS - INT0 (PD2), INT1 (PD3)
1 UART (PD0, PD1)
3 ADC


** NOTES
Encoder inputs have to be pulled low, internal pullups must be disabled.
The encoder is a simple ttl level quadrature encoder scavenged from a computer mouse.
RFM12 slave select should be pulled high, to prevent interferences during atmel programming.
Motor 2 uses a special pwm switching curcuit to switch pwm between fwd and rwd pins.
The accelerometer used is a LISL3L06AL.