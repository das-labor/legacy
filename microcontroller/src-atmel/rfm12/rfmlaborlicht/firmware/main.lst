
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000007ba  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007b  0080007a  000007d4  00000848  2**0
                  ALLOC
  3 .stab         00001d70  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ac  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
   2:	2c c1       	rjmp	.+600    	; 0x25c <__bad_interrupt>
   4:	4b c2       	rjmp	.+1174   	; 0x49c <__vector_2>
   6:	2a c1       	rjmp	.+596    	; 0x25c <__bad_interrupt>
   8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
   a:	28 c1       	rjmp	.+592    	; 0x25c <__bad_interrupt>
   c:	41 c1       	rjmp	.+642    	; 0x290 <__vector_6>
   e:	26 c1       	rjmp	.+588    	; 0x25c <__bad_interrupt>
  10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
  12:	24 c1       	rjmp	.+584    	; 0x25c <__bad_interrupt>
  14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
  16:	22 c1       	rjmp	.+580    	; 0x25c <__bad_interrupt>
  18:	21 c1       	rjmp	.+578    	; 0x25c <__bad_interrupt>
  1a:	20 c1       	rjmp	.+576    	; 0x25c <__bad_interrupt>
  1c:	1f c1       	rjmp	.+574    	; 0x25c <__bad_interrupt>
  1e:	1e c1       	rjmp	.+572    	; 0x25c <__bad_interrupt>
  20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
  22:	1c c1       	rjmp	.+568    	; 0x25c <__bad_interrupt>
  24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>

00000026 <timeTable>:
	...
  36:	d2 00 38 00 3e 00 45 00 4b 00 52 00 59 00 5f 00     ..8.>.E.K.R.Y._.
  46:	66 00 6c 00 73 00 79 00 80 00 87 00 8d 00 94 00     f.l.s.y.........
  56:	9a 00 a1 00 a7 00 ae 00 b4 00 bb 00 c2 00 c8 00     ................
  66:	cf 00 d5 00 dc 00 e2 00 e9 00 ef 00 f6 00 fd 00     ................
  76:	03 01 0a 01 10 01 17 01 1d 01 24 01 2b 01 31 01     ..........$.+.1.
  86:	38 01 3e 01 45 01 4b 01 52 01 58 01 5f 01 66 01     8.>.E.K.R.X._.f.
  96:	6c 01 73 01 79 01 80 01 86 01 8d 01 94 01 9a 01     l.s.y...........
  a6:	a1 01 a7 01 ae 01 b4 01 bb 01 c1 01 c8 01 cf 01     ................
  b6:	d5 01 dc 01 e2 01 e9 01 ef 01 f6 01 fd 01 03 02     ................
  c6:	0a 02 10 02 17 02 1d 02 24 02 2a 02 31 02 38 02     ........$.*.1.8.
  d6:	3e 02 45 02 4b 02 52 02 58 02 5f 02 66 02 6c 02     >.E.K.R.X._.f.l.
  e6:	73 02 79 02 80 02 86 02 8d 02 93 02 9a 02 a1 02     s.y.............
  f6:	a7 02 ae 02 b4 02 bb 02 c1 02 c8 02 ce 02 d5 02     ................
 106:	dc 02 e2 02 e9 02 ef 02 f6 02 fc 02 03 03 0a 03     ................
 116:	10 03 17 03 1d 03 24 03 2a 03 31 03 37 03 3e 03     ......$.*.1.7.>.
 126:	45 03 4b 03 52 03 58 03 5f 03 65 03 6c 03 73 03     E.K.R.X._.e.l.s.
 136:	79 03 80 03 86 03 8d 03 93 03 9a 03 a0 03 a7 03     y...............
 146:	ae 03 b4 03 bb 03 c1 03 c8 03 ce 03 d5 03 dc 03     ................
 156:	e2 03 e9 03 ef 03 f6 03 fc 03 03 04 09 04 10 04     ................
 166:	17 04 1d 04 24 04 2a 04 31 04 37 04 3e 04 45 04     ....$.*.1.7.>.E.
 176:	4b 04 52 04 58 04 5f 04 65 04 6c 04 72 04 79 04     K.R.X._.e.l.r.y.
 186:	80 04 86 04 8d 04 93 04 9a 04 a0 04 a7 04 ad 04     ................
 196:	b4 04 bb 04 c1 04 c8 04 ce 04 d5 04 db 04 e2 04     ................
 1a6:	e9 04 ef 04 f6 04 fc 04 03 05 09 05 10 05 16 05     ................
 1b6:	1d 05 24 05 2a 05 31 05 37 05 3e 05 44 05 4b 05     ..$.*.1.7.>.D.K.
 1c6:	52 05 58 05 5f 05 65 05 6c 05 72 05 79 05 7f 05     R.X._.e.l.r.y...
 1d6:	86 05 8d 05 93 05 9a 05 a0 05 a7 05 ad 05 b4 05     ................
 1e6:	bb 05 c1 05 c8 05 ce 05 d5 05 db 05 e2 05 e8 05     ................
 1f6:	ef 05 f6 05 fc 05 03 06 09 06 10 06 16 06 1d 06     ................
 206:	24 06 2a 06 31 06 37 06 3e 06 44 06 4b 06 51 06     $.*.1.7.>.D.K.Q.
 216:	58 06 5f 06 65 06 6c 06 72 06 79 06 7f 06 86 06     X._.e.l.r.y.....

00000226 <__ctors_end>:
 226:	11 24       	eor	r1, r1
 228:	1f be       	out	0x3f, r1	; 63
 22a:	cf e5       	ldi	r28, 0x5F	; 95
 22c:	d4 e0       	ldi	r29, 0x04	; 4
 22e:	de bf       	out	0x3e, r29	; 62
 230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	a0 e6       	ldi	r26, 0x60	; 96
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	ea eb       	ldi	r30, 0xBA	; 186
 23a:	f7 e0       	ldi	r31, 0x07	; 7
 23c:	02 c0       	rjmp	.+4      	; 0x242 <.do_copy_data_start>

0000023e <.do_copy_data_loop>:
 23e:	05 90       	lpm	r0, Z+
 240:	0d 92       	st	X+, r0

00000242 <.do_copy_data_start>:
 242:	aa 37       	cpi	r26, 0x7A	; 122
 244:	b1 07       	cpc	r27, r17
 246:	d9 f7       	brne	.-10     	; 0x23e <.do_copy_data_loop>

00000248 <__do_clear_bss>:
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	aa e7       	ldi	r26, 0x7A	; 122
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
 250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
 252:	a5 3f       	cpi	r26, 0xF5	; 245
 254:	b1 07       	cpc	r27, r17
 256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
 258:	92 d0       	rcall	.+292    	; 0x37e <main>
 25a:	ae c2       	rjmp	.+1372   	; 0x7b8 <_exit>

0000025c <__bad_interrupt>:
 25c:	d1 ce       	rjmp	.-606    	; 0x0 <__heap_end>

0000025e <rfm12_rx_clear>:

//inline function to clear buffer complete/occupied status
static inline void rfm12_rx_clear()
{
	//mark the current buffer as empty
	rf_rx_buffer.rf_buffer_out->status = STATUS_FREE;
 25e:	e0 91 cb 00 	lds	r30, 0x00CB
 262:	f0 91 cc 00 	lds	r31, 0x00CC
 266:	10 82       	st	Z, r1
	
	//switch to the other buffer
	rf_rx_buffer.buffer_out_num = (rf_rx_buffer.buffer_out_num + 1 ) % 2 ;
 268:	80 91 cd 00 	lds	r24, 0x00CD
 26c:	99 27       	eor	r25, r25
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	81 70       	andi	r24, 0x01	; 1
 272:	90 70       	andi	r25, 0x00	; 0
 274:	28 2f       	mov	r18, r24
 276:	80 93 cd 00 	sts	0x00CD, r24
	rf_rx_buffer.rf_buffer_out = &rf_rx_buffer.rf_buffers[rf_rx_buffer.buffer_out_num];
 27a:	82 e2       	ldi	r24, 0x22	; 34
 27c:	28 9f       	mul	r18, r24
 27e:	90 01       	movw	r18, r0
 280:	11 24       	eor	r1, r1
 282:	2c 57       	subi	r18, 0x7C	; 124
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	30 93 cc 00 	sts	0x00CC, r19
 28a:	20 93 cb 00 	sts	0x00CB, r18
 28e:	08 95       	ret

00000290 <__vector_6>:




//function protoypes
void rfm12_init();
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
void rfm12_data(uint16_t d);

 2a4:	1d bc       	out	0x2d, r1	; 45
 2a6:	1c bc       	out	0x2c, r1	; 44
void rfm12_tick();
 2a8:	20 91 77 00 	lds	r18, 0x0077
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	20 93 77 00 	sts	0x0077, r18
 2b2:	e2 2f       	mov	r30, r18
 2b4:	ff 27       	eor	r31, r31
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	ea 5d       	subi	r30, 0xDA	; 218
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	85 91       	lpm	r24, Z+
 2c0:	94 91       	lpm	r25, Z
 2c2:	9b bd       	out	0x2b, r25	; 43
 2c4:	8a bd       	out	0x2a, r24	; 42

uint8_t rfm12_start_tx(uint8_t type, uint8_t length);
 2c6:	80 91 7a 00 	lds	r24, 0x007A
 2ca:	28 17       	cp	r18, r24
 2cc:	10 f4       	brcc	.+4      	; 0x2d2 <__vector_6+0x42>

 2ce:	a8 9a       	sbi	0x15, 0	; 21
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <__vector_6+0x44>
uint8_t rfm12_tx(uint8_t len, uint8_t type, uint8_t *data);

 2d2:	a8 98       	cbi	0x15, 0	; 21
//static inline uint8_t rfm12_tx_status();

 2d4:	80 91 7b 00 	lds	r24, 0x007B
 2d8:	28 17       	cp	r18, r24
 2da:	10 f4       	brcc	.+4      	; 0x2e0 <__vector_6+0x50>
static inline uint8_t *rfm12_rx_buffer();
 2dc:	a9 9a       	sbi	0x15, 1	; 21
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <__vector_6+0x52>
static inline void rfm12_rx_clear();

 2e0:	a9 98       	cbi	0x15, 1	; 21

/* Private structs needed for inline functions */
 2e2:	80 91 7c 00 	lds	r24, 0x007C
 2e6:	28 17       	cp	r18, r24
 2e8:	10 f4       	brcc	.+4      	; 0x2ee <__vector_6+0x5e>

 2ea:	aa 9a       	sbi	0x15, 2	; 21
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <__vector_6+0x60>
typedef struct{
	volatile uint8_t status;//is the buffer free or occupied?
 2ee:	aa 98       	cbi	0x15, 2	; 21
	uint8_t num_bytes; 		//number of bytes to transmit (size in buffer)
	uint8_t bytecount;   //counter for the byte we are transmitting at the moment
 2f0:	2f 3f       	cpi	r18, 0xFF	; 255
 2f2:	19 f4       	brne	.+6      	; 0x2fa <__vector_6+0x6a>
	
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	80 93 77 00 	sts	0x0077, r24
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <timer1_init>:
	//we transmit the bytes beginning here
	uint8_t sync[2]; 		//sync bytes for receiver to start filling fifo
	uint8_t len;			//length byte - number of bytes in buffer
	uint8_t type;			//type field for airlab
	uint8_t checksum;		//checksum over the former 2
 30e:	1f bc       	out	0x2f, r1	; 47
	uint8_t buffer[RFM12_TX_BUFFER_SIZE];//buffer for the raw bytes to be transmitted
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	8e bd       	out	0x2e, r24	; 46
}rf_tx_buffer_t;
 314:	8a ef       	ldi	r24, 0xFA	; 250
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	9b bd       	out	0x2b, r25	; 43
 31a:	8a bd       	out	0x2a, r24	; 42

 31c:	1d bc       	out	0x2d, r1	; 45
 31e:	1c bc       	out	0x2c, r1	; 44

 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	88 bf       	out	0x38, r24	; 56
//for storing the received bytes.
 324:	89 bf       	out	0x39, r24	; 57
 326:	08 95       	ret

00000328 <fadeToColor>:
typedef struct{
	volatile uint8_t status;//is the buffer free or is there complete data in it?
	uint8_t len;			//length byte - number of bytes in buffer
	uint8_t type;			//type field for airlab
	uint8_t checksum;		//rx checksum
 328:	fc 01       	movw	r30, r24
	uint8_t buffer[RFM12_RX_BUFFER_SIZE]; //receive buffer
}rf_buffer_t;


 32a:	66 23       	and	r22, r22
 32c:	69 f0       	breq	.+26     	; 0x348 <fadeToColor+0x20>
	volatile uint8_t status;//are we idle, receiving or ignoring?
	uint8_t num_bytes;		//number of bytes to be received
	uint8_t bytecount;		//received bytes counter
	
	//Buffers for storing incoming transmissions
	rf_buffer_t rf_buffers[2];
 32e:	30 81       	ld	r19, Z
	
 330:	91 81       	ldd	r25, Z+1	; 0x01
	//points to the rf_buffer in rf_buffers that will be filled next
 332:	82 81       	ldd	r24, Z+2	; 0x02
 334:	20 e0       	ldi	r18, 0x00	; 0
	rf_buffer_t * rf_buffer_in;
	uint8_t buffer_in_num;
 336:	2f 5f       	subi	r18, 0xFF	; 255
 338:	26 17       	cp	r18, r22
 33a:	e9 f7       	brne	.-6      	; 0x336 <fadeToColor+0xe>
	rf_buffer_t * rf_buffer_out;
	uint8_t buffer_out_num;
}rf_rx_buffer_t;


//Buffer and status for the message to be transmitted
 33c:	30 93 7a 00 	sts	0x007A, r19
extern rf_tx_buffer_t rf_tx_buffer;
 340:	90 93 7b 00 	sts	0x007B, r25

 344:	80 93 7c 00 	sts	0x007C, r24
 348:	08 95       	ret

0000034a <rlight_process_msg>:
//buffer and status for the message to be received
extern rf_rx_buffer_t rf_rx_buffer;


void rfm12_set_wakeup_timer(uint16_t val);
void rfm12_powerDown();
 34a:	dc 01       	movw	r26, r24
uint8_t rfm12_lowPowerTx( uint8_t len, uint8_t type, uint8_t *data );


//inline function to return the rx buffer status byte
//(returns STATUS_FREE or STATUS_COMPLETE)
 34c:	8c 91       	ld	r24, X
 34e:	88 23       	and	r24, r24
 350:	a9 f4       	brne	.+42     	; 0x37c <rlight_process_msg+0x32>
static inline uint8_t rfm12_rx_status()
{
	return rf_rx_buffer.rf_buffer_out->status;
 352:	e0 91 cb 00 	lds	r30, 0x00CB
 356:	f0 91 cc 00 	lds	r31, 0x00CC
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	70 f0       	brcs	.+28     	; 0x37c <rlight_process_msg+0x32>
}

 360:	fd 01       	movw	r30, r26
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	80 93 7d 00 	sts	0x007D, r24
 368:	82 81       	ldd	r24, Z+2	; 0x02
 36a:	80 93 7e 00 	sts	0x007E, r24
 36e:	83 81       	ldd	r24, Z+3	; 0x03
 370:	80 93 7f 00 	sts	0x007F, r24
static inline uint8_t rfm12_rx_len()
{
	return rf_rx_buffer.rf_buffer_out->len;
 374:	60 e8       	ldi	r22, 0x80	; 128
 376:	8d e7       	ldi	r24, 0x7D	; 125
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	d6 df       	rcall	.-84     	; 0x328 <fadeToColor>
 37c:	08 95       	ret

0000037e <main>:
}

static inline uint8_t rfm12_rx_type()
{
	return rf_rx_buffer.rf_buffer_out->type;
}
 37e:	c8 e4       	ldi	r28, 0x48	; 72
 380:	d4 e0       	ldi	r29, 0x04	; 4
 382:	de bf       	out	0x3e, r29	; 62
 384:	cd bf       	out	0x3d, r28	; 61



//inline function to retrieve current rf buffer
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	84 bb       	out	0x14, r24	; 20
static inline uint8_t *rfm12_rx_buffer()
 38a:	15 ba       	out	0x15, r1	; 21
 38c:	24 ec       	ldi	r18, 0xC4	; 196
 38e:	39 e0       	ldi	r19, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 390:	80 e9       	ldi	r24, 0x90	; 144
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 39c:	c9 f7       	brne	.-14     	; 0x390 <main+0x12>
 39e:	24 ec       	ldi	r18, 0xC4	; 196
 3a0:	39 e0       	ldi	r19, 0x09	; 9
 3a2:	80 e9       	ldi	r24, 0x90	; 144
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ae:	c9 f7       	brne	.-14     	; 0x3a2 <main+0x24>

static inline uint8_t rfm12_rx_type()
{
	return rf_rx_buffer.rf_buffer_out->type;
}

 3b0:	de 01       	movw	r26, r28
 3b2:	14 96       	adiw	r26, 0x04	; 4
 3b4:	e0 e6       	ldi	r30, 0x60	; 96
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	01 90       	ld	r0, Z+
 3bc:	0d 92       	st	X+, r0
 3be:	81 50       	subi	r24, 0x01	; 1
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x3c>
//inline function to retrieve current rf buffer
static inline uint8_t *rfm12_rx_buffer()
{
	return (uint8_t*) rf_rx_buffer.rf_buffer_out->buffer;
}

 3c2:	a5 df       	rcall	.-182    	; 0x30e <timer1_init>

 3c4:	b1 d1       	rcall	.+866    	; 0x728 <rfm12_init>
 3c6:	24 ec       	ldi	r18, 0xC4	; 196
 3c8:	39 e0       	ldi	r19, 0x09	; 9
 3ca:	80 e9       	ldi	r24, 0x90	; 144
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <main+0x4c>
 3d8:	24 ec       	ldi	r18, 0xC4	; 196
 3da:	39 e0       	ldi	r19, 0x09	; 9
 3dc:	80 e9       	ldi	r24, 0x90	; 144
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <main+0x5e>

//inline function to clear buffer complete/occupied status
static inline void rfm12_rx_clear()
{
 3ea:	78 94       	sei
	//mark the current buffer as empty
	rf_rx_buffer.rf_buffer_out->status = STATUS_FREE;
 3ec:	ae 01       	movw	r20, r28
 3ee:	4c 5f       	subi	r20, 0xFC	; 252
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	62 ee       	ldi	r22, 0xE2	; 226
 3f4:	8a e0       	ldi	r24, 0x0A	; 10
 3f6:	7b d1       	rcall	.+758    	; 0x6ee <rfm12_tx>
	
	//switch to the other buffer
 3f8:	de 01       	movw	r26, r28
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	e4 e7       	ldi	r30, 0x74	; 116
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	81 50       	subi	r24, 0x01	; 1
 408:	e1 f7       	brne	.-8      	; 0x402 <main+0x84>
 40a:	60 e8       	ldi	r22, 0x80	; 128
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	8b df       	rcall	.-234    	; 0x328 <fadeToColor>
	rf_rx_buffer.buffer_out_num = (rf_rx_buffer.buffer_out_num + 1 ) % 2 ;
	rf_rx_buffer.rf_buffer_out = &rf_rx_buffer.rf_buffers[rf_rx_buffer.buffer_out_num];
}

 412:	13 d1       	rcall	.+550    	; 0x63a <rfm12_tick>

//inline function to return the rx buffer status byte
//(returns STATUS_FREE or STATUS_COMPLETE)
static inline uint8_t rfm12_rx_status()
{
	return rf_rx_buffer.rf_buffer_out->status;
 414:	e0 91 cb 00 	lds	r30, 0x00CB
 418:	f0 91 cc 00 	lds	r31, 0x00CC
 41c:	80 81       	ld	r24, Z
	rf_rx_buffer.buffer_out_num = (rf_rx_buffer.buffer_out_num + 1 ) % 2 ;
	rf_rx_buffer.rf_buffer_out = &rf_rx_buffer.rf_buffers[rf_rx_buffer.buffer_out_num];
}

#ifdef RFM12_RECEIVE_CW
#define RFRXBUF_SIZE 55
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	c1 f7       	brne	.-16     	; 0x412 <main+0x94>
#define STATE_EMPTY 0
#define STATE_RECEIVING 1
#define STATE_FULL 2
 422:	82 81       	ldd	r24, Z+2	; 0x02
 424:	82 3e       	cpi	r24, 0xE2	; 226
 426:	19 f4       	brne	.+6      	; 0x42e <main+0xb0>

typedef struct{
volatile	uint8_t p;
volatile	uint8_t state;
	uint8_t buf[RFRXBUF_SIZE];
}rfrxbuf_t;
 428:	cf 01       	movw	r24, r30
 42a:	04 96       	adiw	r24, 0x04	; 4
 42c:	8e df       	rcall	.-228    	; 0x34a <rlight_process_msg>

 42e:	17 df       	rcall	.-466    	; 0x25e <rfm12_rx_clear>
 430:	f0 cf       	rjmp	.-32     	; 0x412 <main+0x94>

00000432 <rfm12_data>:
}rf_rx_buffer_t;


//Buffer and status for the message to be transmitted
extern rf_tx_buffer_t rf_tx_buffer;

 432:	9c 01       	movw	r18, r24
//buffer and status for the message to be received
 434:	96 98       	cbi	0x12, 6	; 18
extern rf_rx_buffer_t rf_rx_buffer;

 436:	83 2f       	mov	r24, r19
 438:	99 27       	eor	r25, r25
 43a:	8f b9       	out	0x0f, r24	; 15

 43c:	77 9b       	sbis	0x0e, 7	; 14
 43e:	fe cf       	rjmp	.-4      	; 0x43c <rfm12_data+0xa>
void rfm12_set_wakeup_timer(uint16_t val);
void rfm12_powerDown();
 440:	2f b9       	out	0x0f, r18	; 15
uint8_t rfm12_lowPowerTx( uint8_t len, uint8_t type, uint8_t *data );
 442:	77 9b       	sbis	0x0e, 7	; 14
 444:	fe cf       	rjmp	.-4      	; 0x442 <rfm12_data+0x10>


//inline function to return the rx buffer status byte
//(returns STATUS_FREE or STATUS_COMPLETE)
static inline uint8_t rfm12_rx_status()
 446:	96 9a       	sbi	0x12, 6	; 18
 448:	08 95       	ret

0000044a <rfm12_read>:
{
	return rf_rx_buffer.rf_buffer_out->status;
}

static inline uint8_t rfm12_rx_len()
 44a:	9c 01       	movw	r18, r24
{
	return rf_rx_buffer.rf_buffer_out->len;
 44c:	96 98       	cbi	0x12, 6	; 18
}

static inline uint8_t rfm12_rx_type()
 44e:	89 2f       	mov	r24, r25
 450:	99 27       	eor	r25, r25
 452:	8f b9       	out	0x0f, r24	; 15
{
 454:	77 9b       	sbis	0x0e, 7	; 14
 456:	fe cf       	rjmp	.-4      	; 0x454 <rfm12_read+0xa>
	return rf_rx_buffer.rf_buffer_out->type;
 458:	8f b1       	in	r24, 0x0f	; 15
}
 45a:	2f b9       	out	0x0f, r18	; 15

 45c:	77 9b       	sbis	0x0e, 7	; 14
 45e:	fe cf       	rjmp	.-4      	; 0x45c <rfm12_read+0x12>

 460:	2f b1       	in	r18, 0x0f	; 15
	return rf_rx_buffer.rf_buffer_out->len;
}

static inline uint8_t rfm12_rx_type()
{
	return rf_rx_buffer.rf_buffer_out->type;
 462:	99 27       	eor	r25, r25
 464:	98 2f       	mov	r25, r24
 466:	88 27       	eor	r24, r24

//inline function to retrieve current rf buffer
static inline uint8_t *rfm12_rx_buffer()
{
	return (uint8_t*) rf_rx_buffer.rf_buffer_out->buffer;
}
 468:	96 9a       	sbi	0x12, 6	; 18
 46a:	33 27       	eor	r19, r19


 46c:	82 2b       	or	r24, r18
 46e:	93 2b       	or	r25, r19
 470:	08 95       	ret

00000472 <rfm12_data_inline>:
 472:	96 98       	cbi	0x12, 6	; 18
 474:	8f b9       	out	0x0f, r24	; 15
 476:	77 9b       	sbis	0x0e, 7	; 14
 478:	fe cf       	rjmp	.-4      	; 0x476 <rfm12_data_inline+0x4>
 47a:	6f b9       	out	0x0f, r22	; 15
 47c:	77 9b       	sbis	0x0e, 7	; 14
 47e:	fe cf       	rjmp	.-4      	; 0x47c <rfm12_data_inline+0xa>
 480:	96 9a       	sbi	0x12, 6	; 18
 482:	08 95       	ret

00000484 <rfm12_read_fifo_inline>:
 484:	96 98       	cbi	0x12, 6	; 18
 486:	80 eb       	ldi	r24, 0xB0	; 176
 488:	8f b9       	out	0x0f, r24	; 15
 48a:	77 9b       	sbis	0x0e, 7	; 14
 48c:	fe cf       	rjmp	.-4      	; 0x48a <rfm12_read_fifo_inline+0x6>
 48e:	1f b8       	out	0x0f, r1	; 15
 490:	77 9b       	sbis	0x0e, 7	; 14
 492:	fe cf       	rjmp	.-4      	; 0x490 <rfm12_read_fifo_inline+0xc>
 494:	96 9a       	sbi	0x12, 6	; 18
 496:	8f b1       	in	r24, 0x0f	; 15
 498:	99 27       	eor	r25, r25
 49a:	08 95       	ret

0000049c <__vector_2>:
 49c:	78 94       	sei
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	1f 93       	push	r17
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
 4c2:	8b b7       	in	r24, 0x3b	; 59
 4c4:	8f 77       	andi	r24, 0x7F	; 127
 4c6:	8b bf       	out	0x3b, r24	; 59
static inline void rfm12_rx_clear()
{
	//mark the current buffer as empty
	rf_rx_buffer.rf_buffer_out->status = STATUS_FREE;
	
	//switch to the other buffer
 4c8:	96 98       	cbi	0x12, 6	; 18
	rf_rx_buffer.buffer_out_num = (rf_rx_buffer.buffer_out_num + 1 ) % 2 ;
	rf_rx_buffer.rf_buffer_out = &rf_rx_buffer.rf_buffers[rf_rx_buffer.buffer_out_num];
 4ca:	1f b8       	out	0x0f, r1	; 15
}
 4cc:	77 9b       	sbis	0x0e, 7	; 14
 4ce:	fe cf       	rjmp	.-4      	; 0x4cc <__vector_2+0x30>

 4d0:	96 9a       	sbi	0x12, 6	; 18
 4d2:	7f 9b       	sbis	0x0f, 7	; 15
 4d4:	9d c0       	rjmp	.+314    	; 0x610 <__vector_2+0x174>
 4d6:	80 91 ce 00 	lds	r24, 0x00CE
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	d9 f4       	brne	.+54     	; 0x514 <__vector_2+0x78>
 4de:	90 91 d1 00 	lds	r25, 0x00D1
 4e2:	80 91 d0 00 	lds	r24, 0x00D0
 4e6:	98 17       	cp	r25, r24
 4e8:	50 f4       	brcc	.+20     	; 0x4fe <__vector_2+0x62>
 4ea:	e9 2f       	mov	r30, r25
 4ec:	ff 27       	eor	r31, r31
 4ee:	e1 53       	subi	r30, 0x31	; 49
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	63 81       	ldd	r22, Z+3	; 0x03
 4f4:	9f 5f       	subi	r25, 0xFF	; 255
 4f6:	90 93 d1 00 	sts	0x00D1, r25
 4fa:	88 eb       	ldi	r24, 0xB8	; 184
 4fc:	88 c0       	rjmp	.+272    	; 0x60e <__vector_2+0x172>
 4fe:	10 92 cf 00 	sts	0x00CF, r1
 502:	10 92 ce 00 	sts	0x00CE, r1
 506:	81 e8       	ldi	r24, 0x81	; 129
 508:	92 e8       	ldi	r25, 0x82	; 130
 50a:	93 df       	rcall	.-218    	; 0x432 <rfm12_data>
 50c:	6a ea       	ldi	r22, 0xAA	; 170
 50e:	88 eb       	ldi	r24, 0xB8	; 184
 510:	b0 df       	rcall	.-160    	; 0x472 <rfm12_data_inline>
 512:	78 c0       	rjmp	.+240    	; 0x604 <__vector_2+0x168>
 514:	80 91 81 00 	lds	r24, 0x0081
 518:	88 23       	and	r24, r24
 51a:	d1 f4       	brne	.+52     	; 0x550 <__vector_2+0xb4>
 51c:	11 e0       	ldi	r17, 0x01	; 1
 51e:	10 93 83 00 	sts	0x0083, r17
 522:	b0 df       	rcall	.-160    	; 0x484 <rfm12_read_fifo_inline>
 524:	98 2f       	mov	r25, r24
 526:	80 93 80 00 	sts	0x0080, r24
 52a:	9d 5f       	subi	r25, 0xFD	; 253
 52c:	90 93 82 00 	sts	0x0082, r25
 530:	93 50       	subi	r25, 0x03	; 3
 532:	e0 91 c8 00 	lds	r30, 0x00C8
 536:	f0 91 c9 00 	lds	r31, 0x00C9
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	21 f4       	brne	.+8      	; 0x548 <__vector_2+0xac>
 540:	10 93 81 00 	sts	0x0081, r17
 544:	91 83       	std	Z+1, r25	; 0x01
 546:	64 c0       	rjmp	.+200    	; 0x610 <__vector_2+0x174>
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	80 93 81 00 	sts	0x0081, r24
 54e:	60 c0       	rjmp	.+192    	; 0x610 <__vector_2+0x174>
 550:	80 91 81 00 	lds	r24, 0x0081
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	09 f0       	breq	.+2      	; 0x55a <__vector_2+0xbe>
 558:	47 c0       	rjmp	.+142    	; 0x5e8 <__vector_2+0x14c>
 55a:	90 91 83 00 	lds	r25, 0x0083
 55e:	80 91 82 00 	lds	r24, 0x0082
 562:	98 17       	cp	r25, r24
 564:	28 f5       	brcc	.+74     	; 0x5b0 <__vector_2+0x114>
 566:	8e df       	rcall	.-228    	; 0x484 <rfm12_read_fifo_inline>
 568:	90 91 80 00 	lds	r25, 0x0080
 56c:	98 27       	eor	r25, r24
 56e:	90 93 80 00 	sts	0x0080, r25
 572:	20 91 83 00 	lds	r18, 0x0083
 576:	21 32       	cpi	r18, 0x21	; 33
 578:	38 f4       	brcc	.+14     	; 0x588 <__vector_2+0xec>
 57a:	e0 91 c8 00 	lds	r30, 0x00C8
 57e:	f0 91 c9 00 	lds	r31, 0x00C9
 582:	e2 0f       	add	r30, r18
 584:	f1 1d       	adc	r31, r1
 586:	81 83       	std	Z+1, r24	; 0x01
 588:	80 91 83 00 	lds	r24, 0x0083
 58c:	82 30       	cpi	r24, 0x02	; 2
 58e:	51 f4       	brne	.+20     	; 0x5a4 <__vector_2+0x108>
 590:	9f 3f       	cpi	r25, 0xFF	; 255
 592:	41 f0       	breq	.+16     	; 0x5a4 <__vector_2+0x108>
 594:	10 92 81 00 	sts	0x0081, r1
 598:	61 e8       	ldi	r22, 0x81	; 129
 59a:	8a ec       	ldi	r24, 0xCA	; 202
 59c:	6a df       	rcall	.-300    	; 0x472 <rfm12_data_inline>
 59e:	63 e8       	ldi	r22, 0x83	; 131
 5a0:	8a ec       	ldi	r24, 0xCA	; 202
 5a2:	67 df       	rcall	.-306    	; 0x472 <rfm12_data_inline>
 5a4:	80 91 83 00 	lds	r24, 0x0083
 5a8:	8f 5f       	subi	r24, 0xFF	; 255
 5aa:	80 93 83 00 	sts	0x0083, r24
 5ae:	30 c0       	rjmp	.+96     	; 0x610 <__vector_2+0x174>
 5b0:	10 92 81 00 	sts	0x0081, r1
 5b4:	e0 91 c8 00 	lds	r30, 0x00C8
 5b8:	f0 91 c9 00 	lds	r31, 0x00C9
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	80 83       	st	Z, r24
 5c0:	80 91 ca 00 	lds	r24, 0x00CA
 5c4:	99 27       	eor	r25, r25
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	81 70       	andi	r24, 0x01	; 1
 5ca:	90 70       	andi	r25, 0x00	; 0
 5cc:	28 2f       	mov	r18, r24
 5ce:	80 93 ca 00 	sts	0x00CA, r24
 5d2:	82 e2       	ldi	r24, 0x22	; 34
 5d4:	28 9f       	mul	r18, r24
 5d6:	90 01       	movw	r18, r0
 5d8:	11 24       	eor	r1, r1
 5da:	2c 57       	subi	r18, 0x7C	; 124
 5dc:	3f 4f       	sbci	r19, 0xFF	; 255
 5de:	30 93 c9 00 	sts	0x00C9, r19
 5e2:	20 93 c8 00 	sts	0x00C8, r18
 5e6:	0e c0       	rjmp	.+28     	; 0x604 <__vector_2+0x168>
 5e8:	80 91 81 00 	lds	r24, 0x0081
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	81 f4       	brne	.+32     	; 0x610 <__vector_2+0x174>
 5f0:	90 91 83 00 	lds	r25, 0x0083
 5f4:	80 91 82 00 	lds	r24, 0x0082
 5f8:	98 17       	cp	r25, r24
 5fa:	10 f4       	brcc	.+4      	; 0x600 <__vector_2+0x164>
 5fc:	43 df       	rcall	.-378    	; 0x484 <rfm12_read_fifo_inline>
 5fe:	08 c0       	rjmp	.+16     	; 0x610 <__vector_2+0x174>
 600:	10 92 81 00 	sts	0x0081, r1
 604:	61 e8       	ldi	r22, 0x81	; 129
 606:	8a ec       	ldi	r24, 0xCA	; 202
 608:	34 df       	rcall	.-408    	; 0x472 <rfm12_data_inline>
 60a:	63 e8       	ldi	r22, 0x83	; 131
 60c:	8a ec       	ldi	r24, 0xCA	; 202
 60e:	31 df       	rcall	.-414    	; 0x472 <rfm12_data_inline>
 610:	8b b7       	in	r24, 0x3b	; 59
 612:	80 68       	ori	r24, 0x80	; 128
 614:	8b bf       	out	0x3b, r24	; 59
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	1f 91       	pop	r17
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <rfm12_tick>:
 63a:	1f 93       	push	r17
 63c:	80 91 ce 00 	lds	r24, 0x00CE
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	89 f1       	breq	.+98     	; 0x6a6 <rfm12_tick+0x6c>
 644:	8b b7       	in	r24, 0x3b	; 59
 646:	8f 77       	andi	r24, 0x7F	; 127
 648:	8b bf       	out	0x3b, r24	; 59
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	fd de       	rcall	.-518    	; 0x44a <rfm12_read>
 650:	2b b7       	in	r18, 0x3b	; 59
 652:	20 68       	ori	r18, 0x80	; 128
 654:	2b bf       	out	0x3b, r18	; 59
 656:	90 ff       	sbrs	r25, 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <rfm12_tick+0x28>
 65a:	88 ec       	ldi	r24, 0xC8	; 200
 65c:	80 93 78 00 	sts	0x0078, r24
 660:	22 c0       	rjmp	.+68     	; 0x6a6 <rfm12_tick+0x6c>
 662:	80 91 78 00 	lds	r24, 0x0078
 666:	81 50       	subi	r24, 0x01	; 1
 668:	80 93 78 00 	sts	0x0078, r24
 66c:	88 23       	and	r24, r24
 66e:	d9 f4       	brne	.+54     	; 0x6a6 <rfm12_tick+0x6c>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	80 93 78 00 	sts	0x0078, r24
 676:	10 91 cf 00 	lds	r17, 0x00CF
 67a:	11 30       	cpi	r17, 0x01	; 1
 67c:	a1 f4       	brne	.+40     	; 0x6a6 <rfm12_tick+0x6c>
 67e:	8b b7       	in	r24, 0x3b	; 59
 680:	8f 77       	andi	r24, 0x7F	; 127
 682:	8b bf       	out	0x3b, r24	; 59
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	92 e8       	ldi	r25, 0x82	; 130
 688:	d4 de       	rcall	.-600    	; 0x432 <rfm12_data>
 68a:	10 93 ce 00 	sts	0x00CE, r17
 68e:	8a ea       	ldi	r24, 0xAA	; 170
 690:	98 eb       	ldi	r25, 0xB8	; 184
 692:	cf de       	rcall	.-610    	; 0x432 <rfm12_data>
 694:	8a ea       	ldi	r24, 0xAA	; 170
 696:	98 eb       	ldi	r25, 0xB8	; 184
 698:	cc de       	rcall	.-616    	; 0x432 <rfm12_data>
 69a:	81 e2       	ldi	r24, 0x21	; 33
 69c:	92 e8       	ldi	r25, 0x82	; 130
 69e:	c9 de       	rcall	.-622    	; 0x432 <rfm12_data>
 6a0:	8b b7       	in	r24, 0x3b	; 59
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	8b bf       	out	0x3b, r24	; 59
 6a6:	1f 91       	pop	r17
 6a8:	08 95       	ret

000006aa <rfm12_start_tx>:
 6aa:	98 2f       	mov	r25, r24
 6ac:	80 91 cf 00 	lds	r24, 0x00CF
 6b0:	88 23       	and	r24, r24
 6b2:	19 f0       	breq	.+6      	; 0x6ba <rfm12_start_tx+0x10>
 6b4:	83 e0       	ldi	r24, 0x03	; 3
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	6a 5f       	subi	r22, 0xFA	; 250
 6bc:	60 93 d0 00 	sts	0x00D0, r22
 6c0:	66 50       	subi	r22, 0x06	; 6
 6c2:	60 93 d4 00 	sts	0x00D4, r22
 6c6:	90 93 d5 00 	sts	0x00D5, r25
 6ca:	69 27       	eor	r22, r25
 6cc:	60 95       	com	r22
 6ce:	60 93 d6 00 	sts	0x00D6, r22
 6d2:	10 92 d1 00 	sts	0x00D1, r1
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	80 93 cf 00 	sts	0x00CF, r24
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	08 95       	ret

000006e2 <spi_init>:
 6e2:	87 b3       	in	r24, 0x17	; 23
 6e4:	8c 62       	ori	r24, 0x2C	; 44
 6e6:	87 bb       	out	0x17, r24	; 23
 6e8:	81 e5       	ldi	r24, 0x51	; 81
 6ea:	8d b9       	out	0x0d, r24	; 13
 6ec:	08 95       	ret

000006ee <rfm12_tx>:
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	18 2f       	mov	r17, r24
 6f4:	06 2f       	mov	r16, r22
 6f6:	ba 01       	movw	r22, r20
 6f8:	8f 31       	cpi	r24, 0x1F	; 31
 6fa:	18 f0       	brcs	.+6      	; 0x702 <rfm12_tx+0x14>
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	10 c0       	rjmp	.+32     	; 0x722 <rfm12_tx+0x34>
 702:	80 91 cf 00 	lds	r24, 0x00CF
 706:	88 23       	and	r24, r24
 708:	19 f0       	breq	.+6      	; 0x710 <rfm12_tx+0x22>
 70a:	83 e0       	ldi	r24, 0x03	; 3
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	09 c0       	rjmp	.+18     	; 0x722 <rfm12_tx+0x34>
 710:	41 2f       	mov	r20, r17
 712:	55 27       	eor	r21, r21
 714:	87 ed       	ldi	r24, 0xD7	; 215
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	46 d0       	rcall	.+140    	; 0x7a6 <memcpy>
 71a:	61 2f       	mov	r22, r17
 71c:	80 2f       	mov	r24, r16
 71e:	c5 df       	rcall	.-118    	; 0x6aa <rfm12_start_tx>
 720:	99 27       	eor	r25, r25
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	08 95       	ret

00000728 <rfm12_init>:
 728:	96 9a       	sbi	0x12, 6	; 18
 72a:	8e 9a       	sbi	0x11, 6	; 17
 72c:	87 b3       	in	r24, 0x17	; 23
 72e:	8c 62       	ori	r24, 0x2C	; 44
 730:	87 bb       	out	0x17, r24	; 23
 732:	81 e5       	ldi	r24, 0x51	; 81
 734:	8d b9       	out	0x0d, r24	; 13
 736:	8d e2       	ldi	r24, 0x2D	; 45
 738:	80 93 d2 00 	sts	0x00D2, r24
 73c:	84 ed       	ldi	r24, 0xD4	; 212
 73e:	80 93 d3 00 	sts	0x00D3, r24
 742:	84 e8       	ldi	r24, 0x84	; 132
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 cc 00 	sts	0x00CC, r25
 74a:	80 93 cb 00 	sts	0x00CB, r24
 74e:	90 93 c9 00 	sts	0x00C9, r25
 752:	80 93 c8 00 	sts	0x00C8, r24
 756:	87 ed       	ldi	r24, 0xD7	; 215
 758:	90 e8       	ldi	r25, 0x80	; 128
 75a:	6b de       	rcall	.-810    	; 0x432 <rfm12_data>
 75c:	8b ea       	ldi	r24, 0xAB	; 171
 75e:	92 ec       	ldi	r25, 0xC2	; 194
 760:	68 de       	rcall	.-816    	; 0x432 <rfm12_data>
 762:	81 e8       	ldi	r24, 0x81	; 129
 764:	9a ec       	ldi	r25, 0xCA	; 202
 766:	65 de       	rcall	.-822    	; 0x432 <rfm12_data>
 768:	87 ef       	ldi	r24, 0xF7	; 247
 76a:	94 ec       	ldi	r25, 0xC4	; 196
 76c:	62 de       	rcall	.-828    	; 0x432 <rfm12_data>
 76e:	80 eb       	ldi	r24, 0xB0	; 176
 770:	94 ea       	ldi	r25, 0xA4	; 164
 772:	5f de       	rcall	.-834    	; 0x432 <rfm12_data>
 774:	83 e2       	ldi	r24, 0x23	; 35
 776:	96 ec       	ldi	r25, 0xC6	; 198
 778:	5c de       	rcall	.-840    	; 0x432 <rfm12_data>
 77a:	8c e2       	ldi	r24, 0x2C	; 44
 77c:	94 e9       	ldi	r25, 0x94	; 148
 77e:	59 de       	rcall	.-846    	; 0x432 <rfm12_data>
 780:	80 e7       	ldi	r24, 0x70	; 112
 782:	98 e9       	ldi	r25, 0x98	; 152
 784:	56 de       	rcall	.-852    	; 0x432 <rfm12_data>
 786:	81 e8       	ldi	r24, 0x81	; 129
 788:	92 e8       	ldi	r25, 0x82	; 130
 78a:	53 de       	rcall	.-858    	; 0x432 <rfm12_data>
 78c:	81 e8       	ldi	r24, 0x81	; 129
 78e:	9a ec       	ldi	r25, 0xCA	; 202
 790:	50 de       	rcall	.-864    	; 0x432 <rfm12_data>
 792:	83 e8       	ldi	r24, 0x83	; 131
 794:	9a ec       	ldi	r25, 0xCA	; 202
 796:	4d de       	rcall	.-870    	; 0x432 <rfm12_data>
 798:	85 b7       	in	r24, 0x35	; 53
 79a:	88 60       	ori	r24, 0x08	; 8
 79c:	85 bf       	out	0x35, r24	; 53
 79e:	8b b7       	in	r24, 0x3b	; 59
 7a0:	80 68       	ori	r24, 0x80	; 128
 7a2:	8b bf       	out	0x3b, r24	; 59
 7a4:	08 95       	ret

000007a6 <memcpy>:
 7a6:	fb 01       	movw	r30, r22
 7a8:	dc 01       	movw	r26, r24
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <memcpy+0xa>
 7ac:	01 90       	ld	r0, Z+
 7ae:	0d 92       	st	X+, r0
 7b0:	41 50       	subi	r20, 0x01	; 1
 7b2:	50 40       	sbci	r21, 0x00	; 0
 7b4:	d8 f7       	brcc	.-10     	; 0x7ac <memcpy+0x6>
 7b6:	08 95       	ret

000007b8 <_exit>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <_exit>
