Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                              rfm12.o (memcpy)

Allocating common symbols
Common symbol       size              file

rf_rx_buffer        0x4d              rfm12.o
rfm12_mode          0x1               rfm12.o
rf_tx_buffer        0x26              rfm12.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
LOAD main.o
LOAD rfm12.o
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x7ba
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026      0x200 main.o
                0x0000000000000026                timeTable
                0x0000000000000226                . = ALIGN (0x2)
                0x0000000000000226                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000226        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000226                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000226                __ctors_start = .
 *(.ctors)
                0x0000000000000226                __ctors_end = .
                0x0000000000000226                __dtors_start = .
 *(.dtors)
                0x0000000000000226                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000226        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000226                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000226        0xc /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000232       0x16 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                0x0000000000000232                __do_copy_data
 .init4         0x0000000000000248       0x10 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000248                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000258        0x4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000000000025c        0x2 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x000000000000025c                __vector_1
                0x000000000000025c                __vector_12
                0x000000000000025c                __bad_interrupt
                0x000000000000025c                __vector_3
                0x000000000000025c                __vector_11
                0x000000000000025c                __vector_13
                0x000000000000025c                __vector_17
                0x000000000000025c                __vector_7
                0x000000000000025c                __vector_5
                0x000000000000025c                __vector_4
                0x000000000000025c                __vector_9
                0x000000000000025c                __vector_15
                0x000000000000025c                __vector_8
                0x000000000000025c                __vector_14
                0x000000000000025c                __vector_10
                0x000000000000025c                __vector_16
                0x000000000000025c                __vector_18
 .text          0x000000000000025e      0x1d4 main.o
                0x0000000000000328                fadeToColor
                0x0000000000000290                __vector_6
                0x000000000000034a                rlight_process_msg
                0x000000000000030e                timer1_init
                0x000000000000037e                main
 .text          0x0000000000000432      0x374 rfm12.o
                0x000000000000044a                rfm12_read
                0x000000000000063a                rfm12_tick
                0x0000000000000432                rfm12_data
                0x00000000000006e2                spi_init
                0x00000000000006ee                rfm12_tx
                0x00000000000006aa                rfm12_start_tx
                0x000000000000049c                __vector_2
                0x0000000000000728                rfm12_init
 .text          0x00000000000007a6        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text          0x00000000000007a6        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text          0x00000000000007a6        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .text          0x00000000000007a6       0x12 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                0x00000000000007a6                memcpy
                0x00000000000007b8                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000000000007b8        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000007b8        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000007b8        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                0x00000000000007b8                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000007b8        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                0x00000000000007b8                exit
                0x00000000000007b8                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000007b8        0x2 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000007ba                _etext = .

.data           0x0000000000800060       0x1a load address 0x00000000000007ba
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060       0x18 main.o
 .data          0x0000000000800078        0x1 rfm12.o
 .data          0x0000000000800079        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800079        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800079        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .data          0x0000000000800079        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x000000000080007a                . = ALIGN (0x2)
 *fill*         0x0000000000800079        0x1 00
                0x000000000080007a                _edata = .
                0x000000000080007a                PROVIDE (__data_end, .)

.bss            0x000000000080007a       0x7b load address 0x00000000000007d4
                0x000000000080007a                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x000000000080007a        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .bss           0x000000000080007a        0x6 main.o
                0x000000000080007a                color
 .bss           0x0000000000800080        0x1 rfm12.o
 .bss           0x0000000000800081        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800081        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800081        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800081        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800081       0x74 rfm12.o
                0x0000000000800081                rf_rx_buffer
                0x00000000008000ce                rfm12_mode
                0x00000000008000cf                rf_tx_buffer
                0x00000000008000f5                PROVIDE (__bss_end, .)
                0x00000000000007ba                __data_load_start = LOADADDR (.data)
                0x00000000000007d4                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008000f5        0x0
                0x00000000008000f5                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008000f5                PROVIDE (__noinit_end, .)
                0x00000000008000f5                _end = .
                0x00000000008000f5                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x1d70
 *(.stab)
 .stab          0x0000000000000000      0x6b4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .stab          0x00000000000006b4      0xb10 main.o
                                        0xb1c (size before relaxing)
 .stab          0x00000000000011c4      0xb28 rfm12.o
                                        0xd08 (size before relaxing)
 .stab          0x0000000000001cec       0x84 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                                         0x90 (size before relaxing)

.stabstr        0x0000000000000000     0x10ac
 *(.stabstr)
 .stabstr       0x0000000000000000     0x10ac /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
