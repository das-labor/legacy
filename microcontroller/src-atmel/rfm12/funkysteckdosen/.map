Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                              rfm12.o (memcpy)

Allocating common symbols
Common symbol       size              file

rf_rx_buffer        0x4d              rfm12.o
rfm12_mode          0x1               rfm12.o
rf_tx_buffer        0x26              rfm12.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libm.a
LOAD main.o
LOAD rfm12.o
LOAD ../../lib/AvrX2.6f/avrx//avrx.a
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x512
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000026                . = ALIGN (0x2)
                0x0000000000000026                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000026        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000026                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000026                __ctors_start = .
 *(.ctors)
                0x0000000000000026                __ctors_end = .
                0x0000000000000026                __dtors_start = .
 *(.dtors)
                0x0000000000000026                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000026        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000026                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000026        0xc /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000032       0x16 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                0x0000000000000032                __do_copy_data
 .init4         0x0000000000000048       0x10 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000048                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000058        0x4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000000000005c        0x2 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                0x000000000000005c                __vector_12
                0x000000000000005c                __bad_interrupt
                0x000000000000005c                __vector_6
                0x000000000000005c                __vector_3
                0x000000000000005c                __vector_11
                0x000000000000005c                __vector_13
                0x000000000000005c                __vector_17
                0x000000000000005c                __vector_7
                0x000000000000005c                __vector_5
                0x000000000000005c                __vector_4
                0x000000000000005c                __vector_2
                0x000000000000005c                __vector_15
                0x000000000000005c                __vector_8
                0x000000000000005c                __vector_14
                0x000000000000005c                __vector_10
                0x000000000000005c                __vector_16
                0x000000000000005c                __vector_18
 .text          0x000000000000005e      0x146 main.o
                0x000000000000005e                timer_init
                0x0000000000000180                main
                0x000000000000006c                __vector_9
 .text          0x00000000000001a4      0x35a rfm12.o
                0x000000000000020e                __vector_1
                0x00000000000001bc                rfm12_read
                0x00000000000003ac                rfm12_tick
                0x00000000000001a4                rfm12_data
                0x000000000000043a                spi_init
                0x0000000000000446                rfm12_tx
                0x0000000000000402                rfm12_start_tx
                0x0000000000000480                rfm12_init
 .text          0x00000000000004fe        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text          0x00000000000004fe        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text          0x00000000000004fe        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .text          0x00000000000004fe       0x12 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                0x00000000000004fe                memcpy
                0x0000000000000510                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000000000000510        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000510        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000510        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000510                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000510        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                0x0000000000000510                exit
                0x0000000000000510                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000510        0x2 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000512                _etext = .

.data           0x0000000000800060        0xe load address 0x0000000000000512
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060        0xc main.o
                0x0000000000800060                switchcodes
 .data          0x000000000080006c        0x1 rfm12.o
 .data          0x000000000080006d        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .data          0x000000000080006d        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .data          0x000000000080006d        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .data          0x000000000080006d        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x000000000080006e                . = ALIGN (0x2)
 *fill*         0x000000000080006d        0x1 00
                0x000000000080006e                _edata = .
                0x000000000080006e                PROVIDE (__data_end, .)

.bss            0x000000000080006e       0x77 load address 0x0000000000000520
                0x000000000080006e                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x000000000080006e        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .bss           0x000000000080006e        0x2 main.o
 .bss           0x0000000000800070        0x1 rfm12.o
 .bss           0x0000000000800071        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800071        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800071        0x0 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800071        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800071       0x74 rfm12.o
                0x0000000000800071                rf_rx_buffer
                0x00000000008000be                rfm12_mode
                0x00000000008000bf                rf_tx_buffer
                0x00000000008000e5                PROVIDE (__bss_end, .)
                0x0000000000000512                __data_load_start = LOADADDR (.data)
                0x0000000000000520                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008000e5        0x0
                0x00000000008000e5                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008000e5                PROVIDE (__noinit_end, .)
                0x00000000008000e5                _end = .
                0x00000000008000e5                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x738
 *(.stab)
 .stab          0x0000000000000000      0x6b4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
 .stab          0x00000000000006b4       0x84 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                                         0x90 (size before relaxing)

.stabstr        0x0000000000000000       0x82
 *(.stabstr)
 .stabstr       0x0000000000000000       0x82 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(image.elf elf32-avr)
LOAD linker stubs

Cross Reference Table

Symbol                                            File
__bad_interrupt                                   /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__bss_end                                         /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
__bss_start                                       /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
__data_end                                        /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__data_load_start                                 /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__data_start                                      /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
__do_clear_bss                                    /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_clear_bss.o)
                                                  rfm12.o
                                                  main.o
__do_copy_data                                    /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_copy_data.o)
                                                  rfm12.o
                                                  main.o
__heap_end                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__init                                            /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__stack                                           /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
                                                  main.o
__vector_1                                        rfm12.o
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_10                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_11                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_12                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_13                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_14                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_15                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_16                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_17                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_18                                       /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_2                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_3                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_4                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_5                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_6                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_7                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_8                                        /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_9                                        main.o
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vector_default                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
__vectors                                         /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
_exit                                             /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
exit                                              /usr/lib/gcc/avr/4.2.2/avr4/libgcc.a(_exit.o)
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
main                                              main.o
                                                  /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/crtm8.o
memcpy                                            /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr4/libc.a(memcpy.o)
                                                  rfm12.o
rf_rx_buffer                                      rfm12.o
rf_tx_buffer                                      rfm12.o
rfm12_data                                        rfm12.o
rfm12_init                                        rfm12.o
                                                  main.o
rfm12_mode                                        rfm12.o
rfm12_read                                        rfm12.o
rfm12_start_tx                                    rfm12.o
rfm12_tick                                        rfm12.o
                                                  main.o
rfm12_tx                                          rfm12.o
                                                  main.o
spi_init                                          rfm12.o
switchcodes                                       main.o
timer_init                                        main.o
