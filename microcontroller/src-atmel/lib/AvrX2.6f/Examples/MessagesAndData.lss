
MessagesAndData.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ca  00800060  00800060  00000c76  2**2
                  ALLOC
  3 .noinit       00000000  0080012a  0080012a  00000c76  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000c76  2**0
                  CONTENTS
  5 .stab         000045fc  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000010e5  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 e0 00 	jmp	0x1c0
  38:	0c 94 da 00 	jmp	0x1b4
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	de 00       	.word	0x00de	; ????
  56:	65 00       	.word	0x0065	; ????
  58:	9c 00       	.word	0x009c	; ????
  5a:	03 11       	cpse	r16, r3

0000005b <task1Tcb>:
  5b:	11 01 5a 00 df 00 03                                ..Z....

00000062 <MonitorTcb>:
  62:	9b 00 d6 01 ac 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e2 ee       	ldi	r30, 0xE2	; 226
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 32       	cpi	r26, 0x2A	; 42
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 7f 00 	jmp	0xfe

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
 */
#pragma optimize=z 4
AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Switch to kernel stack/context
  a4:	0e 94 4e 03 	call	0x69c
    TCNT0 = TCNT0_INIT;
  a8:	81 ec       	ldi	r24, 0xC1	; 193
  aa:	82 bf       	out	0x32, r24	; 50
//    outp(TCNT0_INIT, TCNT0);    // Reset timer overflow count
    AvrXTimerHandler();         // Call queue manager
  ac:	0e 94 4d 05 	call	0xa9a
    Epilog();                   // Return to tasks
  b0:	0e 94 9a 03 	call	0x734

000000b4 <task1>:
}
/*
 Task 1 Waits for a message, then updates LED's with the contents.
 */
AVRX_IAR_TASKDEF(task1, 0, 10, 3)
AVRX_GCC_TASKDEF(task1, 10, 3)
{
    MessageControlBlock *p;

    while (1)
    {
        p = AvrXWaitMessage(&MyQueue);
  b4:	82 ea       	ldi	r24, 0xA2	; 162
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 11 05 	call	0xa22
  bc:	fc 01       	movw	r30, r24
        LED = ((MyMessage*)p)->switches;
  be:	84 81       	ldd	r24, Z+4	; 0x04
  c0:	85 bb       	out	0x15, r24	; 21
//        outp(((MyMessage*)p)->switches, LED);
        AvrXAckMessage(p);
  c2:	cf 01       	movw	r24, r30
  c4:	0e 94 4f 04 	call	0x89e
  c8:	f5 cf       	rjmp	.-22     	; 0xb4

000000ca <task2>:
    }
}
/*
 Task 2 Checks switches every 10ms and sends a message whenever SWITCH changes
 */
AVRX_IAR_TASKDEF(task2, 0, 10, 3)
AVRX_GCC_TASKDEF(task2, 10, 3)
{
    static MyMessage SwitchMessage;
    unsigned char current;

	SWITCHP = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	88 bb       	out	0x18, r24	; 24
//    outp(0xFF, SWITCHP);            // Enable pullups on switch inputs

    while (1)
    {
        AvrXDelay(&MyTimer, 10);             // 10ms delay
  ce:	6a e0       	ldi	r22, 0x0A	; 10
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	86 ea       	ldi	r24, 0xA6	; 166
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 1f 05 	call	0xa3e
//        current = inp(SWITCH);
        current = SWITCH;
  da:	96 b3       	in	r25, 0x16	; 22
        if (current != SwitchMessage.switches)
  dc:	80 91 64 00 	lds	r24, 0x0064
  e0:	98 17       	cp	r25, r24
  e2:	a9 f3       	breq	.-22     	; 0xce
        {
            SwitchMessage.switches = current;
  e4:	90 93 64 00 	sts	0x0064, r25
            AvrXSendMessage(&MyQueue, &SwitchMessage.mcb);
  e8:	60 e6       	ldi	r22, 0x60	; 96
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	82 ea       	ldi	r24, 0xA2	; 162
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 08 05 	call	0xa10
            AvrXWaitMessageAck(&SwitchMessage.mcb);
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 38 04 	call	0x870
  fc:	e8 cf       	rjmp	.-48     	; 0xce

000000fe <main>:
        }
    }
}

int main(void)                 // Main runs under the AvrX Stack
{
  fe:	cf e5       	ldi	r28, 0x5F	; 95
 100:	d8 e0       	ldi	r29, 0x08	; 8
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 d3 03 	call	0x7a6

    MCUCR = 1<<SE;
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	85 bf       	out	0x35, r24	; 53
    TCNT0 = TCNT0_INIT;
 112:	81 ec       	ldi	r24, 0xC1	; 193
 114:	82 bf       	out	0x32, r24	; 50
    TCCR0 = TMC8_CK256;
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	83 bf       	out	0x33, r24	; 51
    TIMSK = 1<<TOIE0;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	89 bf       	out	0x39, r24	; 57

    LEDDDR = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	84 bb       	out	0x14, r24	; 20
    LED   = 0xFF;
 122:	85 bb       	out	0x15, r24	; 21
/*
    outp((1<<SE) , MCUCR);      // Enable "Sleep" instruction for idle loop

    outp(TCNT0_INIT, TCNT0);
    outp(TMC8_CK256 , TCCR0);   // Set up Timer0 for CLK/256 rate
    outp((1<<TOIE0), TIMSK);    // Enable0 Timer overflow interrupt

    outp(0xFF, LEDDDR);	        // Make LED port output and
    outp(0xFF, LED);              // drive high (LEDs off)
*/
    AvrXRunTask(TCB(task1));	// Init and run our tasks
 124:	8b e5       	ldi	r24, 0x5B	; 91
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 df 03 	call	0x7be
    AvrXRunTask(TCB(task2));
 12c:	84 e5       	ldi	r24, 0x54	; 84
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 df 03 	call	0x7be
    AvrXRunTask(TCB(Monitor));
 134:	82 e6       	ldi	r24, 0x62	; 98
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 df 03 	call	0x7be

    InitSerialIO(UBRR_INIT);    // Initialize USART baud rate generator
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 d6 00 	call	0x1ac

    /* Needed for EEPROM access in monitor */

    AvrXSetSemaphore(&EEPromMutex);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 51 04 	call	0x8a2

    Epilog();                   // Switch from AvrX Stack to first task
 14c:	0e 94 9a 03 	call	0x734
    while(1);
 150:	ff cf       	rjmp	.-2      	; 0x150

00000152 <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 152:	af 93       	push	r26
        lds     Xl, SioFlags
 154:	a0 91 14 01 	lds	r26, 0x0114
        sbr     Xl, 1<<CharPushed
 158:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 15a:	a0 93 14 01 	sts	0x0114, r26
        pop     Xl
 15e:	af 91       	pop	r26
        ret
 160:	08 95       	ret

00000162 <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 162:	20 91 14 01 	lds	r18, 0x0114
        sbrs    tmp0, CharPushed
 166:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 168:	05 c0       	rjmp	.+10     	; 0x174
        cbr     tmp0, 1<<CharPushed
 16a:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 16c:	06 c0       	rjmp	.+12     	; 0x17a
        sts     SioFlags, tmp0
 16e:	20 93 14 01 	sts	0x0114, r18
        rjmp    gc01
 172:	03 c0       	rjmp	.+6      	; 0x17a

00000174 <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 174:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 176:	86 e1       	ldi	r24, 0x16	; 22
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 178:	7d d3       	rcall	.+1786   	; 0x874

0000017a <gc01>:
gc01:
        lds     r1l, _RxByte
 17a:	80 91 18 01 	lds	r24, 0x0118
        ret
 17e:	08 95       	ret

00000180 <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 180:	f0 df       	rcall	.-32     	; 0x162
        rjmp    PutChar
 182:	28 c0       	rjmp	.+80     	; 0x1d4

00000184 <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 184:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 186:	26 c0       	rjmp	.+76     	; 0x1d4

00000188 <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 188:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 18a:	24 c0       	rjmp	.+72     	; 0x1d4

0000018c <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 18c:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 18e:	f9 2f       	mov	r31, r25

00000190 <_foo>:
_foo:
        lpm
 190:	c8 95       	lpm
        tst     R0
 192:	00 20       	and	r0, r0
        breq    _ps00
 194:	41 f0       	breq	.+16     	; 0x1a6
        mov     p1l, R0
 196:	80 2d       	mov	r24, r0
        push    Zl
 198:	ef 93       	push	r30
        push    Zh
 19a:	ff 93       	push	r31
        rcall   PutChar
 19c:	1b d0       	rcall	.+54     	; 0x1d4
        pop     Zh
 19e:	ff 91       	pop	r31
        pop     Zl
 1a0:	ef 91       	pop	r30
        adiw    Zl, 1
 1a2:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 1a4:	f5 cf       	rjmp	.-22     	; 0x190

000001a6 <_ps00>:
_ps00:
        mov     r1l, Zl
 1a6:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 1a8:	9f 2f       	mov	r25, r31
        ret
 1aa:	08 95       	ret

000001ac <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;
        _FUNCTION(InitSerialIO)
InitSerialIO:
        out     _SFR_IO_ADDR(UBRR), p1l
 1ac:	89 b9       	out	0x09, r24	; 9
#if defined(UBRR0H)
	sts	UBRR0H, p1h	// THIS appears to be a no-op
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 1ae:	28 e9       	ldi	r18, 0x98	; 152
        out     _SFR_IO_ADDR(UCR), tmp0
 1b0:	2a b9       	out	0x0a, r18	; 10
        ret
 1b2:	08 95       	ret

000001b4 <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 1b4:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 1b6:	72 d2       	rcall	.+1252   	; 0x69c

		ldi     p1l, lo8(TxIntFlag)
 1b8:	82 e1       	ldi	r24, 0x12	; 18
        ldi     p1h, hi8(TxIntFlag)
 1ba:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 1bc:	7f d3       	rcall	.+1790   	; 0x8bc

        rjmp    _Epilog
 1be:	bc c2       	rjmp	.+1400   	; 0x738

000001c0 <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 1c0:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 1c2:	6c d2       	rcall	.+1240   	; 0x69c

        in      Xl, _SFR_IO_ADDR(UDR)
 1c4:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 1c6:	a0 93 18 01 	sts	0x0118, r26

        ldi     p1h, hi8(RxC_Flag)
 1ca:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1cc:	86 e1       	ldi	r24, 0x16	; 22
        rcall   AvrXIntSetSemaphore
 1ce:	76 d3       	rcall	.+1772   	; 0x8bc

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 1d0:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 1d2:	b2 c2       	rjmp	.+1380   	; 0x738

000001d4 <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 1d4:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4

        push    p1l
 1d8:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 1da:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 1dc:	82 e1       	ldi	r24, 0x12	; 18
        ldi     p1h, hi8(TxIntFlag)
 1de:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 1e0:	49 d3       	rcall	.+1682   	; 0x874
        pop     p1l
 1e2:	8f 91       	pop	r24

000001e4 <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 1e4:	8c b9       	out	0x0c, r24	; 12
        ret
 1e6:	08 95       	ret

000001e8 <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 1e8:	af 92       	push	r10
        push    R11
 1ea:	bf 92       	push	r11
        push    R12
 1ec:	cf 92       	push	r12
        push    R13
 1ee:	df 92       	push	r13

        mov     R13, p1l
 1f0:	d8 2e       	mov	r13, r24
        clr     R10
 1f2:	aa 24       	eor	r10, r10
        clr     R11
 1f4:	bb 24       	eor	r11, r11
        clr     R12
 1f6:	cc 24       	eor	r12, r12

000001f8 <gh_00>:
gh_00:
        rcall   _GetChar
 1f8:	c3 df       	rcall	.-122    	; 0x180
        rcall   IsHex
 1fa:	21 d0       	rcall	.+66     	; 0x23e
        brtc    gh_xx
 1fc:	96 f4       	brtc	.+36     	; 0x222
        cpi     r1l, '9'+1
 1fe:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 200:	14 f4       	brge	.+4      	; 0x206
        subi    r1l, '0'
 202:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 204:	02 c0       	rjmp	.+4      	; 0x20a

00000206 <gh_01>:
gh_01:
        cbr     r1l, 0x20
 206:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 208:	87 53       	subi	r24, 0x37	; 55

0000020a <gh_02>:
gh_02:
        lsl     R10
 20a:	aa 0c       	add	r10, r10
        rol     R11
 20c:	bb 1c       	adc	r11, r11
        lsl     R10
 20e:	aa 0c       	add	r10, r10
        rol     R11
 210:	bb 1c       	adc	r11, r11
        lsl     R10
 212:	aa 0c       	add	r10, r10
        rol     R11
 214:	bb 1c       	adc	r11, r11
        lsl     R10
 216:	aa 0c       	add	r10, r10
        rol     R11
 218:	bb 1c       	adc	r11, r11
        add     R10, r1l
 21a:	a8 0e       	add	r10, r24
        inc     R12
 21c:	c3 94       	inc	r12
        dec     R13
 21e:	da 94       	dec	r13
        brne    gh_00
 220:	59 f7       	brne	.-42     	; 0x1f8

00000222 <gh_xx>:
gh_xx:
        mov     p2l, R12
 222:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 224:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 226:	9b 2d       	mov	r25, r11

        pop     R13
 228:	df 90       	pop	r13
        pop     R12
 22a:	cf 90       	pop	r12
        pop     R11
 22c:	bf 90       	pop	r11
        pop     R10
 22e:	af 90       	pop	r10
        ret
 230:	08 95       	ret

00000232 <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 232:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 234:	d9 cf       	rjmp	.-78     	; 0x1e8

00000236 <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 236:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 238:	d7 cf       	rjmp	.-82     	; 0x1e8

0000023a <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 23a:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 23c:	d5 cf       	rjmp	.-86     	; 0x1e8

0000023e <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 23e:	8f 93       	push	r24
        lds     p1l, _RxByte
 240:	80 91 18 01 	lds	r24, 0x0118
        clt
 244:	e8 94       	clt
        cpi     p1l, '0'
 246:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 248:	5c f0       	brlt	.+22     	; 0x260
        cpi     p1l, '9'+1
 24a:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 24c:	44 f0       	brlt	.+16     	; 0x25e
        cpi     p1l, 'A'
 24e:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 250:	3c f0       	brlt	.+14     	; 0x260
        cpi     p1l, 'F'+1
 252:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 254:	24 f0       	brlt	.+8      	; 0x25e
        cpi     p1l, 'a'
 256:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 258:	1c f0       	brlt	.+6      	; 0x260
        cpi     p1l, 'f'+1
 25a:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 25c:	0c f4       	brge	.+2      	; 0x260

0000025e <ihyes>:
ihyes:
        set
 25e:	68 94       	set

00000260 <ihno>:
ihno:
        pop     p1l
 260:	8f 91       	pop	r24
        ret
 262:	08 95       	ret

00000264 <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 264:	8f 93       	push	r24
        lds     p1l, _RxByte
 266:	80 91 18 01 	lds	r24, 0x0118
        clt
 26a:	e8 94       	clt
        cpi     p1l, ' '
 26c:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 26e:	b9 f3       	breq	.-18     	; 0x25e
        cpi     p1l, 0x0D
 270:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 272:	a9 f3       	breq	.-22     	; 0x25e
        rjmp    ihno
 274:	f5 cf       	rjmp	.-22     	; 0x260

00000276 <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 276:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 278:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 27a:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 27c:	79 2f       	mov	r23, r25

0000027e <ph00>:
ph00:
        lsl     p2l
 27e:	66 0f       	add	r22, r22
        rol     p2h
 280:	77 1f       	adc	r23, r23
        rol     p1l
 282:	88 1f       	adc	r24, r24
        lsl     p2l
 284:	66 0f       	add	r22, r22
        rol     p2h
 286:	77 1f       	adc	r23, r23
        rol     p1l
 288:	88 1f       	adc	r24, r24
        lsl     p2l
 28a:	66 0f       	add	r22, r22
        rol     p2h
 28c:	77 1f       	adc	r23, r23
        rol     p1l
 28e:	88 1f       	adc	r24, r24
        lsl     p2l
 290:	66 0f       	add	r22, r22
        rol     p2h
 292:	77 1f       	adc	r23, r23
        rol     p1l
 294:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 296:	54 17       	cp	r21, r20
        brlt    ph02
 298:	34 f0       	brlt	.+12     	; 0x2a6

        cbr     p1l, 0xF0
 29a:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 29c:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 29e:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 2a0:	0c f0       	brlt	.+2      	; 0x2a4
        subi    p1l, lo8('9' + 1 - 'A')
 2a2:	89 5f       	subi	r24, 0xF9	; 249

000002a4 <ph01>:
ph01:
        rcall   PutChar
 2a4:	97 df       	rcall	.-210    	; 0x1d4

000002a6 <ph02>:
ph02:
        dec     tmp2
 2a6:	4a 95       	dec	r20
        brne    ph00
 2a8:	51 f7       	brne	.-44     	; 0x27e

        ret
 2aa:	08 95       	ret

000002ac <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 2ac:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 2ae:	e3 cf       	rjmp	.-58     	; 0x276

000002b0 <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 2b0:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 2b2:	e1 cf       	rjmp	.-62     	; 0x276

000002b4 <Hello>:
 2b4:	0d 00       	.word	0x000d	; ????
 2b6:	41 76       	andi	r20, 0x61	; 97
 2b8:	72 58       	subi	r23, 0x82	; 130
 2ba:	20 4d       	sbci	r18, 0xD0	; 208
 2bc:	6f 6e       	ori	r22, 0xEF	; 239
 2be:	69 74       	andi	r22, 0x49	; 73
 2c0:	6f 72       	andi	r22, 0x2F	; 47
 2c2:	20 56       	subi	r18, 0x60	; 96
 2c4:	32 00       	.word	0x0032	; ????
 2c6:	0d 00       	.word	0x000d	; ????
 2c8:	0d 00       	.word	0x000d	; ????
 2ca:	4d 6f       	ori	r20, 0xFD	; 253
 2cc:	64 69       	ori	r22, 0x94	; 148
 2ce:	66 79       	andi	r22, 0x96	; 150
 2d0:	20 3d       	cpi	r18, 0xD0	; 208
 2d2:	20 6d       	ori	r18, 0xD0	; 208
 2d4:	7b 73       	andi	r23, 0x3B	; 59
 2d6:	2c 65       	ori	r18, 0x5C	; 92
 2d8:	7d 5b       	subi	r23, 0xBD	; 189
 2da:	77 5d       	subi	r23, 0xD7	; 215
 2dc:	5b 61       	ori	r21, 0x1B	; 27
 2de:	61 61       	ori	r22, 0x11	; 17
 2e0:	61 5d       	subi	r22, 0xD1	; 209
 2e2:	00 0d       	add	r16, r0
 2e4:	00 44       	sbci	r16, 0x40	; 64
 2e6:	75 6d       	ori	r23, 0xD5	; 213
 2e8:	70 20       	and	r7, r0
 2ea:	20 20       	and	r2, r0
 2ec:	3d 20       	and	r3, r13
 2ee:	64 7b       	andi	r22, 0xB4	; 180
 2f0:	73 2c       	mov	r7, r3
 2f2:	65 7d       	andi	r22, 0xD5	; 213
 2f4:	5b 77       	andi	r21, 0x7B	; 123
 2f6:	5d 5b       	subi	r21, 0xBD	; 189
 2f8:	61 61       	ori	r22, 0x11	; 17
 2fa:	61 61       	ori	r22, 0x11	; 17
 2fc:	5d 20       	and	r5, r13
 2fe:	5b 78       	andi	r21, 0x8B	; 139
 300:	78 5d       	subi	r23, 0xD8	; 216
 302:	00 0d       	add	r16, r0
 304:	00 48       	sbci	r16, 0x80	; 128
 306:	61 6c       	ori	r22, 0xC1	; 193
 308:	74 20       	and	r7, r4
 30a:	20 20       	and	r2, r0
 30c:	3d 20       	and	r3, r13
 30e:	68 5b       	subi	r22, 0xB8	; 184
 310:	6f 6f       	ori	r22, 0xFF	; 255
 312:	6f 6f       	ori	r22, 0xFF	; 255
 314:	5d 00       	.word	0x005d	; ????
 316:	0d 00       	.word	0x000d	; ????
 318:	53 74       	andi	r21, 0x43	; 67
 31a:	65 70       	andi	r22, 0x05	; 5
 31c:	20 20       	and	r2, r0
 31e:	20 3d       	cpi	r18, 0xD0	; 208
 320:	20 73       	andi	r18, 0x30	; 48
 322:	5b 6f       	ori	r21, 0xFB	; 251
 324:	6f 6f       	ori	r22, 0xFF	; 255
 326:	6f 5d       	subi	r22, 0xDF	; 223
 328:	00 0d       	add	r16, r0
 32a:	00 52       	subi	r16, 0x20	; 32
 32c:	65 73       	andi	r22, 0x35	; 53
 32e:	75 6d       	ori	r23, 0xD5	; 213
 330:	65 20       	and	r6, r5
 332:	3d 20       	and	r3, r13
 334:	72 5b       	subi	r23, 0xB2	; 178
 336:	6f 6f       	ori	r22, 0xFF	; 255
 338:	6f 6f       	ori	r22, 0xFF	; 255
 33a:	5d 00       	.word	0x005d	; ????
 33c:	0d 00       	.word	0x000d	; ????
 33e:	43 6f       	ori	r20, 0xF3	; 243
 340:	6e 74       	andi	r22, 0x4E	; 78
 342:	65 78       	andi	r22, 0x85	; 133
 344:	74 3d       	cpi	r23, 0xD4	; 212
 346:	20 78       	andi	r18, 0x80	; 128
 348:	5b 6f       	ori	r21, 0xFB	; 251
 34a:	6f 6f       	ori	r22, 0xFF	; 255
 34c:	6f 5d       	subi	r22, 0xDF	; 223
 34e:	00 0d       	add	r16, r0
 350:	00 53       	subi	r16, 0x30	; 48
 352:	69 67       	ori	r22, 0x79	; 121
 354:	6e 61       	ori	r22, 0x1E	; 30
 356:	6c 20       	and	r6, r12
 358:	3d 20       	and	r3, r13
 35a:	69 5b       	subi	r22, 0xB9	; 185
 35c:	6f 6f       	ori	r22, 0xFF	; 255
 35e:	6f 6f       	ori	r22, 0xFF	; 255
 360:	5d 00       	.word	0x005d	; ????
 362:	0d 00       	.word	0x000d	; ????
 364:	43 61       	ori	r20, 0x13	; 19
 366:	6e 63       	ori	r22, 0x3E	; 62
 368:	65 6c       	ori	r22, 0xC5	; 197
 36a:	20 3d       	cpi	r18, 0xD0	; 208
 36c:	20 63       	ori	r18, 0x30	; 48
 36e:	5b 6f       	ori	r21, 0xFB	; 251
 370:	6f 6f       	ori	r22, 0xFF	; 255
 372:	6f 5d       	subi	r22, 0xDF	; 223
 374:	00 0d       	add	r16, r0
 376:	00 4b       	sbci	r16, 0xB0	; 176
 378:	69 6c       	ori	r22, 0xC9	; 201
 37a:	6c 54       	subi	r22, 0x4C	; 76
 37c:	73 6b       	ori	r23, 0xB3	; 179
 37e:	3d 20       	and	r3, r13
 380:	6b 5b       	subi	r22, 0xBB	; 187
 382:	6f 6f       	ori	r22, 0xFF	; 255
 384:	6f 6f       	ori	r22, 0xFF	; 255
 386:	5d 00       	.word	0x005d	; ????
 388:	0d 00       	.word	0x000d	; ????
 38a:	49 6e       	ori	r20, 0xE9	; 233
 38c:	69 74       	andi	r22, 0x49	; 73
 38e:	61 73       	andi	r22, 0x31	; 49
 390:	6b 3d       	cpi	r22, 0xDB	; 219
 392:	20 70       	andi	r18, 0x00	; 0
 394:	5b 61       	ori	r21, 0x1B	; 27
 396:	61 61       	ori	r22, 0x11	; 17
 398:	61 5d       	subi	r22, 0xD1	; 209
 39a:	00 0d       	add	r16, r0
 39c:	00 51       	subi	r16, 0x10	; 16
 39e:	75 69       	ori	r23, 0x95	; 149
 3a0:	74 20       	and	r7, r4
 3a2:	20 20       	and	r2, r0
 3a4:	3d 20       	and	r3, r13
 3a6:	71 00       	.word	0x0071	; ????
 3a8:	0d 00       	.word	0x000d	; ????
	...

000003ac <Monitor>:
 3ac:	88 e2       	ldi	r24, 0x28	; 40
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	78 d2       	rcall	.+1264   	; 0x8a2
 3b2:	84 eb       	ldi	r24, 0xB4	; 180
 3b4:	92 e0       	ldi	r25, 0x02	; 2

000003b6 <Hello1>:
 3b6:	ea de       	rcall	.-556    	; 0x18c
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	e8 2f       	mov	r30, r24
 3be:	f9 2f       	mov	r31, r25
 3c0:	c8 95       	lpm
 3c2:	00 20       	and	r0, r0
 3c4:	c1 f7       	brne	.-16     	; 0x3b6
 3c6:	20 e6       	ldi	r18, 0x60	; 96
 3c8:	42 2e       	mov	r4, r18
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	52 2e       	mov	r5, r18
 3ce:	88 24       	eor	r8, r8
 3d0:	99 24       	eor	r9, r9
 3d2:	bb 24       	eor	r11, r11
 3d4:	aa 24       	eor	r10, r10
 3d6:	66 24       	eor	r6, r6
 3d8:	77 24       	eor	r7, r7

000003da <DebugMonitor>:
 3da:	d4 de       	rcall	.-600    	; 0x184
 3dc:	8e e3       	ldi	r24, 0x3E	; 62
 3de:	fa de       	rcall	.-524    	; 0x1d4
 3e0:	01 d0       	rcall	.+2      	; 0x3e4
 3e2:	fb cf       	rjmp	.-10     	; 0x3da

000003e4 <m_Parse>:
 3e4:	cd de       	rcall	.-614    	; 0x180
 3e6:	8d 36       	cpi	r24, 0x6D	; 109
 3e8:	c9 f0       	breq	.+50     	; 0x41c
 3ea:	84 36       	cpi	r24, 0x64	; 100
 3ec:	d1 f0       	breq	.+52     	; 0x422
 3ee:	88 36       	cpi	r24, 0x68	; 104
 3f0:	49 f1       	breq	.+82     	; 0x444
 3f2:	83 37       	cpi	r24, 0x73	; 115
 3f4:	c9 f1       	breq	.+114    	; 0x468
 3f6:	8b 36       	cpi	r24, 0x6B	; 107
 3f8:	a1 f1       	breq	.+104    	; 0x462
 3fa:	82 37       	cpi	r24, 0x72	; 114
 3fc:	31 f1       	breq	.+76     	; 0x44a
 3fe:	89 36       	cpi	r24, 0x69	; 105
 400:	69 f1       	breq	.+90     	; 0x45c
 402:	83 36       	cpi	r24, 0x63	; 99
 404:	29 f1       	breq	.+74     	; 0x450
 406:	88 37       	cpi	r24, 0x78	; 120
 408:	31 f1       	breq	.+76     	; 0x456
 40a:	80 37       	cpi	r24, 0x70	; 112
 40c:	c1 f0       	breq	.+48     	; 0x43e
 40e:	81 37       	cpi	r24, 0x71	; 113
 410:	11 f0       	breq	.+4      	; 0x416

00000412 <m_err>:
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	df ce       	rjmp	.-578    	; 0x1d4

00000416 <m_quit>:
 416:	af 91       	pop	r26
 418:	af 91       	pop	r26
 41a:	08 95       	ret

0000041c <m_ModifyMemory>:
 41c:	50 d0       	rcall	.+160    	; 0x4be
 41e:	ce f7       	brtc	.-14     	; 0x412
 420:	9b c0       	rjmp	.+310    	; 0x558

00000422 <m_DumpMemory>:
 422:	4d d0       	rcall	.+154    	; 0x4be
 424:	c8 2e       	mov	r12, r24
 426:	d9 2e       	mov	r13, r25
 428:	a6 f7       	brtc	.-24     	; 0x412
 42a:	20 91 18 01 	lds	r18, 0x0118
 42e:	2d 30       	cpi	r18, 0x0D	; 13
 430:	11 f0       	breq	.+4      	; 0x436
 432:	3c d0       	rcall	.+120    	; 0x4ac
 434:	76 f7       	brtc	.-36     	; 0x412

00000436 <m1b>:
 436:	6c 2d       	mov	r22, r12
 438:	7d 2d       	mov	r23, r13
 43a:	8a 2d       	mov	r24, r10
 43c:	6d c0       	rjmp	.+218    	; 0x518

0000043e <m_InitTask>:
 43e:	f9 de       	rcall	.-526    	; 0x232
 440:	46 f7       	brtc	.-48     	; 0x412
 442:	bf c1       	rjmp	.+894    	; 0x7c2

00000444 <m_HaltProcess>:
 444:	28 d0       	rcall	.+80     	; 0x496
 446:	2e f7       	brtc	.-54     	; 0x412
 448:	cd c2       	rjmp	.+1434   	; 0x9e4

0000044a <m_ResumeProcess>:
 44a:	25 d0       	rcall	.+74     	; 0x496
 44c:	16 f7       	brtc	.-60     	; 0x412
 44e:	dc c1       	rjmp	.+952    	; 0x808

00000450 <m_CancelTimer>:
 450:	22 d0       	rcall	.+68     	; 0x496
 452:	fe f6       	brtc	.-66     	; 0x412
 454:	66 c3       	rjmp	.+1740   	; 0xb22

00000456 <m_PrintProcessContext>:
 456:	1f d0       	rcall	.+62     	; 0x496
 458:	e6 f6       	brtc	.-72     	; 0x412
 45a:	bc c0       	rjmp	.+376    	; 0x5d4

0000045c <m_SetSemaphore>:
 45c:	1c d0       	rcall	.+56     	; 0x496
 45e:	ce f6       	brtc	.-78     	; 0x412
 460:	20 c2       	rjmp	.+1088   	; 0x8a2

00000462 <m_Terminate>:
 462:	19 d0       	rcall	.+50     	; 0x496
 464:	b6 f6       	brtc	.-84     	; 0x412
 466:	a5 c2       	rjmp	.+1354   	; 0x9b2

00000468 <m_StepProcess>:
 468:	16 d0       	rcall	.+44     	; 0x496
 46a:	9e f6       	brtc	.-90     	; 0x412
 46c:	87 d2       	rcall	.+1294   	; 0x97c
 46e:	88 23       	and	r24, r24
 470:	09 f4       	brne	.+2      	; 0x474
 472:	08 95       	ret

00000474 <ms_NOTSUSPENDED>:
 474:	87 de       	rcall	.-754    	; 0x184
 476:	88 2d       	mov	r24, r8
 478:	99 2d       	mov	r25, r9
 47a:	18 df       	rcall	.-464    	; 0x2ac
 47c:	82 e8       	ldi	r24, 0x82	; 130
 47e:	94 e0       	ldi	r25, 0x04	; 4
 480:	85 ce       	rjmp	.-758    	; 0x18c

00000482 <NotSuspended>:
 482:	20 2d       	mov	r18, r0
 484:	20 4e       	sbci	r18, 0xE0	; 224
 486:	6f 74       	andi	r22, 0x4F	; 79
 488:	20 53       	subi	r18, 0x30	; 48
 48a:	75 73       	andi	r23, 0x35	; 53
 48c:	70 65       	ori	r23, 0x50	; 80
 48e:	6e 64       	ori	r22, 0x4E	; 78
 490:	65 64       	ori	r22, 0x45	; 69
 492:	21 0d       	add	r18, r1
	...

00000496 <GetObjectID>:
 496:	cd de       	rcall	.-614    	; 0x232
 498:	16 f0       	brts	.+4      	; 0x49e
 49a:	e4 de       	rcall	.-568    	; 0x264
 49c:	36 f4       	brtc	.+12     	; 0x4aa

0000049e <goi00>:
 49e:	66 23       	and	r22, r22
 4a0:	11 f4       	brne	.+4      	; 0x4a6
 4a2:	88 2d       	mov	r24, r8
 4a4:	99 2d       	mov	r25, r9

000004a6 <goi01>:
 4a6:	88 2e       	mov	r8, r24
 4a8:	99 2e       	mov	r9, r25

000004aa <goi02>:
 4aa:	08 95       	ret

000004ac <GetDumpLength>:
 4ac:	c4 de       	rcall	.-632    	; 0x236
 4ae:	16 f0       	brts	.+4      	; 0x4b4
 4b0:	d9 de       	rcall	.-590    	; 0x264
 4b2:	26 f4       	brtc	.+8      	; 0x4bc

000004b4 <gdl00>:
 4b4:	66 23       	and	r22, r22
 4b6:	09 f4       	brne	.+2      	; 0x4ba
 4b8:	8a 2d       	mov	r24, r10

000004ba <gdl01>:
 4ba:	a8 2e       	mov	r10, r24

000004bc <gdl02>:
 4bc:	08 95       	ret

000004be <GetFlagsAndAddress>:
 4be:	e8 94       	clt
 4c0:	5f de       	rcall	.-834    	; 0x180
 4c2:	2b 2d       	mov	r18, r11
 4c4:	83 37       	cpi	r24, 0x73	; 115
 4c6:	11 f4       	brne	.+4      	; 0x4cc
 4c8:	2d 7f       	andi	r18, 0xFD	; 253
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2

000004cc <gbTRYEERAM>:
 4cc:	85 36       	cpi	r24, 0x65	; 101
 4ce:	e9 f4       	brne	.+58     	; 0x50a
 4d0:	22 60       	ori	r18, 0x02	; 2

000004d2 <gbCONTINUE>:
 4d2:	b2 2e       	mov	r11, r18
 4d4:	ae de       	rcall	.-676    	; 0x232
 4d6:	2b 2d       	mov	r18, r11
 4d8:	1e f4       	brtc	.+6      	; 0x4e0
 4da:	2e 7f       	andi	r18, 0xFE	; 254
 4dc:	b2 2e       	mov	r11, r18
 4de:	0c c0       	rjmp	.+24     	; 0x4f8

000004e0 <gbCHECKWORDFLAG>:
 4e0:	2e 7f       	andi	r18, 0xFE	; 254
 4e2:	b2 2e       	mov	r11, r18
 4e4:	30 91 18 01 	lds	r19, 0x0118
 4e8:	37 37       	cpi	r19, 0x77	; 119
 4ea:	21 f4       	brne	.+8      	; 0x4f4
 4ec:	21 60       	ori	r18, 0x01	; 1
 4ee:	b2 2e       	mov	r11, r18
 4f0:	a0 de       	rcall	.-704    	; 0x232
 4f2:	16 f0       	brts	.+4      	; 0x4f8

000004f4 <gbCHECKFORWHITESPACE>:
 4f4:	b7 de       	rcall	.-658    	; 0x264
 4f6:	4e f4       	brtc	.+18     	; 0x50a

000004f8 <gbUPDATEADDRESS>:
 4f8:	66 23       	and	r22, r22
 4fa:	39 f0       	breq	.+14     	; 0x50a
 4fc:	b1 fe       	sbrs	r11, 1
 4fe:	03 c0       	rjmp	.+6      	; 0x506
 500:	68 2e       	mov	r6, r24
 502:	79 2e       	mov	r7, r25
 504:	02 c0       	rjmp	.+4      	; 0x50a

00000506 <gbAddress>:
 506:	48 2e       	mov	r4, r24
 508:	59 2e       	mov	r5, r25

0000050a <gbDONE>:
 50a:	84 2d       	mov	r24, r4
 50c:	95 2d       	mov	r25, r5
 50e:	b1 fc       	sbrc	r11, 1
 510:	86 2d       	mov	r24, r6
 512:	b1 fc       	sbrc	r11, 1
 514:	97 2d       	mov	r25, r7
 516:	08 95       	ret

00000518 <_DumpMemory>:
 518:	b0 fe       	sbrs	r11, 0
 51a:	03 c0       	rjmp	.+6      	; 0x522
 51c:	6e 7f       	andi	r22, 0xFE	; 254
 51e:	80 fd       	sbrc	r24, 0
 520:	83 95       	inc	r24

00000522 <m10f>:
 522:	c6 2e       	mov	r12, r22
 524:	d7 2e       	mov	r13, r23
 526:	18 2e       	mov	r1, r24

00000528 <m10c>:
 528:	2d de       	rcall	.-934    	; 0x184
 52a:	9d 2d       	mov	r25, r13
 52c:	8c 2d       	mov	r24, r12
 52e:	be de       	rcall	.-644    	; 0x2ac

00000530 <m10d>:
 530:	2b de       	rcall	.-938    	; 0x188
 532:	8b d0       	rcall	.+278    	; 0x64a
 534:	b0 fc       	sbrc	r11, 0
 536:	04 c0       	rjmp	.+8      	; 0x540
 538:	bb de       	rcall	.-650    	; 0x2b0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	03 c0       	rjmp	.+6      	; 0x546

00000540 <m11>:
 540:	b5 de       	rcall	.-662    	; 0x2ac
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	90 e0       	ldi	r25, 0x00	; 0

00000546 <m12>:
 546:	c8 0e       	add	r12, r24
 548:	d9 1e       	adc	r13, r25
 54a:	18 1a       	sub	r1, r24
 54c:	21 f0       	breq	.+8      	; 0x556

0000054e <m10e>:
 54e:	ec 2d       	mov	r30, r12
 550:	ef 70       	andi	r30, 0x0F	; 15
 552:	51 f3       	breq	.-44     	; 0x528
 554:	ed cf       	rjmp	.-38     	; 0x530

00000556 <m10exit>:
 556:	08 95       	ret

00000558 <_ModifyMemory>:
 558:	c8 2e       	mov	r12, r24
 55a:	d9 2e       	mov	r13, r25

0000055c <_ModifyMemory_>:
 55c:	13 de       	rcall	.-986    	; 0x184
 55e:	8c 2d       	mov	r24, r12
 560:	9d 2d       	mov	r25, r13
 562:	a4 de       	rcall	.-696    	; 0x2ac
 564:	11 de       	rcall	.-990    	; 0x188

00000566 <_mmNEXT>:
 566:	71 d0       	rcall	.+226    	; 0x64a
 568:	b0 fc       	sbrc	r11, 0
 56a:	a0 de       	rcall	.-704    	; 0x2ac
 56c:	b0 fe       	sbrs	r11, 0
 56e:	a0 de       	rcall	.-704    	; 0x2b0

00000570 <_mmGETDATA>:
 570:	8d e2       	ldi	r24, 0x2D	; 45
 572:	30 de       	rcall	.-928    	; 0x1d4
 574:	b0 fe       	sbrs	r11, 0
 576:	5f de       	rcall	.-834    	; 0x236
 578:	b0 fc       	sbrc	r11, 0
 57a:	5b de       	rcall	.-842    	; 0x232
 57c:	66 f4       	brtc	.+24     	; 0x596

0000057e <_mmWRITE>:
 57e:	76 d0       	rcall	.+236    	; 0x66c
 580:	03 de       	rcall	.-1018   	; 0x188

00000582 <_mmGOTONEXT>:
 582:	e1 e0       	ldi	r30, 0x01	; 1
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	b0 fc       	sbrc	r11, 0
 588:	31 96       	adiw	r30, 0x01	; 1
 58a:	ce 0e       	add	r12, r30
 58c:	df 1e       	adc	r13, r31
 58e:	ec 2d       	mov	r30, r12
 590:	ef 70       	andi	r30, 0x0F	; 15
 592:	21 f3       	breq	.-56     	; 0x55c
 594:	e8 cf       	rjmp	.-48     	; 0x566

00000596 <_mmNODATA>:
 596:	66 de       	rcall	.-820    	; 0x264
 598:	36 f4       	brtc	.+12     	; 0x5a6
 59a:	66 23       	and	r22, r22
 59c:	81 f7       	brne	.-32     	; 0x57e
 59e:	20 91 18 01 	lds	r18, 0x0118
 5a2:	2d 30       	cpi	r18, 0x0D	; 13
 5a4:	71 f7       	brne	.-36     	; 0x582

000005a6 <_mmDONE>:
 5a6:	08 95       	ret

000005a8 <ctdt0>:
 5a8:	0d 50       	subi	r16, 0x0D	; 13
 5aa:	49 44       	sbci	r20, 0x49	; 73
 5ac:	20 46       	sbci	r18, 0x60	; 96
 5ae:	6c 67       	ori	r22, 0x7C	; 124
 5b0:	20 50       	subi	r18, 0x00	; 0
 5b2:	72 69       	ori	r23, 0x92	; 146
 5b4:	20 46       	sbci	r18, 0x60	; 96
 5b6:	72 61       	ori	r23, 0x12	; 18
 5b8:	6d 65       	ori	r22, 0x5D	; 93
 5ba:	20 53       	subi	r18, 0x30	; 48
 5bc:	52 0d       	add	r21, r2
	...

000005bf <ctdt1>:
 5bf:	52 30       	cpi	r21, 0x02	; 2
 5c1:	20 20       	and	r2, r0
	...

000005c4 <ctdt2>:
 5c4:	52 31       	cpi	r21, 0x12	; 18
 5c6:	36 20       	and	r3, r6
	...

000005c9 <ctdt3>:
 5c9:	0d 20       	and	r0, r13
 5cb:	20 20       	and	r2, r0
 5cd:	20 20       	and	r2, r0
 5cf:	50 43       	sbci	r21, 0x30	; 48
 5d1:	20 20       	and	r2, r0
	...

000005d4 <_PrintContext>:
 5d4:	95 e0       	ldi	r25, 0x05	; 5
 5d6:	88 ea       	ldi	r24, 0xA8	; 168
 5d8:	d9 dd       	rcall	.-1102   	; 0x18c
 5da:	88 2d       	mov	r24, r8
 5dc:	99 2d       	mov	r25, r9
 5de:	66 de       	rcall	.-820    	; 0x2ac
 5e0:	d3 dd       	rcall	.-1114   	; 0x188
 5e2:	e8 2d       	mov	r30, r8
 5e4:	f9 2d       	mov	r31, r9
 5e6:	82 81       	ldd	r24, Z+2	; 0x02
 5e8:	63 de       	rcall	.-826    	; 0x2b0
 5ea:	ce dd       	rcall	.-1124   	; 0x188
 5ec:	e8 2d       	mov	r30, r8
 5ee:	f9 2d       	mov	r31, r9
 5f0:	83 81       	ldd	r24, Z+3	; 0x03
 5f2:	5e de       	rcall	.-836    	; 0x2b0
 5f4:	c9 dd       	rcall	.-1134   	; 0x188
 5f6:	c8 dd       	rcall	.-1136   	; 0x188
 5f8:	e8 2d       	mov	r30, r8
 5fa:	f9 2d       	mov	r31, r9
 5fc:	c4 81       	ldd	r28, Z+4	; 0x04
 5fe:	d5 81       	ldd	r29, Z+5	; 0x05
 600:	8c 2f       	mov	r24, r28
 602:	9d 2f       	mov	r25, r29
 604:	53 de       	rcall	.-858    	; 0x2ac
 606:	c0 dd       	rcall	.-1152   	; 0x188
 608:	bf dd       	rcall	.-1154   	; 0x188
 60a:	21 96       	adiw	r28, 0x01	; 1
 60c:	89 91       	ld	r24, Y+
 60e:	50 de       	rcall	.-864    	; 0x2b0

00000610 <Loop>:
 610:	0e d0       	rcall	.+28     	; 0x62e
 612:	95 e0       	ldi	r25, 0x05	; 5
 614:	8f eb       	ldi	r24, 0xBF	; 191
 616:	10 d0       	rcall	.+32     	; 0x638
 618:	0a d0       	rcall	.+20     	; 0x62e
 61a:	95 e0       	ldi	r25, 0x05	; 5
 61c:	84 ec       	ldi	r24, 0xC4	; 196
 61e:	0c d0       	rcall	.+24     	; 0x638
 620:	95 e0       	ldi	r25, 0x05	; 5
 622:	89 ec       	ldi	r24, 0xC9	; 201
 624:	b3 dd       	rcall	.-1178   	; 0x18c
 626:	99 91       	ld	r25, Y+
 628:	88 81       	ld	r24, Y
 62a:	40 de       	rcall	.-896    	; 0x2ac
 62c:	08 95       	ret

0000062e <Print16RegPre>:
 62e:	aa dd       	rcall	.-1196   	; 0x184
 630:	8c 2f       	mov	r24, r28
 632:	9d 2f       	mov	r25, r29
 634:	3b de       	rcall	.-906    	; 0x2ac
 636:	a8 cd       	rjmp	.-1200   	; 0x188

00000638 <Print16Reg>:
 638:	a9 dd       	rcall	.-1198   	; 0x18c
 63a:	e0 e1       	ldi	r30, 0x10	; 16
 63c:	1e 2e       	mov	r1, r30

0000063e <p16r0>:
 63e:	89 91       	ld	r24, Y+
 640:	37 de       	rcall	.-914    	; 0x2b0
 642:	a2 dd       	rcall	.-1212   	; 0x188
 644:	1a 94       	dec	r1
 646:	d9 f7       	brne	.-10     	; 0x63e
 648:	08 95       	ret

0000064a <GetByteWord>:
 64a:	b1 fc       	sbrc	r11, 1
 64c:	08 c0       	rjmp	.+16     	; 0x65e
 64e:	ec 2d       	mov	r30, r12
 650:	fd 2d       	mov	r31, r13
 652:	80 81       	ld	r24, Z
 654:	b0 fe       	sbrs	r11, 0
 656:	08 95       	ret
 658:	91 81       	ldd	r25, Z+1	; 0x01
 65a:	80 81       	ld	r24, Z
 65c:	08 95       	ret

0000065e <gbwEEPROM>:
 65e:	9d 2d       	mov	r25, r13
 660:	8c 2d       	mov	r24, r12
 662:	b0 fe       	sbrs	r11, 0
 664:	79 d2       	rcall	.+1266   	; 0xb58
 666:	b0 fc       	sbrc	r11, 0
 668:	86 d2       	rcall	.+1292   	; 0xb76

0000066a <gwbEXIT>:
 66a:	08 95       	ret

0000066c <PutByteWord>:
 66c:	b1 fc       	sbrc	r11, 1
 66e:	08 c0       	rjmp	.+16     	; 0x680
 670:	ec 2d       	mov	r30, r12
 672:	fd 2d       	mov	r31, r13
 674:	80 83       	st	Z, r24
 676:	b0 fe       	sbrs	r11, 0
 678:	08 95       	ret
 67a:	91 83       	std	Z+1, r25	; 0x01
 67c:	80 83       	st	Z, r24
 67e:	08 95       	ret

00000680 <pbwEEPROM>:
 680:	e9 2e       	mov	r14, r25
 682:	68 2f       	mov	r22, r24
 684:	9d 2d       	mov	r25, r13
 686:	8c 2d       	mov	r24, r12
 688:	8d d2       	rcall	.+1306   	; 0xba4
 68a:	b0 fe       	sbrs	r11, 0
 68c:	06 c0       	rjmp	.+12     	; 0x69a
 68e:	8c 2d       	mov	r24, r12
 690:	9d 2d       	mov	r25, r13
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	6e 2d       	mov	r22, r14
 698:	85 d2       	rcall	.+1290   	; 0xba4

0000069a <pbwEXIT>:
 69a:	08 95       	ret

0000069c <IntProlog>:
 69c:	df 93       	push	r29
 69e:	cf 93       	push	r28
 6a0:	bf 93       	push	r27
 6a2:	af 93       	push	r26
 6a4:	9f 93       	push	r25
 6a6:	d1 e0       	ldi	r29, 0x01	; 1
 6a8:	cc e1       	ldi	r28, 0x1C	; 28
 6aa:	9f b7       	in	r25, 0x3f	; 63
 6ac:	ae 81       	ldd	r26, Y+6	; 0x06
 6ae:	af 5f       	subi	r26, 0xFF	; 255
 6b0:	ae 83       	std	Y+6, r26	; 0x06
 6b2:	60 f0       	brcs	.+24     	; 0x6cc
 6b4:	aa 81       	ldd	r26, Y+2	; 0x02
 6b6:	bb 81       	ldd	r27, Y+3	; 0x03
 6b8:	ba 2b       	or	r27, r26
 6ba:	41 f4       	brne	.+16     	; 0x6cc
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	fe 81       	ldd	r31, Y+6	; 0x06
 6c2:	ef 81       	ldd	r30, Y+7	; 0x07
 6c4:	29 96       	adiw	r28, 0x09	; 9
 6c6:	cd bf       	out	0x3d, r28	; 61
 6c8:	de bf       	out	0x3e, r29	; 62
 6ca:	09 94       	ijmp

000006cc <SaveContext>:
 6cc:	8f 93       	push	r24
 6ce:	7f 93       	push	r23
 6d0:	6f 93       	push	r22
 6d2:	5f 93       	push	r21
 6d4:	4f 93       	push	r20
 6d6:	3f 93       	push	r19
 6d8:	2f 93       	push	r18
 6da:	1f 93       	push	r17
 6dc:	0f 93       	push	r16
 6de:	ff 92       	push	r15
 6e0:	ef 92       	push	r14
 6e2:	df 92       	push	r13
 6e4:	cf 92       	push	r12
 6e6:	bf 92       	push	r11
 6e8:	af 92       	push	r10
 6ea:	9f 92       	push	r9
 6ec:	8f 92       	push	r8
 6ee:	7f 92       	push	r7
 6f0:	6f 92       	push	r6
 6f2:	5f 92       	push	r5
 6f4:	4f 92       	push	r4
 6f6:	3f 92       	push	r3
 6f8:	2f 92       	push	r2
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	9f 93       	push	r25
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
 704:	9b 8d       	ldd	r25, Y+27	; 0x1b
 706:	39 a1       	ldd	r19, Y+33	; 0x21
 708:	48 a1       	ldd	r20, Y+32	; 0x20
 70a:	e8 a3       	std	Y+32, r30	; 0x20
 70c:	f9 a3       	std	Y+33, r31	; 0x21
 70e:	70 f0       	brcs	.+28     	; 0x72c
 710:	f1 e0       	ldi	r31, 0x01	; 1
 712:	ec e1       	ldi	r30, 0x1C	; 28
 714:	d3 81       	ldd	r29, Z+3	; 0x03
 716:	c2 81       	ldd	r28, Z+2	; 0x02
 718:	be b7       	in	r27, 0x3e	; 62
 71a:	ad b7       	in	r26, 0x3d	; 61
 71c:	bd 83       	std	Y+5, r27	; 0x05
 71e:	ac 83       	std	Y+4, r26	; 0x04
 720:	24 81       	ldd	r18, Z+4	; 0x04
 722:	2d bf       	out	0x3d, r18	; 61
 724:	25 81       	ldd	r18, Z+5	; 0x05
 726:	2e bf       	out	0x3e, r18	; 62
 728:	ca 2f       	mov	r28, r26
 72a:	db 2f       	mov	r29, r27

0000072c <AlreadyInKernel>:
 72c:	11 24       	eor	r1, r1
 72e:	e3 2f       	mov	r30, r19
 730:	f4 2f       	mov	r31, r20
 732:	09 94       	ijmp

00000734 <Epilog>:
 734:	ef 91       	pop	r30
 736:	ef 91       	pop	r30

00000738 <_Epilog>:
 738:	ec e1       	ldi	r30, 0x1C	; 28
 73a:	f1 e0       	ldi	r31, 0x01	; 1
 73c:	f8 94       	cli
 73e:	06 81       	ldd	r16, Z+6	; 0x06
 740:	0a 95       	dec	r16
 742:	06 83       	std	Z+6, r16	; 0x06
 744:	54 f4       	brge	.+20     	; 0x75a
 746:	d1 81       	ldd	r29, Z+1	; 0x01
 748:	c0 81       	ld	r28, Z
 74a:	d3 83       	std	Z+3, r29	; 0x03
 74c:	c2 83       	std	Z+2, r28	; 0x02
 74e:	20 96       	adiw	r28, 0x00	; 0
 750:	39 f1       	breq	.+78     	; 0x7a0
 752:	bd 81       	ldd	r27, Y+5	; 0x05
 754:	ac 81       	ldd	r26, Y+4	; 0x04
 756:	ad bf       	out	0x3d, r26	; 61
 758:	be bf       	out	0x3e, r27	; 62

0000075a <SkipTaskSwap>:
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	2f 90       	pop	r2
 764:	3f 90       	pop	r3
 766:	4f 90       	pop	r4
 768:	5f 90       	pop	r5
 76a:	6f 90       	pop	r6
 76c:	7f 90       	pop	r7
 76e:	8f 90       	pop	r8
 770:	9f 90       	pop	r9
 772:	af 90       	pop	r10
 774:	bf 90       	pop	r11
 776:	cf 90       	pop	r12
 778:	df 90       	pop	r13
 77a:	ef 90       	pop	r14
 77c:	ff 90       	pop	r15
 77e:	0f 91       	pop	r16
 780:	1f 91       	pop	r17
 782:	2f 91       	pop	r18
 784:	3f 91       	pop	r19
 786:	4f 91       	pop	r20
 788:	5f 91       	pop	r21
 78a:	6f 91       	pop	r22
 78c:	7f 91       	pop	r23
 78e:	8f 91       	pop	r24
 790:	9f 91       	pop	r25
 792:	af 91       	pop	r26
 794:	bf 91       	pop	r27
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	ef 91       	pop	r30
 79c:	ff 91       	pop	r31
 79e:	18 95       	reti

000007a0 <_IdleTask>:
 7a0:	78 94       	sei
 7a2:	88 95       	sleep

000007a4 <snooze>:
 7a4:	fd cf       	rjmp	.-6      	; 0x7a0

000007a6 <AvrXSetKernelStack>:
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	80 50       	subi	r24, 0x00	; 0
 7ac:	90 40       	sbci	r25, 0x00	; 0
 7ae:	11 f4       	brne	.+4      	; 0x7b4
 7b0:	8d b7       	in	r24, 0x3d	; 61
 7b2:	9e b7       	in	r25, 0x3e	; 62

000007b4 <sks1>:
 7b4:	80 93 20 01 	sts	0x0120, r24
 7b8:	90 93 21 01 	sts	0x0121, r25
 7bc:	09 94       	ijmp

000007be <AvrXRunTask>:
 7be:	01 d0       	rcall	.+2      	; 0x7c2
 7c0:	23 c0       	rjmp	.+70     	; 0x808

000007c2 <AvrXInitTask>:
 7c2:	e8 2f       	mov	r30, r24
 7c4:	f9 2f       	mov	r31, r25
 7c6:	1d d0       	rcall	.+58     	; 0x802
 7c8:	a0 2d       	mov	r26, r0
 7ca:	1b d0       	rcall	.+54     	; 0x802
 7cc:	b0 2d       	mov	r27, r0
 7ce:	19 d0       	rcall	.+50     	; 0x802
 7d0:	0c 92       	st	X, r0
 7d2:	17 d0       	rcall	.+46     	; 0x802
 7d4:	0e 92       	st	-X, r0
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	51 e2       	ldi	r21, 0x21	; 33

000007dc <PushRegisters>:
 7dc:	4e 93       	st	-X, r20
 7de:	5a 95       	dec	r21
 7e0:	e9 f7       	brne	.-6      	; 0x7dc
 7e2:	11 97       	sbiw	r26, 0x01	; 1
 7e4:	0e d0       	rcall	.+28     	; 0x802
 7e6:	80 2d       	mov	r24, r0
 7e8:	0c d0       	rcall	.+24     	; 0x802
 7ea:	90 2d       	mov	r25, r0
 7ec:	0a d0       	rcall	.+20     	; 0x802
 7ee:	e8 2f       	mov	r30, r24
 7f0:	f9 2f       	mov	r31, r25
 7f2:	a4 83       	std	Z+4, r26	; 0x04
 7f4:	b5 83       	std	Z+5, r27	; 0x05
 7f6:	03 82       	std	Z+3, r0	; 0x03
 7f8:	a0 e6       	ldi	r26, 0x60	; 96
 7fa:	a2 83       	std	Z+2, r26	; 0x02
 7fc:	41 83       	std	Z+1, r20	; 0x01
 7fe:	40 83       	st	Z, r20
 800:	08 95       	ret

00000802 <lpm_inc>:
 802:	c8 95       	lpm
 804:	31 96       	adiw	r30, 0x01	; 1
 806:	08 95       	ret

00000808 <AvrXResume>:
 808:	f8 94       	cli
 80a:	48 df       	rcall	.-368    	; 0x69c
 80c:	78 94       	sei
 80e:	e8 2f       	mov	r30, r24
 810:	f9 2f       	mov	r31, r25
 812:	22 81       	ldd	r18, Z+2	; 0x02
 814:	2f 7d       	andi	r18, 0xDF	; 223
 816:	22 83       	std	Z+2, r18	; 0x02
 818:	26 ff       	sbrs	r18, 6
 81a:	03 c0       	rjmp	.+6      	; 0x822
 81c:	2f 7b       	andi	r18, 0xBF	; 191
 81e:	22 83       	std	Z+2, r18	; 0x02
 820:	01 d0       	rcall	.+2      	; 0x824

00000822 <ar00>:
 822:	8a cf       	rjmp	.-236    	; 0x738

00000824 <_QueuePid>:
 824:	e8 2f       	mov	r30, r24
 826:	f9 2f       	mov	r31, r25
 828:	3f ef       	ldi	r19, 0xFF	; 255
 82a:	22 81       	ldd	r18, Z+2	; 0x02
 82c:	20 73       	andi	r18, 0x30	; 48
 82e:	e1 f4       	brne	.+56     	; 0x868
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	43 81       	ldd	r20, Z+3	; 0x03
 836:	cc e1       	ldi	r28, 0x1C	; 28
 838:	d1 e0       	ldi	r29, 0x01	; 1
 83a:	2f b7       	in	r18, 0x3f	; 63
 83c:	f8 94       	cli

0000083e <_qp00>:
 83e:	33 95       	inc	r19
 840:	ec 2f       	mov	r30, r28
 842:	fd 2f       	mov	r31, r29
 844:	c0 81       	ld	r28, Z
 846:	d1 81       	ldd	r29, Z+1	; 0x01
 848:	20 96       	adiw	r28, 0x00	; 0
 84a:	19 f0       	breq	.+6      	; 0x852
 84c:	5b 81       	ldd	r21, Y+3	; 0x03
 84e:	45 17       	cp	r20, r21
 850:	b0 f7       	brcc	.-20     	; 0x83e

00000852 <_qp01>:
 852:	91 83       	std	Z+1, r25	; 0x01
 854:	80 83       	st	Z, r24
 856:	f9 2f       	mov	r31, r25
 858:	e8 2f       	mov	r30, r24
 85a:	d1 83       	std	Z+1, r29	; 0x01
 85c:	c0 83       	st	Z, r28
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	83 2f       	mov	r24, r19
 864:	2f bf       	out	0x3f, r18	; 63
 866:	08 95       	ret

00000868 <_qpSUSPEND>:
 868:	83 2f       	mov	r24, r19
 86a:	20 64       	ori	r18, 0x40	; 64
 86c:	22 83       	std	Z+2, r18	; 0x02
 86e:	08 95       	ret

00000870 <AvrXWaitMessageAck>:
 870:	8e 5f       	subi	r24, 0xFE	; 254
 872:	9f 4f       	sbci	r25, 0xFF	; 255

00000874 <AvrXWaitSemaphore>:
 874:	e8 2f       	mov	r30, r24
 876:	f9 2f       	mov	r31, r25
 878:	f8 94       	cli
 87a:	20 81       	ld	r18, Z
 87c:	31 81       	ldd	r19, Z+1	; 0x01
 87e:	21 50       	subi	r18, 0x01	; 1
 880:	30 40       	sbci	r19, 0x00	; 0
 882:	19 f4       	brne	.+6      	; 0x88a
 884:	20 83       	st	Z, r18
 886:	31 83       	std	Z+1, r19	; 0x01
 888:	18 95       	reti

0000088a <aws01>:
 88a:	08 df       	rcall	.-496    	; 0x69c
 88c:	ec e1       	ldi	r30, 0x1C	; 28
 88e:	f1 e0       	ldi	r31, 0x01	; 1
 890:	73 81       	ldd	r23, Z+3	; 0x03
 892:	62 81       	ldd	r22, Z+2	; 0x02
 894:	3c d0       	rcall	.+120    	; 0x90e
 896:	e8 2f       	mov	r30, r24
 898:	f9 2f       	mov	r31, r25
 89a:	2b d0       	rcall	.+86     	; 0x8f2
 89c:	4d cf       	rjmp	.-358    	; 0x738

0000089e <AvrXAckMessage>:
 89e:	8e 5f       	subi	r24, 0xFE	; 254
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255

000008a2 <AvrXSetSemaphore>:
 8a2:	0c d0       	rcall	.+24     	; 0x8bc
 8a4:	90 91 22 01 	lds	r25, 0x0122
 8a8:	93 95       	inc	r25
 8aa:	89 2b       	or	r24, r25
 8ac:	09 f0       	breq	.+2      	; 0x8b0
 8ae:	08 95       	ret

000008b0 <axss0>:
 8b0:	f8 94       	cli
 8b2:	f4 de       	rcall	.-536    	; 0x69c
 8b4:	78 94       	sei
 8b6:	40 cf       	rjmp	.-384    	; 0x738

000008b8 <AvrXIntSetObjectSemaphore>:
 8b8:	8e 5f       	subi	r24, 0xFE	; 254
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255

000008bc <AvrXIntSetSemaphore>:
 8bc:	e8 2f       	mov	r30, r24
 8be:	f9 2f       	mov	r31, r25
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	2f b7       	in	r18, 0x3f	; 63
 8c6:	f8 94       	cli
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	60 81       	ld	r22, Z
 8cc:	86 17       	cp	r24, r22
 8ce:	97 07       	cpc	r25, r23
 8d0:	28 f0       	brcs	.+10     	; 0x8dc
 8d2:	80 83       	st	Z, r24
 8d4:	91 83       	std	Z+1, r25	; 0x01

000008d6 <BogusSemaphore>:
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	2f bf       	out	0x3f, r18	; 63
 8da:	08 95       	ret

000008dc <aiss00>:
 8dc:	8f e5       	ldi	r24, 0x5F	; 95
 8de:	86 17       	cp	r24, r22
 8e0:	97 07       	cpc	r25, r23
 8e2:	c8 f7       	brcc	.-14     	; 0x8d6
 8e4:	23 d0       	rcall	.+70     	; 0x92c
 8e6:	2f bf       	out	0x3f, r18	; 63
 8e8:	86 2f       	mov	r24, r22
 8ea:	97 2f       	mov	r25, r23
 8ec:	9b cf       	rjmp	.-202    	; 0x824

000008ee <_ao00>:
 8ee:	e2 2f       	mov	r30, r18
 8f0:	f3 2f       	mov	r31, r19

000008f2 <_AppendObject>:
 8f2:	20 81       	ld	r18, Z
 8f4:	31 81       	ldd	r19, Z+1	; 0x01
 8f6:	20 50       	subi	r18, 0x00	; 0
 8f8:	30 40       	sbci	r19, 0x00	; 0
 8fa:	c9 f7       	brne	.-14     	; 0x8ee
 8fc:	71 83       	std	Z+1, r23	; 0x01
 8fe:	60 83       	st	Z, r22
 900:	f7 2f       	mov	r31, r23
 902:	e6 2f       	mov	r30, r22
 904:	31 83       	std	Z+1, r19	; 0x01
 906:	20 83       	st	Z, r18
 908:	08 95       	ret

0000090a <_ro00>:
 90a:	f3 2f       	mov	r31, r19
 90c:	e2 2f       	mov	r30, r18

0000090e <_RemoveObject>:
 90e:	20 81       	ld	r18, Z
 910:	31 81       	ldd	r19, Z+1	; 0x01
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	51 f0       	breq	.+20     	; 0x92c
 918:	20 50       	subi	r18, 0x00	; 0
 91a:	30 40       	sbci	r19, 0x00	; 0
 91c:	b1 f7       	brne	.-20     	; 0x90a
 91e:	08 95       	ret

00000920 <_RemoveFirstObject>:
 920:	60 81       	ld	r22, Z
 922:	71 81       	ldd	r23, Z+1	; 0x01
 924:	60 50       	subi	r22, 0x00	; 0
 926:	70 40       	sbci	r23, 0x00	; 0
 928:	09 f4       	brne	.+2      	; 0x92c
 92a:	08 95       	ret

0000092c <_RemoveObjectAt>:
 92c:	4c 2f       	mov	r20, r28
 92e:	5d 2f       	mov	r21, r29
 930:	c6 2f       	mov	r28, r22
 932:	d7 2f       	mov	r29, r23
 934:	79 81       	ldd	r23, Y+1	; 0x01
 936:	68 81       	ld	r22, Y
 938:	71 83       	std	Z+1, r23	; 0x01
 93a:	60 83       	st	Z, r22
 93c:	e6 2f       	mov	r30, r22
 93e:	f7 2f       	mov	r31, r23
 940:	66 27       	eor	r22, r22
 942:	68 83       	st	Y, r22
 944:	69 83       	std	Y+1, r22	; 0x01
 946:	7d 2f       	mov	r23, r29
 948:	6c 2f       	mov	r22, r28
 94a:	c4 2f       	mov	r28, r20
 94c:	d5 2f       	mov	r29, r21
 94e:	98 94       	clz
 950:	08 95       	ret

00000952 <AvrXSingleStepNext>:
 952:	f8 94       	cli
 954:	a3 de       	rcall	.-698    	; 0x69c
 956:	78 94       	sei
 958:	f9 2f       	mov	r31, r25
 95a:	e8 2f       	mov	r30, r24
 95c:	a2 81       	ldd	r26, Z+2	; 0x02
 95e:	a6 ff       	sbrs	r26, 6
 960:	1d c0       	rjmp	.+58     	; 0x99c
 962:	a0 68       	ori	r26, 0x80	; 128
 964:	a2 83       	std	Z+2, r26	; 0x02
 966:	ec e1       	ldi	r30, 0x1C	; 28
 968:	f1 e0       	ldi	r31, 0x01	; 1
 96a:	b1 81       	ldd	r27, Z+1	; 0x01
 96c:	a0 81       	ld	r26, Z
 96e:	91 83       	std	Z+1, r25	; 0x01
 970:	80 83       	st	Z, r24
 972:	f9 2f       	mov	r31, r25
 974:	e8 2f       	mov	r30, r24
 976:	b1 83       	std	Z+1, r27	; 0x01
 978:	a0 83       	st	Z, r26
 97a:	0e c0       	rjmp	.+28     	; 0x998

0000097c <AvrXStepNext>:
 97c:	f8 94       	cli
 97e:	8e de       	rcall	.-740    	; 0x69c
 980:	78 94       	sei
 982:	f9 2f       	mov	r31, r25
 984:	e8 2f       	mov	r30, r24
 986:	a2 81       	ldd	r26, Z+2	; 0x02
 988:	a6 ff       	sbrs	r26, 6
 98a:	09 c0       	rjmp	.+18     	; 0x99e
 98c:	af 79       	andi	r26, 0x9F	; 159
 98e:	a2 83       	std	Z+2, r26	; 0x02
 990:	49 df       	rcall	.-366    	; 0x824
 992:	a2 81       	ldd	r26, Z+2	; 0x02
 994:	a0 62       	ori	r26, 0x20	; 32
 996:	a2 83       	std	Z+2, r26	; 0x02

00000998 <AssnXOk>:
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	01 c0       	rjmp	.+2      	; 0x99e

0000099c <AssnXErr>:
 99c:	81 e0       	ldi	r24, 0x01	; 1

0000099e <AssnX>:
 99e:	8a 8f       	std	Y+26, r24	; 0x1a
 9a0:	cb ce       	rjmp	.-618    	; 0x738

000009a2 <AvrXTaskExit>:
 9a2:	f8 94       	cli
 9a4:	7b de       	rcall	.-778    	; 0x69c
 9a6:	78 94       	sei
 9a8:	90 91 1f 01 	lds	r25, 0x011F
 9ac:	80 91 1e 01 	lds	r24, 0x011E
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8

000009b2 <AvrXTerminate>:
 9b2:	f8 94       	cli
 9b4:	73 de       	rcall	.-794    	; 0x69c
 9b6:	78 94       	sei

000009b8 <at00>:
 9b8:	f9 2f       	mov	r31, r25
 9ba:	e8 2f       	mov	r30, r24
 9bc:	a0 e1       	ldi	r26, 0x10	; 16
 9be:	a2 83       	std	Z+2, r26	; 0x02
 9c0:	79 2f       	mov	r23, r25
 9c2:	68 2f       	mov	r22, r24
 9c4:	f1 e0       	ldi	r31, 0x01	; 1
 9c6:	ec e1       	ldi	r30, 0x1C	; 28
 9c8:	f8 94       	cli
 9ca:	a1 df       	rcall	.-190    	; 0x90e
 9cc:	b5 ce       	rjmp	.-662    	; 0x738

000009ce <AvrXBreakpoint>:
 9ce:	f8 94       	cli
 9d0:	65 de       	rcall	.-822    	; 0x69c
 9d2:	78 94       	sei
 9d4:	f0 91 1f 01 	lds	r31, 0x011F
 9d8:	e0 91 1e 01 	lds	r30, 0x011E
 9dc:	22 81       	ldd	r18, Z+2	; 0x02
 9de:	25 fd       	sbrc	r18, 5
 9e0:	09 c0       	rjmp	.+18     	; 0x9f4
 9e2:	aa ce       	rjmp	.-684    	; 0x738

000009e4 <AvrXSuspend>:
 9e4:	f8 94       	cli
 9e6:	5a de       	rcall	.-844    	; 0x69c
 9e8:	78 94       	sei
 9ea:	f9 2f       	mov	r31, r25
 9ec:	e8 2f       	mov	r30, r24
 9ee:	22 81       	ldd	r18, Z+2	; 0x02
 9f0:	20 62       	ori	r18, 0x20	; 32
 9f2:	22 83       	std	Z+2, r18	; 0x02

000009f4 <as00>:
 9f4:	7f 2f       	mov	r23, r31
 9f6:	6e 2f       	mov	r22, r30
 9f8:	f1 e0       	ldi	r31, 0x01	; 1
 9fa:	ec e1       	ldi	r30, 0x1C	; 28
 9fc:	f8 94       	cli
 9fe:	87 df       	rcall	.-242    	; 0x90e
 a00:	c2 2f       	mov	r28, r18
 a02:	d3 2f       	mov	r29, r19
 a04:	20 96       	adiw	r28, 0x00	; 0
 a06:	19 f0       	breq	.+6      	; 0xa0e
 a08:	ea 81       	ldd	r30, Y+2	; 0x02
 a0a:	e0 64       	ori	r30, 0x40	; 64
 a0c:	ea 83       	std	Y+2, r30	; 0x02

00000a0e <as01>:
 a0e:	94 ce       	rjmp	.-728    	; 0x738

00000a10 <AvrXSendMessage>:
 a10:	f8 94       	cli
 a12:	44 de       	rcall	.-888    	; 0x69c
 a14:	78 94       	sei
 a16:	01 d0       	rcall	.+2      	; 0xa1a
 a18:	8f ce       	rjmp	.-738    	; 0x738

00000a1a <AvrXIntSendMessage>:
 a1a:	f9 2f       	mov	r31, r25
 a1c:	e8 2f       	mov	r30, r24
 a1e:	69 df       	rcall	.-302    	; 0x8f2
 a20:	4b cf       	rjmp	.-362    	; 0x8b8

00000a22 <AvrXWaitMessage>:
 a22:	e8 2f       	mov	r30, r24
 a24:	f9 2f       	mov	r31, r25
 a26:	f8 94       	cli
 a28:	7b df       	rcall	.-266    	; 0x920
 a2a:	78 94       	sei
 a2c:	21 f4       	brne	.+8      	; 0xa36
 a2e:	20 df       	rcall	.-448    	; 0x870
 a30:	82 50       	subi	r24, 0x02	; 2
 a32:	90 40       	sbci	r25, 0x00	; 0
 a34:	f6 cf       	rjmp	.-20     	; 0xa22

00000a36 <_rm01>:
 a36:	c4 d0       	rcall	.+392    	; 0xbc0
 a38:	86 2f       	mov	r24, r22
 a3a:	97 2f       	mov	r25, r23
 a3c:	08 95       	ret

00000a3e <AvrXDelay>:
 a3e:	01 d0       	rcall	.+2      	; 0xa42
 a40:	17 cf       	rjmp	.-466    	; 0x870

00000a42 <AvrXStartTimer>:
 a42:	60 50       	subi	r22, 0x00	; 0
 a44:	70 40       	sbci	r23, 0x00	; 0
 a46:	09 f4       	brne	.+2      	; 0xa4a
 a48:	2a cf       	rjmp	.-428    	; 0x89e

00000a4a <CountNotZero>:
 a4a:	f8 94       	cli
 a4c:	27 de       	rcall	.-946    	; 0x69c
 a4e:	78 94       	sei
 a50:	b7 d0       	rcall	.+366    	; 0xbc0
 a52:	e4 e2       	ldi	r30, 0x24	; 36
 a54:	f1 e0       	ldi	r31, 0x01	; 1
 a56:	f8 94       	cli
 a58:	20 91 26 01 	lds	r18, 0x0126
 a5c:	2a 95       	dec	r18
 a5e:	20 93 26 01 	sts	0x0126, r18
 a62:	78 94       	sei

00000a64 <ast00>:
 a64:	ce 2f       	mov	r28, r30
 a66:	df 2f       	mov	r29, r31
 a68:	e8 81       	ld	r30, Y
 a6a:	f9 81       	ldd	r31, Y+1	; 0x01
 a6c:	30 96       	adiw	r30, 0x00	; 0
 a6e:	59 f0       	breq	.+22     	; 0xa86
 a70:	24 81       	ldd	r18, Z+4	; 0x04
 a72:	35 81       	ldd	r19, Z+5	; 0x05
 a74:	62 1b       	sub	r22, r18
 a76:	73 0b       	sbc	r23, r19
 a78:	a8 f7       	brcc	.-22     	; 0xa64
 a7a:	62 0f       	add	r22, r18
 a7c:	73 1f       	adc	r23, r19
 a7e:	26 1b       	sub	r18, r22
 a80:	37 0b       	sbc	r19, r23
 a82:	24 83       	std	Z+4, r18	; 0x04
 a84:	35 83       	std	Z+5, r19	; 0x05

00000a86 <ast01>:
 a86:	99 83       	std	Y+1, r25	; 0x01
 a88:	88 83       	st	Y, r24
 a8a:	d9 2f       	mov	r29, r25
 a8c:	c8 2f       	mov	r28, r24
 a8e:	f9 83       	std	Y+1, r31	; 0x01
 a90:	e8 83       	st	Y, r30
 a92:	6c 83       	std	Y+4, r22	; 0x04
 a94:	7d 83       	std	Y+5, r23	; 0x05
 a96:	3c d0       	rcall	.+120    	; 0xb10
 a98:	4f ce       	rjmp	.-866    	; 0x738

00000a9a <AvrXTimerHandler>:
 a9a:	f8 94       	cli
 a9c:	20 91 26 01 	lds	r18, 0x0126
 aa0:	21 50       	subi	r18, 0x01	; 1
 aa2:	20 93 26 01 	sts	0x0126, r18
 aa6:	78 94       	sei
 aa8:	08 f0       	brcs	.+2      	; 0xaac
 aaa:	08 95       	ret

00000aac <ati00>:
 aac:	cf 93       	push	r28
 aae:	df 93       	push	r29
 ab0:	af 93       	push	r26
 ab2:	bf 93       	push	r27
 ab4:	d0 91 25 01 	lds	r29, 0x0125
 ab8:	c0 91 24 01 	lds	r28, 0x0124
 abc:	20 96       	adiw	r28, 0x00	; 0
 abe:	21 f1       	breq	.+72     	; 0xb08
 ac0:	fd 81       	ldd	r31, Y+5	; 0x05
 ac2:	ec 81       	ldd	r30, Y+4	; 0x04
 ac4:	31 97       	sbiw	r30, 0x01	; 1
 ac6:	fd 83       	std	Y+5, r31	; 0x05
 ac8:	ec 83       	std	Y+4, r30	; 0x04

00000aca <ati01>:
 aca:	ef 2b       	or	r30, r31
 acc:	e9 f4       	brne	.+58     	; 0xb08
 ace:	a8 81       	ld	r26, Y
 ad0:	b9 81       	ldd	r27, Y+1	; 0x01
 ad2:	b0 93 25 01 	sts	0x0125, r27
 ad6:	a0 93 24 01 	sts	0x0124, r26
 ada:	f9 83       	std	Y+1, r31	; 0x01
 adc:	e8 83       	st	Y, r30
 ade:	8a 81       	ldd	r24, Y+2	; 0x02
 ae0:	9b 81       	ldd	r25, Y+3	; 0x03
 ae2:	82 50       	subi	r24, 0x02	; 2
 ae4:	90 40       	sbci	r25, 0x00	; 0
 ae6:	31 f4       	brne	.+12     	; 0xaf4
 ae8:	8e 81       	ldd	r24, Y+6	; 0x06
 aea:	9f 81       	ldd	r25, Y+7	; 0x07
 aec:	7d 2f       	mov	r23, r29
 aee:	6c 2f       	mov	r22, r28
 af0:	94 df       	rcall	.-216    	; 0xa1a
 af2:	03 c0       	rjmp	.+6      	; 0xafa

00000af4 <ati04>:
 af4:	8c 2f       	mov	r24, r28
 af6:	9d 2f       	mov	r25, r29
 af8:	df de       	rcall	.-578    	; 0x8b8

00000afa <ati03>:
 afa:	10 96       	adiw	r26, 0x00	; 0
 afc:	29 f0       	breq	.+10     	; 0xb08
 afe:	ca 2f       	mov	r28, r26
 b00:	db 2f       	mov	r29, r27
 b02:	fd 81       	ldd	r31, Y+5	; 0x05
 b04:	ec 81       	ldd	r30, Y+4	; 0x04
 b06:	e1 cf       	rjmp	.-62     	; 0xaca

00000b08 <ati02>:
 b08:	bf 91       	pop	r27
 b0a:	af 91       	pop	r26
 b0c:	df 91       	pop	r29
 b0e:	cf 91       	pop	r28

00000b10 <TimerHandler>:
 b10:	f8 94       	cli
 b12:	20 91 26 01 	lds	r18, 0x0126
 b16:	23 95       	inc	r18
 b18:	20 93 26 01 	sts	0x0126, r18
 b1c:	78 94       	sei
 b1e:	31 f6       	brne	.-116    	; 0xaac
 b20:	08 95       	ret

00000b22 <AvrXCancelTimer>:
 b22:	f8 94       	cli
 b24:	bb dd       	rcall	.-1162   	; 0x69c
 b26:	78 94       	sei
 b28:	c7 de       	rcall	.-626    	; 0x8b8
 b2a:	6a 8d       	ldd	r22, Y+26	; 0x1a
 b2c:	7b 8d       	ldd	r23, Y+27	; 0x1b
 b2e:	e4 e2       	ldi	r30, 0x24	; 36
 b30:	f1 e0       	ldi	r31, 0x01	; 1
 b32:	f8 94       	cli
 b34:	ec de       	rcall	.-552    	; 0x90e
 b36:	20 50       	subi	r18, 0x00	; 0
 b38:	30 40       	sbci	r19, 0x00	; 0
 b3a:	59 f0       	breq	.+22     	; 0xb52
 b3c:	c6 2f       	mov	r28, r22
 b3e:	d7 2f       	mov	r29, r23
 b40:	6c 81       	ldd	r22, Y+4	; 0x04
 b42:	7d 81       	ldd	r23, Y+5	; 0x05
 b44:	95 81       	ldd	r25, Z+5	; 0x05
 b46:	84 81       	ldd	r24, Z+4	; 0x04
 b48:	86 0f       	add	r24, r22
 b4a:	97 1f       	adc	r25, r23
 b4c:	84 83       	std	Z+4, r24	; 0x04
 b4e:	95 83       	std	Z+5, r25	; 0x05
 b50:	f3 cd       	rjmp	.-1050   	; 0x738

00000b52 <act00>:
 b52:	2a 8f       	std	Y+26, r18	; 0x1a
 b54:	3b 8f       	std	Y+27, r19	; 0x1b
 b56:	f0 cd       	rjmp	.-1056   	; 0x738

00000b58 <AvrXReadEEProm>:
 b58:	68 2f       	mov	r22, r24
 b5a:	79 2f       	mov	r23, r25
 b5c:	91 e0       	ldi	r25, 0x01	; 1
 b5e:	88 e2       	ldi	r24, 0x28	; 40
 b60:	89 de       	rcall	.-750    	; 0x874

00000b62 <are01>:
 b62:	e1 99       	sbic	0x1c, 1	; 28
 b64:	fe cf       	rjmp	.-4      	; 0xb62
 b66:	6e bb       	out	0x1e, r22	; 30
 b68:	7f bb       	out	0x1f, r23	; 31
 b6a:	e0 9a       	sbi	0x1c, 0	; 28
 b6c:	0d b2       	in	r0, 0x1d	; 29
 b6e:	0f 92       	push	r0
 b70:	98 de       	rcall	.-720    	; 0x8a2
 b72:	8f 91       	pop	r24
 b74:	08 95       	ret

00000b76 <AvrXReadEEPromWord>:
 b76:	68 2f       	mov	r22, r24
 b78:	79 2f       	mov	r23, r25
 b7a:	91 e0       	ldi	r25, 0x01	; 1
 b7c:	88 e2       	ldi	r24, 0x28	; 40
 b7e:	7a de       	rcall	.-780    	; 0x874

00000b80 <arew01>:
 b80:	e1 99       	sbic	0x1c, 1	; 28
 b82:	fe cf       	rjmp	.-4      	; 0xb80
 b84:	6e bb       	out	0x1e, r22	; 30
 b86:	7f bb       	out	0x1f, r23	; 31
 b88:	e0 9a       	sbi	0x1c, 0	; 28
 b8a:	0d b2       	in	r0, 0x1d	; 29
 b8c:	0f 92       	push	r0
 b8e:	6f 5f       	subi	r22, 0xFF	; 255
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	6e bb       	out	0x1e, r22	; 30
 b94:	7f bb       	out	0x1f, r23	; 31
 b96:	e0 9a       	sbi	0x1c, 0	; 28
 b98:	0d b2       	in	r0, 0x1d	; 29
 b9a:	0f 92       	push	r0
 b9c:	82 de       	rcall	.-764    	; 0x8a2
 b9e:	9f 91       	pop	r25
 ba0:	8f 91       	pop	r24
 ba2:	08 95       	ret

00000ba4 <AvrXWriteEEProm>:
 ba4:	46 2f       	mov	r20, r22
 ba6:	68 2f       	mov	r22, r24
 ba8:	79 2f       	mov	r23, r25
 baa:	91 e0       	ldi	r25, 0x01	; 1
 bac:	88 e2       	ldi	r24, 0x28	; 40
 bae:	62 de       	rcall	.-828    	; 0x874

00000bb0 <awe00>:
 bb0:	e1 99       	sbic	0x1c, 1	; 28
 bb2:	fe cf       	rjmp	.-4      	; 0xbb0
 bb4:	6e bb       	out	0x1e, r22	; 30
 bb6:	7f bb       	out	0x1f, r23	; 31
 bb8:	4d bb       	out	0x1d, r20	; 29
 bba:	e2 9a       	sbi	0x1c, 2	; 28
 bbc:	e1 9a       	sbi	0x1c, 1	; 28
 bbe:	71 ce       	rjmp	.-798    	; 0x8a2

00000bc0 <AvrXIntResetObjectSemaphore>:
 bc0:	e8 2f       	mov	r30, r24
 bc2:	f9 2f       	mov	r31, r25
 bc4:	32 96       	adiw	r30, 0x02	; 2
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc

00000bc8 <AvrXIntResetSemaphore>:
 bc8:	f9 2f       	mov	r31, r25
 bca:	e8 2f       	mov	r30, r24

00000bcc <ars00>:
 bcc:	f8 94       	cli
 bce:	40 81       	ld	r20, Z
 bd0:	51 81       	ldd	r21, Z+1	; 0x01
 bd2:	41 50       	subi	r20, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	11 f0       	breq	.+4      	; 0xbdc
 bd8:	4f 5f       	subi	r20, 0xFF	; 255
 bda:	5f 4f       	sbci	r21, 0xFF	; 255

00000bdc <ars01>:
 bdc:	51 83       	std	Z+1, r21	; 0x01
 bde:	40 83       	st	Z, r20
 be0:	18 95       	reti
