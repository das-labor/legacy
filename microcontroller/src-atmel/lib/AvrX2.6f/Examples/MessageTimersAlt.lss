
MessageTimersAlt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000da  00800060  00800060  00000d2e  2**2
                  ALLOC
  3 .noinit       00000000  0080013a  0080013a  00000d2e  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000d2e  2**0
                  CONTENTS
  5 .stab         00004950  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000011d9  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a
   4:	0c 94 50 00 	jmp	0xa0
   8:	0c 94 50 00 	jmp	0xa0
   c:	0c 94 50 00 	jmp	0xa0
  10:	0c 94 50 00 	jmp	0xa0
  14:	0c 94 50 00 	jmp	0xa0
  18:	0c 94 50 00 	jmp	0xa0
  1c:	0c 94 50 00 	jmp	0xa0
  20:	0c 94 50 00 	jmp	0xa0
  24:	0c 94 50 00 	jmp	0xa0
  28:	0c 94 50 00 	jmp	0xa0
  2c:	0c 94 52 00 	jmp	0xa4
  30:	0c 94 50 00 	jmp	0xa0
  34:	0c 94 08 01 	jmp	0x210
  38:	0c 94 02 01 	jmp	0x204
  3c:	0c 94 50 00 	jmp	0xa0
  40:	0c 94 50 00 	jmp	0xa0
  44:	0c 94 50 00 	jmp	0xa0
  48:	0c 94 50 00 	jmp	0xa0
  4c:	0c 94 50 00 	jmp	0xa0
  50:	0c 94 50 00 	jmp	0xa0

00000054 <__ctors_end>:
  54:	ec 00       	.word	0x00ec	; ????
  56:	8c 00       	.word	0x008c	; ????
  58:	60 00       	.word	0x0060	; ????
  5a:	03 23       	and	r16, r19

0000005b <flasherTcb>:
  5b:	23 01 5a 00 9d 00 02                                #.Z....

00000062 <MonitorTcb>:
  62:	9c 00 fe 01 b5 00 00 00                             ........

0000006a <__init>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ea e9       	ldi	r30, 0x9A	; 154
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 33       	cpi	r26, 0x3A	; 58
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94
  9c:	0c 94 a7 00 	jmp	0x14e

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0x0

000000a4 <__vector_11>:
 */
#pragma optimize=z 4
AVRX_SIGINT(SIG_OVERFLOW0)
{
    IntProlog();                // Save interrupted context, switch stacks
  a4:	0e 94 76 03 	call	0x6ec
    TCNT0 = TCNT0_INIT;
  a8:	81 ec       	ldi	r24, 0xC1	; 193
  aa:	82 bf       	out	0x32, r24	; 50
//    outp(TCNT0_INIT, TCNT0);    // Reload the timer counter
    AvrXTimerHandler();         // Process Timer queue
  ac:	0e 94 77 05 	call	0xaee
    Epilog();                   // Restore context of next running task
  b0:	0e 94 c2 03 	call	0x784

000000b4 <flasher>:
}

AVRX_IAR_TASKDEF(flasher, 4, 16, 2)
AVRX_GCC_TASKDEF(flasher, 20, 2)    // Note I added r_stack and c_stack!
{
    unsigned char led = 0;
  b4:	c0 e0       	ldi	r28, 0x00	; 0
    pMyMessage pMsg;

	LEDDDR = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
//    outp(0xFF, LEDDDR);            // Initialize LED port to outputs

    while(1)
    {

        AvrXStartTimerMessage(&Timer, 150, &MyQueue);
  ba:	4b ea       	ldi	r20, 0xAB	; 171
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	66 e9       	ldi	r22, 0x96	; 150
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	83 ea       	ldi	r24, 0xA3	; 163
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 bb 05 	call	0xb76
        LED = ~led;
  ca:	8c 2f       	mov	r24, r28
  cc:	80 95       	com	r24
  ce:	85 bb       	out	0x15, r24	; 21
//        outp(~led, LED);
        pMsg = (pMyMessage)AvrXWaitMessage(&MyQueue);
  d0:	8b ea       	ldi	r24, 0xAB	; 171
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 3b 05 	call	0xa76
  d8:	9c 01       	movw	r18, r24
        if (pMsg == &SwitchMsg)
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	2b 3b       	cpi	r18, 0xBB	; 187
  de:	38 07       	cpc	r19, r24
  e0:	89 f4       	brne	.+34     	; 0x104
        {
            led ^= ~(pMsg->data);
  e2:	80 91 bf 00 	lds	r24, 0x00BF
  e6:	80 95       	com	r24
  e8:	c8 27       	eor	r28, r24
            AvrXAckMessage(&pMsg->mcb);
  ea:	c9 01       	movw	r24, r18
  ec:	0e 94 77 04 	call	0x8ee
            if (AvrXCancelTimerMessage(&Timer, &MyQueue) != &Timer.u.mcb)
  f0:	6b ea       	ldi	r22, 0xAB	; 171
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 e7 05 	call	0xbce
  fc:	83 5a       	subi	r24, 0xA3	; 163
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f2       	breq	.-72     	; 0xba
 102:	07 c0       	rjmp	.+14     	; 0x112
                AvrXHalt();     // The timer should always be found...
        }
        else if ((pTimerMessageBlock)pMsg == &Timer)
 104:	23 5a       	subi	r18, 0xA3	; 163
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	21 f4       	brne	.+8      	; 0x112
        {
#ifdef __IAR_SYSTEMS_ICC__
            led = led+led+((led & 0x80)?1:0);
#else
            asm("rol %0\n"\
 10a:	cc 1f       	adc	r28, r28
 10c:	08 f4       	brcc	.+2      	; 0x110
 10e:	c3 95       	inc	r28
 110:	d4 cf       	rjmp	.-88     	; 0xba
                "\tbrcc .+2\n"\
                "\tinc %0\n"  ::"r" (led));
#endif
        }
        else
        {
            AvrXHalt();
 112:	0e 94 0f 05 	call	0xa1e
 116:	d1 cf       	rjmp	.-94     	; 0xba

00000118 <switcher>:
        }
    }
}
AVRX_IAR_TASKDEF(switcher, 4, 16, 3)
AVRX_GCC_TASKDEF(switcher, 10, 3)
{
//    outp(0xFF, SWITCHP);            // Enable pullups on switch inputs
    SWITCHP = 0xFF;            // Enable pullups on switch inputs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	88 bb       	out	0x18, r24	; 24
    while(1)
    {
        AvrXDelay(&SwTimer, 10);    // Delay 10 milliseconds
 11c:	6a e0       	ldi	r22, 0x0A	; 10
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	8f ea       	ldi	r24, 0xAF	; 175
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 49 05 	call	0xa92
//        if (SwitchMsg.data != inp(SWITCH)) // On change, send message
        if (SwitchMsg.data != SWITCH) // On change, send message
 128:	90 91 bf 00 	lds	r25, 0x00BF
 12c:	86 b3       	in	r24, 0x16	; 22
 12e:	98 17       	cp	r25, r24
 130:	a9 f3       	breq	.-22     	; 0x11c
        {
//            SwitchMsg.data = inp(SWITCH);
            SwitchMsg.data = SWITCH;
 132:	86 b3       	in	r24, 0x16	; 22
 134:	80 93 bf 00 	sts	0x00BF, r24
            AvrXSendMessage(&MyQueue, &SwitchMsg.mcb);
 138:	6b eb       	ldi	r22, 0xBB	; 187
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	8b ea       	ldi	r24, 0xAB	; 171
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 32 05 	call	0xa64
            AvrXWaitMessageAck(&SwitchMsg.mcb);
 144:	8b eb       	ldi	r24, 0xBB	; 187
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 60 04 	call	0x8c0
 14c:	e7 cf       	rjmp	.-50     	; 0x11c

0000014e <main>:
        }
    }
}

int main(void)
{
 14e:	cf e5       	ldi	r28, 0x5F	; 95
 150:	d8 e0       	ldi	r29, 0x08	; 8
 152:	de bf       	out	0x3e, r29	; 62
 154:	cd bf       	out	0x3d, r28	; 61
    AvrXSetKernelStack(0);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 fb 03 	call	0x7f6
    MCUCR = 1<<SE;
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	85 bf       	out	0x35, r24	; 53
    TCNT0 = TCNT0_INIT;
 162:	81 ec       	ldi	r24, 0xC1	; 193
 164:	82 bf       	out	0x32, r24	; 50
    TCCR0 = TMC8_CK256;
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	83 bf       	out	0x33, r24	; 51
    TIMSK = 1<<TOIE0;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 bf       	out	0x39, r24	; 57
/*
    outp((1<<SE) , MCUCR);      // Enable "sleep" mode (low power when idle)
    outp(TCNT0_INIT, TCNT0);    // Load overflow counter of timer0
    outp(TMC8_CK256 , TCCR0);   // Set Timer0 to CPUCLK/256
    outp((1<<TOIE0), TIMSK);    // Enable interrupt flag
*/
    AvrXRunTask(TCB(flasher));
 16e:	8b e5       	ldi	r24, 0x5B	; 91
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 07 04 	call	0x80e
    AvrXRunTask(TCB(switcher));
 176:	84 e5       	ldi	r24, 0x54	; 84
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 07 04 	call	0x80e
    AvrXRunTask(TCB(Monitor));
 17e:	82 e6       	ldi	r24, 0x62	; 98
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 07 04 	call	0x80e

    AvrXSetSemaphore(&EEPromMutex); // Enables EEPROM access in monitor
 186:	88 e3       	ldi	r24, 0x38	; 56
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 79 04 	call	0x8f2
    InitSerialIO(UBRR_INIT);    // Initialize USART baud rate generator
 18e:	83 e3       	ldi	r24, 0x33	; 51
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 fe 00 	call	0x1fc

    Epilog();                   // Switch from AvrX Stack to first task
 196:	0e 94 c2 03 	call	0x784
    return 0;
}
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0c 94 4c 06 	jmp	0xc98

000001a2 <PushChar>:
; by the next routine
;-
        _FUNCTION(PushChar)
PushChar:
        push    Xl
 1a2:	af 93       	push	r26
        lds     Xl, SioFlags
 1a4:	a0 91 26 01 	lds	r26, 0x0126
        sbr     Xl, 1<<CharPushed
 1a8:	a0 68       	ori	r26, 0x80	; 128
        sts     SioFlags, Xl
 1aa:	a0 93 26 01 	sts	0x0126, r26
        pop     Xl
 1ae:	af 91       	pop	r26
        ret
 1b0:	08 95       	ret

000001b2 <GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; GetChar
;
; Need to make this draw from a buffer so that multiple
; chars can be pushed... and so different input streams
; can be attached to the buffer.
;-
        _FUNCTION(GetChar)
#ifdef  __IAR_SYSTEMS_ASM__
        PUBLIC  ?C_GETCHAR
?C_GETCHAR:     ; Need this label for simulator I/O
#endif
GetChar:
        lds     tmp0, SioFlags
 1b2:	20 91 26 01 	lds	r18, 0x0126
        sbrs    tmp0, CharPushed
 1b6:	27 ff       	sbrs	r18, 7
        rjmp    gc00
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4
        cbr     tmp0, 1<<CharPushed
 1ba:	2f 77       	andi	r18, 0x7F	; 127
        rjmp    gc01
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca
        sts     SioFlags, tmp0
 1be:	20 93 26 01 	sts	0x0126, r18
        rjmp    gc01
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca

000001c4 <gc00>:
gc00:
        ldi     p1h, hi8(RxC_Flag)
 1c4:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 1c6:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXWaitSemaphore       ; Wait for a charactor, or flag from System
 1c8:	7d d3       	rcall	.+1786   	; 0x8c4

000001ca <gc01>:
gc01:
        lds     r1l, _RxByte
 1ca:	80 91 2a 01 	lds	r24, 0x012A
        ret
 1ce:	08 95       	ret

000001d0 <_GetChar>:
        _ENDFUNC
;+
;------------------------------------------
; _GetChar
;
; Special version that echos
;
; RETURNS:      RxByte (Register)
;-
        _FUNCTION(_GetChar)

_GetChar:
        rcall   GetChar
 1d0:	f0 df       	rcall	.-32     	; 0x1b2
        rjmp    PutChar
 1d2:	28 c0       	rjmp	.+80     	; 0x224

000001d4 <PutCR>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutCR
;
; Put a CR to the output stream
;-
        _FUNCTION(PutCR)
PutCR:
        ldi     p1l, 0x0D
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
        rjmp    PutChar
 1d6:	26 c0       	rjmp	.+76     	; 0x224

000001d8 <PutSpace>:
        _ENDFUNC
;+
;------------------------------------------
;
; PutSpace
;
; Put a space to the output stream
;-
        _FUNCTION(PutSpace)

PutSpace:
        ldi     p1l, ' '
 1d8:	80 e2       	ldi	r24, 0x20	; 32
        rjmp    PutChar
 1da:	24 c0       	rjmp	.+72     	; 0x224

000001dc <_PrintString>:
        _ENDFUNC
;+
;------------------------------------------
;
; const char * PutString(const char *)
;
; passed:
;       near pointer to string in FLASH memory
; Returns:
;       pointer to next char after NULL
;-
        _FUNCTION(_PrintString)

_PrintString:
        mov     Zl, p1l
 1dc:	e8 2f       	mov	r30, r24
        mov     Zh, p1h
 1de:	f9 2f       	mov	r31, r25

000001e0 <_foo>:
_foo:
        lpm
 1e0:	c8 95       	lpm
        tst     R0
 1e2:	00 20       	and	r0, r0
        breq    _ps00
 1e4:	41 f0       	breq	.+16     	; 0x1f6
        mov     p1l, R0
 1e6:	80 2d       	mov	r24, r0
        push    Zl
 1e8:	ef 93       	push	r30
        push    Zh
 1ea:	ff 93       	push	r31
        rcall   PutChar
 1ec:	1b d0       	rcall	.+54     	; 0x224
        pop     Zh
 1ee:	ff 91       	pop	r31
        pop     Zl
 1f0:	ef 91       	pop	r30
        adiw    Zl, 1
 1f2:	31 96       	adiw	r30, 0x01	; 1
        rjmp    _foo
 1f4:	f5 cf       	rjmp	.-22     	; 0x1e0

000001f6 <_ps00>:
_ps00:
        mov     r1l, Zl
 1f6:	8e 2f       	mov	r24, r30
        mov     r1h, Zh
 1f8:	9f 2f       	mov	r25, r31
        ret
 1fa:	08 95       	ret

000001fc <InitSerialIO>:
        _ENDFUNC
;+
;-------------------------------------------
; void InitSerialIO(unsigned)
;
; PASSED:       R25:24 = UBBR
;		p1h:p1l = UBBR
;
; History: parameter used to be passed in R25 l.b. 1/31/01
;	   Changed to unsigned for mega chips. l.b. 5/30/02
;
        _FUNCTION(InitSerialIO)
InitSerialIO:
        out     _SFR_IO_ADDR(UBRR), p1l
 1fc:	89 b9       	out	0x09, r24	; 9
#if defined(UBRR0H)
	sts	UBRR0H, p1h	// THIS appears to be a no-op
#endif
#if defined(UCSR0C)
	ldi	tmp0, UCRC_INIT	// SET word length.
	sts	UCSR0C, tmp0	// Extended register in mega128
#endif
        ldi     tmp0, UCR_INIT
 1fe:	28 e9       	ldi	r18, 0x98	; 152
        out     _SFR_IO_ADDR(UCR), tmp0
 200:	2a b9       	out	0x0a, r18	; 10
        ret
 202:	08 95       	ret

00000204 <__vector_14>:
        _ENDFUNC
;
;-----------------------------------------------
; UDRE_Interrupt
;
; Disables the interrupt (UDR is empty) signal waiting
; process to stuff the UDR
;
        _FUNCTION(SIG_UART_DATA)
SIG_UART_DATA:
        cbi     _SFR_IO_ADDR(UCR), UDRIE      ; Disable the interrupt
 204:	55 98       	cbi	0x0a, 5	; 10

        rcall   IntProlog
 206:	72 d2       	rcall	.+1252   	; 0x6ec

		ldi     p1l, lo8(TxIntFlag)
 208:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 20a:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXIntSetSemaphore     ; Signal we are ready for more.
 20c:	7f d3       	rcall	.+1790   	; 0x90c

        rjmp    _Epilog
 20e:	bc c2       	rjmp	.+1400   	; 0x788

00000210 <__vector_13>:
        _ENDFUNC

;
;-----------------------------------------------
; RxC_Interrupt
;
; Reads the USART and flags UserTask, Char In semaphore
;
        _FUNCTION(SIG_UART_RECV)
SIG_UART_RECV:
        cbi     _SFR_IO_ADDR(UCR), RXCIE      ; disable interrupt
 210:	57 98       	cbi	0x0a, 7	; 10

        rcall   IntProlog      ; Switch to kernel stack
 212:	6c d2       	rcall	.+1240   	; 0x6ec

        in      Xl, _SFR_IO_ADDR(UDR)
 214:	ac b1       	in	r26, 0x0c	; 12
        sts     _RxByte, Xl
 216:	a0 93 2a 01 	sts	0x012A, r26

        ldi     p1h, hi8(RxC_Flag)
 21a:	91 e0       	ldi	r25, 0x01	; 1
        ldi     p1l, lo8(RxC_Flag)
 21c:	88 e2       	ldi	r24, 0x28	; 40
        rcall   AvrXIntSetSemaphore
 21e:	76 d3       	rcall	.+1772   	; 0x90c

        sbi     _SFR_IO_ADDR(UCR), RXCIE      ; Re-enable interrupts
 220:	57 9a       	sbi	0x0a, 7	; 10
        rjmp    _Epilog
 222:	b2 c2       	rjmp	.+1380   	; 0x788

00000224 <PutChar>:
        _ENDFUNC
;+
;------------------------------------------
; PutChar
;
; Passed: p1l "TxByte"
;
; Stuffs "TxByte" into usart.  The usart is double buffered.
; when the data register is full we wait on the semaphore
; until the Usart interrupts indicating the register is ready.
;-
        _FUNCTION(PutChar)
#ifdef __IAR_SYSTEMS_ASM__
        _PUBLIC(?C_PUTCHAR)     ; Enable terminal I/O
?C_PUTCHAR:
#endif
PutChar:
        sbic    _SFR_IO_ADDR(USR), UDRE
 224:	5d 99       	sbic	0x0b, 5	; 11
        rjmp    pc00
 226:	06 c0       	rjmp	.+12     	; 0x234

        push    p1l
 228:	8f 93       	push	r24
        sbi     _SFR_IO_ADDR(UCR), UDRIE      ; Enable interrupts and
 22a:	55 9a       	sbi	0x0a, 5	; 10
        ldi     p1l, lo8(TxIntFlag)
 22c:	84 e2       	ldi	r24, 0x24	; 36
        ldi     p1h, hi8(TxIntFlag)
 22e:	91 e0       	ldi	r25, 0x01	; 1
        rcall   AvrXWaitSemaphore; Wait until data register is ready
 230:	49 d3       	rcall	.+1682   	; 0x8c4
        pop     p1l
 232:	8f 91       	pop	r24

00000234 <pc00>:
pc00:
        out     _SFR_IO_ADDR(UDR), p1l
 234:	8c b9       	out	0x0c, r24	; 12
        ret
 236:	08 95       	ret

00000238 <_GetHex>:
        _ENDFUNC

;-----------------------------------------
; _GetHex
;
; PASSED:       p1l = Maximum number of digits
; RETURNS:      r1 = val, Tbit, p2l = Number of digits entered
; USES:         R24, R25
; STACK:        4
;
        _FUNCTION(_GetHex)
_GetHex:
        push    R10
 238:	af 92       	push	r10
        push    R11
 23a:	bf 92       	push	r11
        push    R12
 23c:	cf 92       	push	r12
        push    R13
 23e:	df 92       	push	r13

        mov     R13, p1l
 240:	d8 2e       	mov	r13, r24
        clr     R10
 242:	aa 24       	eor	r10, r10
        clr     R11
 244:	bb 24       	eor	r11, r11
        clr     R12
 246:	cc 24       	eor	r12, r12

00000248 <gh_00>:
gh_00:
        rcall   _GetChar
 248:	c3 df       	rcall	.-122    	; 0x1d0
        rcall   IsHex
 24a:	21 d0       	rcall	.+66     	; 0x28e
        brtc    gh_xx
 24c:	96 f4       	brtc	.+36     	; 0x272
        cpi     r1l, '9'+1
 24e:	8a 33       	cpi	r24, 0x3A	; 58
        brge    gh_01
 250:	14 f4       	brge	.+4      	; 0x256
        subi    r1l, '0'
 252:	80 53       	subi	r24, 0x30	; 48
        rjmp    gh_02
 254:	02 c0       	rjmp	.+4      	; 0x25a

00000256 <gh_01>:
gh_01:
        cbr     r1l, 0x20
 256:	8f 7d       	andi	r24, 0xDF	; 223
        subi    r1l, 'A'-10
 258:	87 53       	subi	r24, 0x37	; 55

0000025a <gh_02>:
gh_02:
        lsl     R10
 25a:	aa 0c       	add	r10, r10
        rol     R11
 25c:	bb 1c       	adc	r11, r11
        lsl     R10
 25e:	aa 0c       	add	r10, r10
        rol     R11
 260:	bb 1c       	adc	r11, r11
        lsl     R10
 262:	aa 0c       	add	r10, r10
        rol     R11
 264:	bb 1c       	adc	r11, r11
        lsl     R10
 266:	aa 0c       	add	r10, r10
        rol     R11
 268:	bb 1c       	adc	r11, r11
        add     R10, r1l
 26a:	a8 0e       	add	r10, r24
        inc     R12
 26c:	c3 94       	inc	r12
        dec     R13
 26e:	da 94       	dec	r13
        brne    gh_00
 270:	59 f7       	brne	.-42     	; 0x248

00000272 <gh_xx>:
gh_xx:
        mov     p2l, R12
 272:	6c 2d       	mov	r22, r12
        mov     r1l, R10
 274:	8a 2d       	mov	r24, r10
        mov     r1h, R11
 276:	9b 2d       	mov	r25, r11

        pop     R13
 278:	df 90       	pop	r13
        pop     R12
 27a:	cf 90       	pop	r12
        pop     R11
 27c:	bf 90       	pop	r11
        pop     R10
 27e:	af 90       	pop	r10
        ret
 280:	08 95       	ret

00000282 <GetHexWord>:
        _ENDFUNC


;-----------------------------------------
; GetHexWord
;
        _FUNCTION(GetHexWord)

GetHexWord:
        ldi     p1l, 4
 282:	84 e0       	ldi	r24, 0x04	; 4
        rjmp    _GetHex
 284:	d9 cf       	rjmp	.-78     	; 0x238

00000286 <GetHexByte>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexByte)

GetHexByte:
        ldi     p1l, 2
 286:	82 e0       	ldi	r24, 0x02	; 2
        rjmp    _GetHex
 288:	d7 cf       	rjmp	.-82     	; 0x238

0000028a <GetHexChar>:
        _ENDFUNC
;-----------------------------------------
; GetHexByte
;
        _FUNCTION(GetHexChar)

GetHexChar:
        ldi     p1l, 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
        rjmp    _GetHex
 28c:	d5 cf       	rjmp	.-86     	; 0x238

0000028e <IsHex>:
        _ENDFUNC
;-----------------------------------------
; IsHex
;
; Tests RxByte for ascii hex char
; Returns: T bit
;
        _FUNCTION(IsHex)

IsHex:
        push    p1l
 28e:	8f 93       	push	r24
        lds     p1l, _RxByte
 290:	80 91 2a 01 	lds	r24, 0x012A
        clt
 294:	e8 94       	clt
        cpi     p1l, '0'
 296:	80 33       	cpi	r24, 0x30	; 48
        brlt    ihno
 298:	5c f0       	brlt	.+22     	; 0x2b0
        cpi     p1l, '9'+1
 29a:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ihyes
 29c:	44 f0       	brlt	.+16     	; 0x2ae
        cpi     p1l, 'A'
 29e:	81 34       	cpi	r24, 0x41	; 65
        brlt    ihno
 2a0:	3c f0       	brlt	.+14     	; 0x2b0
        cpi     p1l, 'F'+1
 2a2:	87 34       	cpi	r24, 0x47	; 71
        brlt    ihyes
 2a4:	24 f0       	brlt	.+8      	; 0x2ae
        cpi     p1l, 'a'
 2a6:	81 36       	cpi	r24, 0x61	; 97
        brlt    ihno
 2a8:	1c f0       	brlt	.+6      	; 0x2b0
        cpi     p1l, 'f'+1
 2aa:	87 36       	cpi	r24, 0x67	; 103
        brge    ihno
 2ac:	0c f4       	brge	.+2      	; 0x2b0

000002ae <ihyes>:
ihyes:
        set
 2ae:	68 94       	set

000002b0 <ihno>:
ihno:
        pop     p1l
 2b0:	8f 91       	pop	r24
        ret
 2b2:	08 95       	ret

000002b4 <IsWhite>:
        _ENDFUNC
;-----------------------------------------
; IsWhite
;
; Tests RxByte for space or CR
; Returns: T bit
;
        _FUNCTION(IsWhite)

IsWhite:
        push    p1l
 2b4:	8f 93       	push	r24
        lds     p1l, _RxByte
 2b6:	80 91 2a 01 	lds	r24, 0x012A
        clt
 2ba:	e8 94       	clt
        cpi     p1l, ' '
 2bc:	80 32       	cpi	r24, 0x20	; 32
        breq    ihyes
 2be:	b9 f3       	breq	.-18     	; 0x2ae
        cpi     p1l, 0x0D
 2c0:	8d 30       	cpi	r24, 0x0D	; 13
        breq    ihyes
 2c2:	a9 f3       	breq	.-22     	; 0x2ae
        rjmp    ihno
 2c4:	f5 cf       	rjmp	.-22     	; 0x2b0

000002c6 <_PutHex>:
        _ENDFUNC
;-----------------------------------------
; void _PutHex(unsigned val, char digits)
;
; Passed:       p2 = Value, p1l = # digits
; RETURN:       Nothing
; USES:         R25, TxByte
; STACK:        2
;
        _FUNCTION(_PutHex)

_PutHex:
        ldi     tmp2, 4          ; Maximum number of digits.
 2c6:	44 e0       	ldi	r20, 0x04	; 4
        mov     tmp3, p2l
 2c8:	56 2f       	mov	r21, r22
        mov     p2l, p1l
 2ca:	68 2f       	mov	r22, r24
        mov     p2h, p1h
 2cc:	79 2f       	mov	r23, r25

000002ce <ph00>:
ph00:
        lsl     p2l
 2ce:	66 0f       	add	r22, r22
        rol     p2h
 2d0:	77 1f       	adc	r23, r23
        rol     p1l
 2d2:	88 1f       	adc	r24, r24
        lsl     p2l
 2d4:	66 0f       	add	r22, r22
        rol     p2h
 2d6:	77 1f       	adc	r23, r23
        rol     p1l
 2d8:	88 1f       	adc	r24, r24
        lsl     p2l
 2da:	66 0f       	add	r22, r22
        rol     p2h
 2dc:	77 1f       	adc	r23, r23
        rol     p1l
 2de:	88 1f       	adc	r24, r24
        lsl     p2l
 2e0:	66 0f       	add	r22, r22
        rol     p2h
 2e2:	77 1f       	adc	r23, r23
        rol     p1l
 2e4:	88 1f       	adc	r24, r24

        cp      tmp3, tmp2
 2e6:	54 17       	cp	r21, r20
        brlt    ph02
 2e8:	34 f0       	brlt	.+12     	; 0x2f6

        cbr     p1l, 0xF0
 2ea:	8f 70       	andi	r24, 0x0F	; 15
        subi    p1l, lo8(-'0')          ; Addi 0
 2ec:	80 5d       	subi	r24, 0xD0	; 208
        cpi     p1l, lo8('9' + 1)       ; if > 9
 2ee:	8a 33       	cpi	r24, 0x3A	; 58
        brlt    ph01                    ; subi 9 and add A
 2f0:	0c f0       	brlt	.+2      	; 0x2f4
        subi    p1l, lo8('9' + 1 - 'A')
 2f2:	89 5f       	subi	r24, 0xF9	; 249

000002f4 <ph01>:
ph01:
        rcall   PutChar
 2f4:	97 df       	rcall	.-210    	; 0x224

000002f6 <ph02>:
ph02:
        dec     tmp2
 2f6:	4a 95       	dec	r20
        brne    ph00
 2f8:	51 f7       	brne	.-44     	; 0x2ce

        ret
 2fa:	08 95       	ret

000002fc <PutHexWord>:
        _ENDFUNC
;-----------------------------------------
; Put out a hex word
;
; Passed: Y = word
;
        _FUNCTION(PutHexWord)

PutHexWord:
        ldi     p2l, 4
 2fc:	64 e0       	ldi	r22, 0x04	; 4
        rjmp    _PutHex
 2fe:	e3 cf       	rjmp	.-58     	; 0x2c6

00000300 <PutHexByte>:
        _ENDFUNC
;-----------------------------------------
; Put out a two ascii hex byte
; Yl = byte
;
        _FUNCTION(PutHexByte)

PutHexByte:
        ldi     p2l, 2
 300:	62 e0       	ldi	r22, 0x02	; 2
        rjmp    _PutHex
 302:	e1 cf       	rjmp	.-62     	; 0x2c6

00000304 <Hello>:
 304:	0d 00       	.word	0x000d	; ????
 306:	41 76       	andi	r20, 0x61	; 97
 308:	72 58       	subi	r23, 0x82	; 130
 30a:	20 4d       	sbci	r18, 0xD0	; 208
 30c:	6f 6e       	ori	r22, 0xEF	; 239
 30e:	69 74       	andi	r22, 0x49	; 73
 310:	6f 72       	andi	r22, 0x2F	; 47
 312:	20 56       	subi	r18, 0x60	; 96
 314:	32 00       	.word	0x0032	; ????
 316:	0d 00       	.word	0x000d	; ????
 318:	0d 00       	.word	0x000d	; ????
 31a:	4d 6f       	ori	r20, 0xFD	; 253
 31c:	64 69       	ori	r22, 0x94	; 148
 31e:	66 79       	andi	r22, 0x96	; 150
 320:	20 3d       	cpi	r18, 0xD0	; 208
 322:	20 6d       	ori	r18, 0xD0	; 208
 324:	7b 73       	andi	r23, 0x3B	; 59
 326:	2c 65       	ori	r18, 0x5C	; 92
 328:	7d 5b       	subi	r23, 0xBD	; 189
 32a:	77 5d       	subi	r23, 0xD7	; 215
 32c:	5b 61       	ori	r21, 0x1B	; 27
 32e:	61 61       	ori	r22, 0x11	; 17
 330:	61 5d       	subi	r22, 0xD1	; 209
 332:	00 0d       	add	r16, r0
 334:	00 44       	sbci	r16, 0x40	; 64
 336:	75 6d       	ori	r23, 0xD5	; 213
 338:	70 20       	and	r7, r0
 33a:	20 20       	and	r2, r0
 33c:	3d 20       	and	r3, r13
 33e:	64 7b       	andi	r22, 0xB4	; 180
 340:	73 2c       	mov	r7, r3
 342:	65 7d       	andi	r22, 0xD5	; 213
 344:	5b 77       	andi	r21, 0x7B	; 123
 346:	5d 5b       	subi	r21, 0xBD	; 189
 348:	61 61       	ori	r22, 0x11	; 17
 34a:	61 61       	ori	r22, 0x11	; 17
 34c:	5d 20       	and	r5, r13
 34e:	5b 78       	andi	r21, 0x8B	; 139
 350:	78 5d       	subi	r23, 0xD8	; 216
 352:	00 0d       	add	r16, r0
 354:	00 48       	sbci	r16, 0x80	; 128
 356:	61 6c       	ori	r22, 0xC1	; 193
 358:	74 20       	and	r7, r4
 35a:	20 20       	and	r2, r0
 35c:	3d 20       	and	r3, r13
 35e:	68 5b       	subi	r22, 0xB8	; 184
 360:	6f 6f       	ori	r22, 0xFF	; 255
 362:	6f 6f       	ori	r22, 0xFF	; 255
 364:	5d 00       	.word	0x005d	; ????
 366:	0d 00       	.word	0x000d	; ????
 368:	53 74       	andi	r21, 0x43	; 67
 36a:	65 70       	andi	r22, 0x05	; 5
 36c:	20 20       	and	r2, r0
 36e:	20 3d       	cpi	r18, 0xD0	; 208
 370:	20 73       	andi	r18, 0x30	; 48
 372:	5b 6f       	ori	r21, 0xFB	; 251
 374:	6f 6f       	ori	r22, 0xFF	; 255
 376:	6f 5d       	subi	r22, 0xDF	; 223
 378:	00 0d       	add	r16, r0
 37a:	00 52       	subi	r16, 0x20	; 32
 37c:	65 73       	andi	r22, 0x35	; 53
 37e:	75 6d       	ori	r23, 0xD5	; 213
 380:	65 20       	and	r6, r5
 382:	3d 20       	and	r3, r13
 384:	72 5b       	subi	r23, 0xB2	; 178
 386:	6f 6f       	ori	r22, 0xFF	; 255
 388:	6f 6f       	ori	r22, 0xFF	; 255
 38a:	5d 00       	.word	0x005d	; ????
 38c:	0d 00       	.word	0x000d	; ????
 38e:	43 6f       	ori	r20, 0xF3	; 243
 390:	6e 74       	andi	r22, 0x4E	; 78
 392:	65 78       	andi	r22, 0x85	; 133
 394:	74 3d       	cpi	r23, 0xD4	; 212
 396:	20 78       	andi	r18, 0x80	; 128
 398:	5b 6f       	ori	r21, 0xFB	; 251
 39a:	6f 6f       	ori	r22, 0xFF	; 255
 39c:	6f 5d       	subi	r22, 0xDF	; 223
 39e:	00 0d       	add	r16, r0
 3a0:	00 53       	subi	r16, 0x30	; 48
 3a2:	69 67       	ori	r22, 0x79	; 121
 3a4:	6e 61       	ori	r22, 0x1E	; 30
 3a6:	6c 20       	and	r6, r12
 3a8:	3d 20       	and	r3, r13
 3aa:	69 5b       	subi	r22, 0xB9	; 185
 3ac:	6f 6f       	ori	r22, 0xFF	; 255
 3ae:	6f 6f       	ori	r22, 0xFF	; 255
 3b0:	5d 00       	.word	0x005d	; ????
 3b2:	0d 00       	.word	0x000d	; ????
 3b4:	43 61       	ori	r20, 0x13	; 19
 3b6:	6e 63       	ori	r22, 0x3E	; 62
 3b8:	65 6c       	ori	r22, 0xC5	; 197
 3ba:	20 3d       	cpi	r18, 0xD0	; 208
 3bc:	20 63       	ori	r18, 0x30	; 48
 3be:	5b 6f       	ori	r21, 0xFB	; 251
 3c0:	6f 6f       	ori	r22, 0xFF	; 255
 3c2:	6f 5d       	subi	r22, 0xDF	; 223
 3c4:	00 0d       	add	r16, r0
 3c6:	00 4b       	sbci	r16, 0xB0	; 176
 3c8:	69 6c       	ori	r22, 0xC9	; 201
 3ca:	6c 54       	subi	r22, 0x4C	; 76
 3cc:	73 6b       	ori	r23, 0xB3	; 179
 3ce:	3d 20       	and	r3, r13
 3d0:	6b 5b       	subi	r22, 0xBB	; 187
 3d2:	6f 6f       	ori	r22, 0xFF	; 255
 3d4:	6f 6f       	ori	r22, 0xFF	; 255
 3d6:	5d 00       	.word	0x005d	; ????
 3d8:	0d 00       	.word	0x000d	; ????
 3da:	49 6e       	ori	r20, 0xE9	; 233
 3dc:	69 74       	andi	r22, 0x49	; 73
 3de:	61 73       	andi	r22, 0x31	; 49
 3e0:	6b 3d       	cpi	r22, 0xDB	; 219
 3e2:	20 70       	andi	r18, 0x00	; 0
 3e4:	5b 61       	ori	r21, 0x1B	; 27
 3e6:	61 61       	ori	r22, 0x11	; 17
 3e8:	61 5d       	subi	r22, 0xD1	; 209
 3ea:	00 0d       	add	r16, r0
 3ec:	00 51       	subi	r16, 0x10	; 16
 3ee:	75 69       	ori	r23, 0x95	; 149
 3f0:	74 20       	and	r7, r4
 3f2:	20 20       	and	r2, r0
 3f4:	3d 20       	and	r3, r13
 3f6:	71 00       	.word	0x0071	; ????
 3f8:	0d 00       	.word	0x000d	; ????
	...

000003fc <Monitor>:
 3fc:	88 e3       	ldi	r24, 0x38	; 56
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	78 d2       	rcall	.+1264   	; 0x8f2
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	93 e0       	ldi	r25, 0x03	; 3

00000406 <Hello1>:
 406:	ea de       	rcall	.-556    	; 0x1dc
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	e8 2f       	mov	r30, r24
 40e:	f9 2f       	mov	r31, r25
 410:	c8 95       	lpm
 412:	00 20       	and	r0, r0
 414:	c1 f7       	brne	.-16     	; 0x406
 416:	20 e6       	ldi	r18, 0x60	; 96
 418:	42 2e       	mov	r4, r18
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	52 2e       	mov	r5, r18
 41e:	88 24       	eor	r8, r8
 420:	99 24       	eor	r9, r9
 422:	bb 24       	eor	r11, r11
 424:	aa 24       	eor	r10, r10
 426:	66 24       	eor	r6, r6
 428:	77 24       	eor	r7, r7

0000042a <DebugMonitor>:
 42a:	d4 de       	rcall	.-600    	; 0x1d4
 42c:	8e e3       	ldi	r24, 0x3E	; 62
 42e:	fa de       	rcall	.-524    	; 0x224
 430:	01 d0       	rcall	.+2      	; 0x434
 432:	fb cf       	rjmp	.-10     	; 0x42a

00000434 <m_Parse>:
 434:	cd de       	rcall	.-614    	; 0x1d0
 436:	8d 36       	cpi	r24, 0x6D	; 109
 438:	c9 f0       	breq	.+50     	; 0x46c
 43a:	84 36       	cpi	r24, 0x64	; 100
 43c:	d1 f0       	breq	.+52     	; 0x472
 43e:	88 36       	cpi	r24, 0x68	; 104
 440:	49 f1       	breq	.+82     	; 0x494
 442:	83 37       	cpi	r24, 0x73	; 115
 444:	c9 f1       	breq	.+114    	; 0x4b8
 446:	8b 36       	cpi	r24, 0x6B	; 107
 448:	a1 f1       	breq	.+104    	; 0x4b2
 44a:	82 37       	cpi	r24, 0x72	; 114
 44c:	31 f1       	breq	.+76     	; 0x49a
 44e:	89 36       	cpi	r24, 0x69	; 105
 450:	69 f1       	breq	.+90     	; 0x4ac
 452:	83 36       	cpi	r24, 0x63	; 99
 454:	29 f1       	breq	.+74     	; 0x4a0
 456:	88 37       	cpi	r24, 0x78	; 120
 458:	31 f1       	breq	.+76     	; 0x4a6
 45a:	80 37       	cpi	r24, 0x70	; 112
 45c:	c1 f0       	breq	.+48     	; 0x48e
 45e:	81 37       	cpi	r24, 0x71	; 113
 460:	11 f0       	breq	.+4      	; 0x466

00000462 <m_err>:
 462:	8f e3       	ldi	r24, 0x3F	; 63
 464:	df ce       	rjmp	.-578    	; 0x224

00000466 <m_quit>:
 466:	af 91       	pop	r26
 468:	af 91       	pop	r26
 46a:	08 95       	ret

0000046c <m_ModifyMemory>:
 46c:	50 d0       	rcall	.+160    	; 0x50e
 46e:	ce f7       	brtc	.-14     	; 0x462
 470:	9b c0       	rjmp	.+310    	; 0x5a8

00000472 <m_DumpMemory>:
 472:	4d d0       	rcall	.+154    	; 0x50e
 474:	c8 2e       	mov	r12, r24
 476:	d9 2e       	mov	r13, r25
 478:	a6 f7       	brtc	.-24     	; 0x462
 47a:	20 91 2a 01 	lds	r18, 0x012A
 47e:	2d 30       	cpi	r18, 0x0D	; 13
 480:	11 f0       	breq	.+4      	; 0x486
 482:	3c d0       	rcall	.+120    	; 0x4fc
 484:	76 f7       	brtc	.-36     	; 0x462

00000486 <m1b>:
 486:	6c 2d       	mov	r22, r12
 488:	7d 2d       	mov	r23, r13
 48a:	8a 2d       	mov	r24, r10
 48c:	6d c0       	rjmp	.+218    	; 0x568

0000048e <m_InitTask>:
 48e:	f9 de       	rcall	.-526    	; 0x282
 490:	46 f7       	brtc	.-48     	; 0x462
 492:	bf c1       	rjmp	.+894    	; 0x812

00000494 <m_HaltProcess>:
 494:	28 d0       	rcall	.+80     	; 0x4e6
 496:	2e f7       	brtc	.-54     	; 0x462
 498:	cf c2       	rjmp	.+1438   	; 0xa38

0000049a <m_ResumeProcess>:
 49a:	25 d0       	rcall	.+74     	; 0x4e6
 49c:	16 f7       	brtc	.-60     	; 0x462
 49e:	dc c1       	rjmp	.+952    	; 0x858

000004a0 <m_CancelTimer>:
 4a0:	22 d0       	rcall	.+68     	; 0x4e6
 4a2:	fe f6       	brtc	.-66     	; 0x462
 4a4:	79 c3       	rjmp	.+1778   	; 0xb98

000004a6 <m_PrintProcessContext>:
 4a6:	1f d0       	rcall	.+62     	; 0x4e6
 4a8:	e6 f6       	brtc	.-72     	; 0x462
 4aa:	bc c0       	rjmp	.+376    	; 0x624

000004ac <m_SetSemaphore>:
 4ac:	1c d0       	rcall	.+56     	; 0x4e6
 4ae:	ce f6       	brtc	.-78     	; 0x462
 4b0:	20 c2       	rjmp	.+1088   	; 0x8f2

000004b2 <m_Terminate>:
 4b2:	19 d0       	rcall	.+50     	; 0x4e6
 4b4:	b6 f6       	brtc	.-84     	; 0x462
 4b6:	a5 c2       	rjmp	.+1354   	; 0xa02

000004b8 <m_StepProcess>:
 4b8:	16 d0       	rcall	.+44     	; 0x4e6
 4ba:	9e f6       	brtc	.-90     	; 0x462
 4bc:	87 d2       	rcall	.+1294   	; 0x9cc
 4be:	88 23       	and	r24, r24
 4c0:	09 f4       	brne	.+2      	; 0x4c4
 4c2:	08 95       	ret

000004c4 <ms_NOTSUSPENDED>:
 4c4:	87 de       	rcall	.-754    	; 0x1d4
 4c6:	88 2d       	mov	r24, r8
 4c8:	99 2d       	mov	r25, r9
 4ca:	18 df       	rcall	.-464    	; 0x2fc
 4cc:	82 ed       	ldi	r24, 0xD2	; 210
 4ce:	94 e0       	ldi	r25, 0x04	; 4
 4d0:	85 ce       	rjmp	.-758    	; 0x1dc

000004d2 <NotSuspended>:
 4d2:	20 2d       	mov	r18, r0
 4d4:	20 4e       	sbci	r18, 0xE0	; 224
 4d6:	6f 74       	andi	r22, 0x4F	; 79
 4d8:	20 53       	subi	r18, 0x30	; 48
 4da:	75 73       	andi	r23, 0x35	; 53
 4dc:	70 65       	ori	r23, 0x50	; 80
 4de:	6e 64       	ori	r22, 0x4E	; 78
 4e0:	65 64       	ori	r22, 0x45	; 69
 4e2:	21 0d       	add	r18, r1
	...

000004e6 <GetObjectID>:
 4e6:	cd de       	rcall	.-614    	; 0x282
 4e8:	16 f0       	brts	.+4      	; 0x4ee
 4ea:	e4 de       	rcall	.-568    	; 0x2b4
 4ec:	36 f4       	brtc	.+12     	; 0x4fa

000004ee <goi00>:
 4ee:	66 23       	and	r22, r22
 4f0:	11 f4       	brne	.+4      	; 0x4f6
 4f2:	88 2d       	mov	r24, r8
 4f4:	99 2d       	mov	r25, r9

000004f6 <goi01>:
 4f6:	88 2e       	mov	r8, r24
 4f8:	99 2e       	mov	r9, r25

000004fa <goi02>:
 4fa:	08 95       	ret

000004fc <GetDumpLength>:
 4fc:	c4 de       	rcall	.-632    	; 0x286
 4fe:	16 f0       	brts	.+4      	; 0x504
 500:	d9 de       	rcall	.-590    	; 0x2b4
 502:	26 f4       	brtc	.+8      	; 0x50c

00000504 <gdl00>:
 504:	66 23       	and	r22, r22
 506:	09 f4       	brne	.+2      	; 0x50a
 508:	8a 2d       	mov	r24, r10

0000050a <gdl01>:
 50a:	a8 2e       	mov	r10, r24

0000050c <gdl02>:
 50c:	08 95       	ret

0000050e <GetFlagsAndAddress>:
 50e:	e8 94       	clt
 510:	5f de       	rcall	.-834    	; 0x1d0
 512:	2b 2d       	mov	r18, r11
 514:	83 37       	cpi	r24, 0x73	; 115
 516:	11 f4       	brne	.+4      	; 0x51c
 518:	2d 7f       	andi	r18, 0xFD	; 253
 51a:	03 c0       	rjmp	.+6      	; 0x522

0000051c <gbTRYEERAM>:
 51c:	85 36       	cpi	r24, 0x65	; 101
 51e:	e9 f4       	brne	.+58     	; 0x55a
 520:	22 60       	ori	r18, 0x02	; 2

00000522 <gbCONTINUE>:
 522:	b2 2e       	mov	r11, r18
 524:	ae de       	rcall	.-676    	; 0x282
 526:	2b 2d       	mov	r18, r11
 528:	1e f4       	brtc	.+6      	; 0x530
 52a:	2e 7f       	andi	r18, 0xFE	; 254
 52c:	b2 2e       	mov	r11, r18
 52e:	0c c0       	rjmp	.+24     	; 0x548

00000530 <gbCHECKWORDFLAG>:
 530:	2e 7f       	andi	r18, 0xFE	; 254
 532:	b2 2e       	mov	r11, r18
 534:	30 91 2a 01 	lds	r19, 0x012A
 538:	37 37       	cpi	r19, 0x77	; 119
 53a:	21 f4       	brne	.+8      	; 0x544
 53c:	21 60       	ori	r18, 0x01	; 1
 53e:	b2 2e       	mov	r11, r18
 540:	a0 de       	rcall	.-704    	; 0x282
 542:	16 f0       	brts	.+4      	; 0x548

00000544 <gbCHECKFORWHITESPACE>:
 544:	b7 de       	rcall	.-658    	; 0x2b4
 546:	4e f4       	brtc	.+18     	; 0x55a

00000548 <gbUPDATEADDRESS>:
 548:	66 23       	and	r22, r22
 54a:	39 f0       	breq	.+14     	; 0x55a
 54c:	b1 fe       	sbrs	r11, 1
 54e:	03 c0       	rjmp	.+6      	; 0x556
 550:	68 2e       	mov	r6, r24
 552:	79 2e       	mov	r7, r25
 554:	02 c0       	rjmp	.+4      	; 0x55a

00000556 <gbAddress>:
 556:	48 2e       	mov	r4, r24
 558:	59 2e       	mov	r5, r25

0000055a <gbDONE>:
 55a:	84 2d       	mov	r24, r4
 55c:	95 2d       	mov	r25, r5
 55e:	b1 fc       	sbrc	r11, 1
 560:	86 2d       	mov	r24, r6
 562:	b1 fc       	sbrc	r11, 1
 564:	97 2d       	mov	r25, r7
 566:	08 95       	ret

00000568 <_DumpMemory>:
 568:	b0 fe       	sbrs	r11, 0
 56a:	03 c0       	rjmp	.+6      	; 0x572
 56c:	6e 7f       	andi	r22, 0xFE	; 254
 56e:	80 fd       	sbrc	r24, 0
 570:	83 95       	inc	r24

00000572 <m10f>:
 572:	c6 2e       	mov	r12, r22
 574:	d7 2e       	mov	r13, r23
 576:	18 2e       	mov	r1, r24

00000578 <m10c>:
 578:	2d de       	rcall	.-934    	; 0x1d4
 57a:	9d 2d       	mov	r25, r13
 57c:	8c 2d       	mov	r24, r12
 57e:	be de       	rcall	.-644    	; 0x2fc

00000580 <m10d>:
 580:	2b de       	rcall	.-938    	; 0x1d8
 582:	8b d0       	rcall	.+278    	; 0x69a
 584:	b0 fc       	sbrc	r11, 0
 586:	04 c0       	rjmp	.+8      	; 0x590
 588:	bb de       	rcall	.-650    	; 0x300
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	03 c0       	rjmp	.+6      	; 0x596

00000590 <m11>:
 590:	b5 de       	rcall	.-662    	; 0x2fc
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	90 e0       	ldi	r25, 0x00	; 0

00000596 <m12>:
 596:	c8 0e       	add	r12, r24
 598:	d9 1e       	adc	r13, r25
 59a:	18 1a       	sub	r1, r24
 59c:	21 f0       	breq	.+8      	; 0x5a6

0000059e <m10e>:
 59e:	ec 2d       	mov	r30, r12
 5a0:	ef 70       	andi	r30, 0x0F	; 15
 5a2:	51 f3       	breq	.-44     	; 0x578
 5a4:	ed cf       	rjmp	.-38     	; 0x580

000005a6 <m10exit>:
 5a6:	08 95       	ret

000005a8 <_ModifyMemory>:
 5a8:	c8 2e       	mov	r12, r24
 5aa:	d9 2e       	mov	r13, r25

000005ac <_ModifyMemory_>:
 5ac:	13 de       	rcall	.-986    	; 0x1d4
 5ae:	8c 2d       	mov	r24, r12
 5b0:	9d 2d       	mov	r25, r13
 5b2:	a4 de       	rcall	.-696    	; 0x2fc
 5b4:	11 de       	rcall	.-990    	; 0x1d8

000005b6 <_mmNEXT>:
 5b6:	71 d0       	rcall	.+226    	; 0x69a
 5b8:	b0 fc       	sbrc	r11, 0
 5ba:	a0 de       	rcall	.-704    	; 0x2fc
 5bc:	b0 fe       	sbrs	r11, 0
 5be:	a0 de       	rcall	.-704    	; 0x300

000005c0 <_mmGETDATA>:
 5c0:	8d e2       	ldi	r24, 0x2D	; 45
 5c2:	30 de       	rcall	.-928    	; 0x224
 5c4:	b0 fe       	sbrs	r11, 0
 5c6:	5f de       	rcall	.-834    	; 0x286
 5c8:	b0 fc       	sbrc	r11, 0
 5ca:	5b de       	rcall	.-842    	; 0x282
 5cc:	66 f4       	brtc	.+24     	; 0x5e6

000005ce <_mmWRITE>:
 5ce:	76 d0       	rcall	.+236    	; 0x6bc
 5d0:	03 de       	rcall	.-1018   	; 0x1d8

000005d2 <_mmGOTONEXT>:
 5d2:	e1 e0       	ldi	r30, 0x01	; 1
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	b0 fc       	sbrc	r11, 0
 5d8:	31 96       	adiw	r30, 0x01	; 1
 5da:	ce 0e       	add	r12, r30
 5dc:	df 1e       	adc	r13, r31
 5de:	ec 2d       	mov	r30, r12
 5e0:	ef 70       	andi	r30, 0x0F	; 15
 5e2:	21 f3       	breq	.-56     	; 0x5ac
 5e4:	e8 cf       	rjmp	.-48     	; 0x5b6

000005e6 <_mmNODATA>:
 5e6:	66 de       	rcall	.-820    	; 0x2b4
 5e8:	36 f4       	brtc	.+12     	; 0x5f6
 5ea:	66 23       	and	r22, r22
 5ec:	81 f7       	brne	.-32     	; 0x5ce
 5ee:	20 91 2a 01 	lds	r18, 0x012A
 5f2:	2d 30       	cpi	r18, 0x0D	; 13
 5f4:	71 f7       	brne	.-36     	; 0x5d2

000005f6 <_mmDONE>:
 5f6:	08 95       	ret

000005f8 <ctdt0>:
 5f8:	0d 50       	subi	r16, 0x0D	; 13
 5fa:	49 44       	sbci	r20, 0x49	; 73
 5fc:	20 46       	sbci	r18, 0x60	; 96
 5fe:	6c 67       	ori	r22, 0x7C	; 124
 600:	20 50       	subi	r18, 0x00	; 0
 602:	72 69       	ori	r23, 0x92	; 146
 604:	20 46       	sbci	r18, 0x60	; 96
 606:	72 61       	ori	r23, 0x12	; 18
 608:	6d 65       	ori	r22, 0x5D	; 93
 60a:	20 53       	subi	r18, 0x30	; 48
 60c:	52 0d       	add	r21, r2
	...

0000060f <ctdt1>:
 60f:	52 30       	cpi	r21, 0x02	; 2
 611:	20 20       	and	r2, r0
	...

00000614 <ctdt2>:
 614:	52 31       	cpi	r21, 0x12	; 18
 616:	36 20       	and	r3, r6
	...

00000619 <ctdt3>:
 619:	0d 20       	and	r0, r13
 61b:	20 20       	and	r2, r0
 61d:	20 20       	and	r2, r0
 61f:	50 43       	sbci	r21, 0x30	; 48
 621:	20 20       	and	r2, r0
	...

00000624 <_PrintContext>:
 624:	95 e0       	ldi	r25, 0x05	; 5
 626:	88 ef       	ldi	r24, 0xF8	; 248
 628:	d9 dd       	rcall	.-1102   	; 0x1dc
 62a:	88 2d       	mov	r24, r8
 62c:	99 2d       	mov	r25, r9
 62e:	66 de       	rcall	.-820    	; 0x2fc
 630:	d3 dd       	rcall	.-1114   	; 0x1d8
 632:	e8 2d       	mov	r30, r8
 634:	f9 2d       	mov	r31, r9
 636:	82 81       	ldd	r24, Z+2	; 0x02
 638:	63 de       	rcall	.-826    	; 0x300
 63a:	ce dd       	rcall	.-1124   	; 0x1d8
 63c:	e8 2d       	mov	r30, r8
 63e:	f9 2d       	mov	r31, r9
 640:	83 81       	ldd	r24, Z+3	; 0x03
 642:	5e de       	rcall	.-836    	; 0x300
 644:	c9 dd       	rcall	.-1134   	; 0x1d8
 646:	c8 dd       	rcall	.-1136   	; 0x1d8
 648:	e8 2d       	mov	r30, r8
 64a:	f9 2d       	mov	r31, r9
 64c:	c4 81       	ldd	r28, Z+4	; 0x04
 64e:	d5 81       	ldd	r29, Z+5	; 0x05
 650:	8c 2f       	mov	r24, r28
 652:	9d 2f       	mov	r25, r29
 654:	53 de       	rcall	.-858    	; 0x2fc
 656:	c0 dd       	rcall	.-1152   	; 0x1d8
 658:	bf dd       	rcall	.-1154   	; 0x1d8
 65a:	21 96       	adiw	r28, 0x01	; 1
 65c:	89 91       	ld	r24, Y+
 65e:	50 de       	rcall	.-864    	; 0x300

00000660 <Loop>:
 660:	0e d0       	rcall	.+28     	; 0x67e
 662:	96 e0       	ldi	r25, 0x06	; 6
 664:	8f e0       	ldi	r24, 0x0F	; 15
 666:	10 d0       	rcall	.+32     	; 0x688
 668:	0a d0       	rcall	.+20     	; 0x67e
 66a:	96 e0       	ldi	r25, 0x06	; 6
 66c:	84 e1       	ldi	r24, 0x14	; 20
 66e:	0c d0       	rcall	.+24     	; 0x688
 670:	96 e0       	ldi	r25, 0x06	; 6
 672:	89 e1       	ldi	r24, 0x19	; 25
 674:	b3 dd       	rcall	.-1178   	; 0x1dc
 676:	99 91       	ld	r25, Y+
 678:	88 81       	ld	r24, Y
 67a:	40 de       	rcall	.-896    	; 0x2fc
 67c:	08 95       	ret

0000067e <Print16RegPre>:
 67e:	aa dd       	rcall	.-1196   	; 0x1d4
 680:	8c 2f       	mov	r24, r28
 682:	9d 2f       	mov	r25, r29
 684:	3b de       	rcall	.-906    	; 0x2fc
 686:	a8 cd       	rjmp	.-1200   	; 0x1d8

00000688 <Print16Reg>:
 688:	a9 dd       	rcall	.-1198   	; 0x1dc
 68a:	e0 e1       	ldi	r30, 0x10	; 16
 68c:	1e 2e       	mov	r1, r30

0000068e <p16r0>:
 68e:	89 91       	ld	r24, Y+
 690:	37 de       	rcall	.-914    	; 0x300
 692:	a2 dd       	rcall	.-1212   	; 0x1d8
 694:	1a 94       	dec	r1
 696:	d9 f7       	brne	.-10     	; 0x68e
 698:	08 95       	ret

0000069a <GetByteWord>:
 69a:	b1 fc       	sbrc	r11, 1
 69c:	08 c0       	rjmp	.+16     	; 0x6ae
 69e:	ec 2d       	mov	r30, r12
 6a0:	fd 2d       	mov	r31, r13
 6a2:	80 81       	ld	r24, Z
 6a4:	b0 fe       	sbrs	r11, 0
 6a6:	08 95       	ret
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	80 81       	ld	r24, Z
 6ac:	08 95       	ret

000006ae <gbwEEPROM>:
 6ae:	9d 2d       	mov	r25, r13
 6b0:	8c 2d       	mov	r24, r12
 6b2:	b0 fe       	sbrs	r11, 0
 6b4:	ac d2       	rcall	.+1368   	; 0xc0e
 6b6:	b0 fc       	sbrc	r11, 0
 6b8:	b9 d2       	rcall	.+1394   	; 0xc2c

000006ba <gwbEXIT>:
 6ba:	08 95       	ret

000006bc <PutByteWord>:
 6bc:	b1 fc       	sbrc	r11, 1
 6be:	08 c0       	rjmp	.+16     	; 0x6d0
 6c0:	ec 2d       	mov	r30, r12
 6c2:	fd 2d       	mov	r31, r13
 6c4:	80 83       	st	Z, r24
 6c6:	b0 fe       	sbrs	r11, 0
 6c8:	08 95       	ret
 6ca:	91 83       	std	Z+1, r25	; 0x01
 6cc:	80 83       	st	Z, r24
 6ce:	08 95       	ret

000006d0 <pbwEEPROM>:
 6d0:	e9 2e       	mov	r14, r25
 6d2:	68 2f       	mov	r22, r24
 6d4:	9d 2d       	mov	r25, r13
 6d6:	8c 2d       	mov	r24, r12
 6d8:	c0 d2       	rcall	.+1408   	; 0xc5a
 6da:	b0 fe       	sbrs	r11, 0
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea
 6de:	8c 2d       	mov	r24, r12
 6e0:	9d 2d       	mov	r25, r13
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	6e 2d       	mov	r22, r14
 6e8:	b8 d2       	rcall	.+1392   	; 0xc5a

000006ea <pbwEXIT>:
 6ea:	08 95       	ret

000006ec <IntProlog>:
 6ec:	df 93       	push	r29
 6ee:	cf 93       	push	r28
 6f0:	bf 93       	push	r27
 6f2:	af 93       	push	r26
 6f4:	9f 93       	push	r25
 6f6:	d1 e0       	ldi	r29, 0x01	; 1
 6f8:	cc e2       	ldi	r28, 0x2C	; 44
 6fa:	9f b7       	in	r25, 0x3f	; 63
 6fc:	ae 81       	ldd	r26, Y+6	; 0x06
 6fe:	af 5f       	subi	r26, 0xFF	; 255
 700:	ae 83       	std	Y+6, r26	; 0x06
 702:	60 f0       	brcs	.+24     	; 0x71c
 704:	aa 81       	ldd	r26, Y+2	; 0x02
 706:	bb 81       	ldd	r27, Y+3	; 0x03
 708:	ba 2b       	or	r27, r26
 70a:	41 f4       	brne	.+16     	; 0x71c
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
 710:	fe 81       	ldd	r31, Y+6	; 0x06
 712:	ef 81       	ldd	r30, Y+7	; 0x07
 714:	29 96       	adiw	r28, 0x09	; 9
 716:	cd bf       	out	0x3d, r28	; 61
 718:	de bf       	out	0x3e, r29	; 62
 71a:	09 94       	ijmp

0000071c <SaveContext>:
 71c:	8f 93       	push	r24
 71e:	7f 93       	push	r23
 720:	6f 93       	push	r22
 722:	5f 93       	push	r21
 724:	4f 93       	push	r20
 726:	3f 93       	push	r19
 728:	2f 93       	push	r18
 72a:	1f 93       	push	r17
 72c:	0f 93       	push	r16
 72e:	ff 92       	push	r15
 730:	ef 92       	push	r14
 732:	df 92       	push	r13
 734:	cf 92       	push	r12
 736:	bf 92       	push	r11
 738:	af 92       	push	r10
 73a:	9f 92       	push	r9
 73c:	8f 92       	push	r8
 73e:	7f 92       	push	r7
 740:	6f 92       	push	r6
 742:	5f 92       	push	r5
 744:	4f 92       	push	r4
 746:	3f 92       	push	r3
 748:	2f 92       	push	r2
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	9f 93       	push	r25
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
 754:	9b 8d       	ldd	r25, Y+27	; 0x1b
 756:	39 a1       	ldd	r19, Y+33	; 0x21
 758:	48 a1       	ldd	r20, Y+32	; 0x20
 75a:	e8 a3       	std	Y+32, r30	; 0x20
 75c:	f9 a3       	std	Y+33, r31	; 0x21
 75e:	70 f0       	brcs	.+28     	; 0x77c
 760:	f1 e0       	ldi	r31, 0x01	; 1
 762:	ec e2       	ldi	r30, 0x2C	; 44
 764:	d3 81       	ldd	r29, Z+3	; 0x03
 766:	c2 81       	ldd	r28, Z+2	; 0x02
 768:	be b7       	in	r27, 0x3e	; 62
 76a:	ad b7       	in	r26, 0x3d	; 61
 76c:	bd 83       	std	Y+5, r27	; 0x05
 76e:	ac 83       	std	Y+4, r26	; 0x04
 770:	24 81       	ldd	r18, Z+4	; 0x04
 772:	2d bf       	out	0x3d, r18	; 61
 774:	25 81       	ldd	r18, Z+5	; 0x05
 776:	2e bf       	out	0x3e, r18	; 62
 778:	ca 2f       	mov	r28, r26
 77a:	db 2f       	mov	r29, r27

0000077c <AlreadyInKernel>:
 77c:	11 24       	eor	r1, r1
 77e:	e3 2f       	mov	r30, r19
 780:	f4 2f       	mov	r31, r20
 782:	09 94       	ijmp

00000784 <Epilog>:
 784:	ef 91       	pop	r30
 786:	ef 91       	pop	r30

00000788 <_Epilog>:
 788:	ec e2       	ldi	r30, 0x2C	; 44
 78a:	f1 e0       	ldi	r31, 0x01	; 1
 78c:	f8 94       	cli
 78e:	06 81       	ldd	r16, Z+6	; 0x06
 790:	0a 95       	dec	r16
 792:	06 83       	std	Z+6, r16	; 0x06
 794:	54 f4       	brge	.+20     	; 0x7aa
 796:	d1 81       	ldd	r29, Z+1	; 0x01
 798:	c0 81       	ld	r28, Z
 79a:	d3 83       	std	Z+3, r29	; 0x03
 79c:	c2 83       	std	Z+2, r28	; 0x02
 79e:	20 96       	adiw	r28, 0x00	; 0
 7a0:	39 f1       	breq	.+78     	; 0x7f0
 7a2:	bd 81       	ldd	r27, Y+5	; 0x05
 7a4:	ac 81       	ldd	r26, Y+4	; 0x04
 7a6:	ad bf       	out	0x3d, r26	; 61
 7a8:	be bf       	out	0x3e, r27	; 62

000007aa <SkipTaskSwap>:
 7aa:	0f 90       	pop	r0
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	0f 90       	pop	r0
 7b0:	1f 90       	pop	r1
 7b2:	2f 90       	pop	r2
 7b4:	3f 90       	pop	r3
 7b6:	4f 90       	pop	r4
 7b8:	5f 90       	pop	r5
 7ba:	6f 90       	pop	r6
 7bc:	7f 90       	pop	r7
 7be:	8f 90       	pop	r8
 7c0:	9f 90       	pop	r9
 7c2:	af 90       	pop	r10
 7c4:	bf 90       	pop	r11
 7c6:	cf 90       	pop	r12
 7c8:	df 90       	pop	r13
 7ca:	ef 90       	pop	r14
 7cc:	ff 90       	pop	r15
 7ce:	0f 91       	pop	r16
 7d0:	1f 91       	pop	r17
 7d2:	2f 91       	pop	r18
 7d4:	3f 91       	pop	r19
 7d6:	4f 91       	pop	r20
 7d8:	5f 91       	pop	r21
 7da:	6f 91       	pop	r22
 7dc:	7f 91       	pop	r23
 7de:	8f 91       	pop	r24
 7e0:	9f 91       	pop	r25
 7e2:	af 91       	pop	r26
 7e4:	bf 91       	pop	r27
 7e6:	cf 91       	pop	r28
 7e8:	df 91       	pop	r29
 7ea:	ef 91       	pop	r30
 7ec:	ff 91       	pop	r31
 7ee:	18 95       	reti

000007f0 <_IdleTask>:
 7f0:	78 94       	sei
 7f2:	88 95       	sleep

000007f4 <snooze>:
 7f4:	fd cf       	rjmp	.-6      	; 0x7f0

000007f6 <AvrXSetKernelStack>:
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	80 50       	subi	r24, 0x00	; 0
 7fc:	90 40       	sbci	r25, 0x00	; 0
 7fe:	11 f4       	brne	.+4      	; 0x804
 800:	8d b7       	in	r24, 0x3d	; 61
 802:	9e b7       	in	r25, 0x3e	; 62

00000804 <sks1>:
 804:	80 93 30 01 	sts	0x0130, r24
 808:	90 93 31 01 	sts	0x0131, r25
 80c:	09 94       	ijmp

0000080e <AvrXRunTask>:
 80e:	01 d0       	rcall	.+2      	; 0x812
 810:	23 c0       	rjmp	.+70     	; 0x858

00000812 <AvrXInitTask>:
 812:	e8 2f       	mov	r30, r24
 814:	f9 2f       	mov	r31, r25
 816:	1d d0       	rcall	.+58     	; 0x852
 818:	a0 2d       	mov	r26, r0
 81a:	1b d0       	rcall	.+54     	; 0x852
 81c:	b0 2d       	mov	r27, r0
 81e:	19 d0       	rcall	.+50     	; 0x852
 820:	0c 92       	st	X, r0
 822:	17 d0       	rcall	.+46     	; 0x852
 824:	0e 92       	st	-X, r0
 826:	40 e0       	ldi	r20, 0x00	; 0
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	51 e2       	ldi	r21, 0x21	; 33

0000082c <PushRegisters>:
 82c:	4e 93       	st	-X, r20
 82e:	5a 95       	dec	r21
 830:	e9 f7       	brne	.-6      	; 0x82c
 832:	11 97       	sbiw	r26, 0x01	; 1
 834:	0e d0       	rcall	.+28     	; 0x852
 836:	80 2d       	mov	r24, r0
 838:	0c d0       	rcall	.+24     	; 0x852
 83a:	90 2d       	mov	r25, r0
 83c:	0a d0       	rcall	.+20     	; 0x852
 83e:	e8 2f       	mov	r30, r24
 840:	f9 2f       	mov	r31, r25
 842:	a4 83       	std	Z+4, r26	; 0x04
 844:	b5 83       	std	Z+5, r27	; 0x05
 846:	03 82       	std	Z+3, r0	; 0x03
 848:	a0 e6       	ldi	r26, 0x60	; 96
 84a:	a2 83       	std	Z+2, r26	; 0x02
 84c:	41 83       	std	Z+1, r20	; 0x01
 84e:	40 83       	st	Z, r20
 850:	08 95       	ret

00000852 <lpm_inc>:
 852:	c8 95       	lpm
 854:	31 96       	adiw	r30, 0x01	; 1
 856:	08 95       	ret

00000858 <AvrXResume>:
 858:	f8 94       	cli
 85a:	48 df       	rcall	.-368    	; 0x6ec
 85c:	78 94       	sei
 85e:	e8 2f       	mov	r30, r24
 860:	f9 2f       	mov	r31, r25
 862:	22 81       	ldd	r18, Z+2	; 0x02
 864:	2f 7d       	andi	r18, 0xDF	; 223
 866:	22 83       	std	Z+2, r18	; 0x02
 868:	26 ff       	sbrs	r18, 6
 86a:	03 c0       	rjmp	.+6      	; 0x872
 86c:	2f 7b       	andi	r18, 0xBF	; 191
 86e:	22 83       	std	Z+2, r18	; 0x02
 870:	01 d0       	rcall	.+2      	; 0x874

00000872 <ar00>:
 872:	8a cf       	rjmp	.-236    	; 0x788

00000874 <_QueuePid>:
 874:	e8 2f       	mov	r30, r24
 876:	f9 2f       	mov	r31, r25
 878:	3f ef       	ldi	r19, 0xFF	; 255
 87a:	22 81       	ldd	r18, Z+2	; 0x02
 87c:	20 73       	andi	r18, 0x30	; 48
 87e:	e1 f4       	brne	.+56     	; 0x8b8
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	43 81       	ldd	r20, Z+3	; 0x03
 886:	cc e2       	ldi	r28, 0x2C	; 44
 888:	d1 e0       	ldi	r29, 0x01	; 1
 88a:	2f b7       	in	r18, 0x3f	; 63
 88c:	f8 94       	cli

0000088e <_qp00>:
 88e:	33 95       	inc	r19
 890:	ec 2f       	mov	r30, r28
 892:	fd 2f       	mov	r31, r29
 894:	c0 81       	ld	r28, Z
 896:	d1 81       	ldd	r29, Z+1	; 0x01
 898:	20 96       	adiw	r28, 0x00	; 0
 89a:	19 f0       	breq	.+6      	; 0x8a2
 89c:	5b 81       	ldd	r21, Y+3	; 0x03
 89e:	45 17       	cp	r20, r21
 8a0:	b0 f7       	brcc	.-20     	; 0x88e

000008a2 <_qp01>:
 8a2:	91 83       	std	Z+1, r25	; 0x01
 8a4:	80 83       	st	Z, r24
 8a6:	f9 2f       	mov	r31, r25
 8a8:	e8 2f       	mov	r30, r24
 8aa:	d1 83       	std	Z+1, r29	; 0x01
 8ac:	c0 83       	st	Z, r28
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	83 2f       	mov	r24, r19
 8b4:	2f bf       	out	0x3f, r18	; 63
 8b6:	08 95       	ret

000008b8 <_qpSUSPEND>:
 8b8:	83 2f       	mov	r24, r19
 8ba:	20 64       	ori	r18, 0x40	; 64
 8bc:	22 83       	std	Z+2, r18	; 0x02
 8be:	08 95       	ret

000008c0 <AvrXWaitMessageAck>:
 8c0:	8e 5f       	subi	r24, 0xFE	; 254
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255

000008c4 <AvrXWaitSemaphore>:
 8c4:	e8 2f       	mov	r30, r24
 8c6:	f9 2f       	mov	r31, r25
 8c8:	f8 94       	cli
 8ca:	20 81       	ld	r18, Z
 8cc:	31 81       	ldd	r19, Z+1	; 0x01
 8ce:	21 50       	subi	r18, 0x01	; 1
 8d0:	30 40       	sbci	r19, 0x00	; 0
 8d2:	19 f4       	brne	.+6      	; 0x8da
 8d4:	20 83       	st	Z, r18
 8d6:	31 83       	std	Z+1, r19	; 0x01
 8d8:	18 95       	reti

000008da <aws01>:
 8da:	08 df       	rcall	.-496    	; 0x6ec
 8dc:	ec e2       	ldi	r30, 0x2C	; 44
 8de:	f1 e0       	ldi	r31, 0x01	; 1
 8e0:	73 81       	ldd	r23, Z+3	; 0x03
 8e2:	62 81       	ldd	r22, Z+2	; 0x02
 8e4:	3c d0       	rcall	.+120    	; 0x95e
 8e6:	e8 2f       	mov	r30, r24
 8e8:	f9 2f       	mov	r31, r25
 8ea:	2b d0       	rcall	.+86     	; 0x942
 8ec:	4d cf       	rjmp	.-358    	; 0x788

000008ee <AvrXAckMessage>:
 8ee:	8e 5f       	subi	r24, 0xFE	; 254
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255

000008f2 <AvrXSetSemaphore>:
 8f2:	0c d0       	rcall	.+24     	; 0x90c
 8f4:	90 91 32 01 	lds	r25, 0x0132
 8f8:	93 95       	inc	r25
 8fa:	89 2b       	or	r24, r25
 8fc:	09 f0       	breq	.+2      	; 0x900
 8fe:	08 95       	ret

00000900 <axss0>:
 900:	f8 94       	cli
 902:	f4 de       	rcall	.-536    	; 0x6ec
 904:	78 94       	sei
 906:	40 cf       	rjmp	.-384    	; 0x788

00000908 <AvrXIntSetObjectSemaphore>:
 908:	8e 5f       	subi	r24, 0xFE	; 254
 90a:	9f 4f       	sbci	r25, 0xFF	; 255

0000090c <AvrXIntSetSemaphore>:
 90c:	e8 2f       	mov	r30, r24
 90e:	f9 2f       	mov	r31, r25
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	2f b7       	in	r18, 0x3f	; 63
 916:	f8 94       	cli
 918:	71 81       	ldd	r23, Z+1	; 0x01
 91a:	60 81       	ld	r22, Z
 91c:	86 17       	cp	r24, r22
 91e:	97 07       	cpc	r25, r23
 920:	28 f0       	brcs	.+10     	; 0x92c
 922:	80 83       	st	Z, r24
 924:	91 83       	std	Z+1, r25	; 0x01

00000926 <BogusSemaphore>:
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	2f bf       	out	0x3f, r18	; 63
 92a:	08 95       	ret

0000092c <aiss00>:
 92c:	8f e5       	ldi	r24, 0x5F	; 95
 92e:	86 17       	cp	r24, r22
 930:	97 07       	cpc	r25, r23
 932:	c8 f7       	brcc	.-14     	; 0x926
 934:	23 d0       	rcall	.+70     	; 0x97c
 936:	2f bf       	out	0x3f, r18	; 63
 938:	86 2f       	mov	r24, r22
 93a:	97 2f       	mov	r25, r23
 93c:	9b cf       	rjmp	.-202    	; 0x874

0000093e <_ao00>:
 93e:	e2 2f       	mov	r30, r18
 940:	f3 2f       	mov	r31, r19

00000942 <_AppendObject>:
 942:	20 81       	ld	r18, Z
 944:	31 81       	ldd	r19, Z+1	; 0x01
 946:	20 50       	subi	r18, 0x00	; 0
 948:	30 40       	sbci	r19, 0x00	; 0
 94a:	c9 f7       	brne	.-14     	; 0x93e
 94c:	71 83       	std	Z+1, r23	; 0x01
 94e:	60 83       	st	Z, r22
 950:	f7 2f       	mov	r31, r23
 952:	e6 2f       	mov	r30, r22
 954:	31 83       	std	Z+1, r19	; 0x01
 956:	20 83       	st	Z, r18
 958:	08 95       	ret

0000095a <_ro00>:
 95a:	f3 2f       	mov	r31, r19
 95c:	e2 2f       	mov	r30, r18

0000095e <_RemoveObject>:
 95e:	20 81       	ld	r18, Z
 960:	31 81       	ldd	r19, Z+1	; 0x01
 962:	62 17       	cp	r22, r18
 964:	73 07       	cpc	r23, r19
 966:	51 f0       	breq	.+20     	; 0x97c
 968:	20 50       	subi	r18, 0x00	; 0
 96a:	30 40       	sbci	r19, 0x00	; 0
 96c:	b1 f7       	brne	.-20     	; 0x95a
 96e:	08 95       	ret

00000970 <_RemoveFirstObject>:
 970:	60 81       	ld	r22, Z
 972:	71 81       	ldd	r23, Z+1	; 0x01
 974:	60 50       	subi	r22, 0x00	; 0
 976:	70 40       	sbci	r23, 0x00	; 0
 978:	09 f4       	brne	.+2      	; 0x97c
 97a:	08 95       	ret

0000097c <_RemoveObjectAt>:
 97c:	4c 2f       	mov	r20, r28
 97e:	5d 2f       	mov	r21, r29
 980:	c6 2f       	mov	r28, r22
 982:	d7 2f       	mov	r29, r23
 984:	79 81       	ldd	r23, Y+1	; 0x01
 986:	68 81       	ld	r22, Y
 988:	71 83       	std	Z+1, r23	; 0x01
 98a:	60 83       	st	Z, r22
 98c:	e6 2f       	mov	r30, r22
 98e:	f7 2f       	mov	r31, r23
 990:	66 27       	eor	r22, r22
 992:	68 83       	st	Y, r22
 994:	69 83       	std	Y+1, r22	; 0x01
 996:	7d 2f       	mov	r23, r29
 998:	6c 2f       	mov	r22, r28
 99a:	c4 2f       	mov	r28, r20
 99c:	d5 2f       	mov	r29, r21
 99e:	98 94       	clz
 9a0:	08 95       	ret

000009a2 <AvrXSingleStepNext>:
 9a2:	f8 94       	cli
 9a4:	a3 de       	rcall	.-698    	; 0x6ec
 9a6:	78 94       	sei
 9a8:	f9 2f       	mov	r31, r25
 9aa:	e8 2f       	mov	r30, r24
 9ac:	a2 81       	ldd	r26, Z+2	; 0x02
 9ae:	a6 ff       	sbrs	r26, 6
 9b0:	1d c0       	rjmp	.+58     	; 0x9ec
 9b2:	a0 68       	ori	r26, 0x80	; 128
 9b4:	a2 83       	std	Z+2, r26	; 0x02
 9b6:	ec e2       	ldi	r30, 0x2C	; 44
 9b8:	f1 e0       	ldi	r31, 0x01	; 1
 9ba:	b1 81       	ldd	r27, Z+1	; 0x01
 9bc:	a0 81       	ld	r26, Z
 9be:	91 83       	std	Z+1, r25	; 0x01
 9c0:	80 83       	st	Z, r24
 9c2:	f9 2f       	mov	r31, r25
 9c4:	e8 2f       	mov	r30, r24
 9c6:	b1 83       	std	Z+1, r27	; 0x01
 9c8:	a0 83       	st	Z, r26
 9ca:	0e c0       	rjmp	.+28     	; 0x9e8

000009cc <AvrXStepNext>:
 9cc:	f8 94       	cli
 9ce:	8e de       	rcall	.-740    	; 0x6ec
 9d0:	78 94       	sei
 9d2:	f9 2f       	mov	r31, r25
 9d4:	e8 2f       	mov	r30, r24
 9d6:	a2 81       	ldd	r26, Z+2	; 0x02
 9d8:	a6 ff       	sbrs	r26, 6
 9da:	09 c0       	rjmp	.+18     	; 0x9ee
 9dc:	af 79       	andi	r26, 0x9F	; 159
 9de:	a2 83       	std	Z+2, r26	; 0x02
 9e0:	49 df       	rcall	.-366    	; 0x874
 9e2:	a2 81       	ldd	r26, Z+2	; 0x02
 9e4:	a0 62       	ori	r26, 0x20	; 32
 9e6:	a2 83       	std	Z+2, r26	; 0x02

000009e8 <AssnXOk>:
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee

000009ec <AssnXErr>:
 9ec:	81 e0       	ldi	r24, 0x01	; 1

000009ee <AssnX>:
 9ee:	8a 8f       	std	Y+26, r24	; 0x1a
 9f0:	cb ce       	rjmp	.-618    	; 0x788

000009f2 <AvrXTaskExit>:
 9f2:	f8 94       	cli
 9f4:	7b de       	rcall	.-778    	; 0x6ec
 9f6:	78 94       	sei
 9f8:	90 91 2f 01 	lds	r25, 0x012F
 9fc:	80 91 2e 01 	lds	r24, 0x012E
 a00:	03 c0       	rjmp	.+6      	; 0xa08

00000a02 <AvrXTerminate>:
 a02:	f8 94       	cli
 a04:	73 de       	rcall	.-794    	; 0x6ec
 a06:	78 94       	sei

00000a08 <at00>:
 a08:	f9 2f       	mov	r31, r25
 a0a:	e8 2f       	mov	r30, r24
 a0c:	a0 e1       	ldi	r26, 0x10	; 16
 a0e:	a2 83       	std	Z+2, r26	; 0x02
 a10:	79 2f       	mov	r23, r25
 a12:	68 2f       	mov	r22, r24
 a14:	f1 e0       	ldi	r31, 0x01	; 1
 a16:	ec e2       	ldi	r30, 0x2C	; 44
 a18:	f8 94       	cli
 a1a:	a1 df       	rcall	.-190    	; 0x95e
 a1c:	b5 ce       	rjmp	.-662    	; 0x788

00000a1e <AvrXHalt>:
 a1e:	f8 94       	cli
 a20:	fe cf       	rjmp	.-4      	; 0xa1e

00000a22 <AvrXBreakpoint>:
 a22:	f8 94       	cli
 a24:	63 de       	rcall	.-826    	; 0x6ec
 a26:	78 94       	sei
 a28:	f0 91 2f 01 	lds	r31, 0x012F
 a2c:	e0 91 2e 01 	lds	r30, 0x012E
 a30:	22 81       	ldd	r18, Z+2	; 0x02
 a32:	25 fd       	sbrc	r18, 5
 a34:	09 c0       	rjmp	.+18     	; 0xa48
 a36:	a8 ce       	rjmp	.-688    	; 0x788

00000a38 <AvrXSuspend>:
 a38:	f8 94       	cli
 a3a:	58 de       	rcall	.-848    	; 0x6ec
 a3c:	78 94       	sei
 a3e:	f9 2f       	mov	r31, r25
 a40:	e8 2f       	mov	r30, r24
 a42:	22 81       	ldd	r18, Z+2	; 0x02
 a44:	20 62       	ori	r18, 0x20	; 32
 a46:	22 83       	std	Z+2, r18	; 0x02

00000a48 <as00>:
 a48:	7f 2f       	mov	r23, r31
 a4a:	6e 2f       	mov	r22, r30
 a4c:	f1 e0       	ldi	r31, 0x01	; 1
 a4e:	ec e2       	ldi	r30, 0x2C	; 44
 a50:	f8 94       	cli
 a52:	85 df       	rcall	.-246    	; 0x95e
 a54:	c2 2f       	mov	r28, r18
 a56:	d3 2f       	mov	r29, r19
 a58:	20 96       	adiw	r28, 0x00	; 0
 a5a:	19 f0       	breq	.+6      	; 0xa62
 a5c:	ea 81       	ldd	r30, Y+2	; 0x02
 a5e:	e0 64       	ori	r30, 0x40	; 64
 a60:	ea 83       	std	Y+2, r30	; 0x02

00000a62 <as01>:
 a62:	92 ce       	rjmp	.-732    	; 0x788

00000a64 <AvrXSendMessage>:
 a64:	f8 94       	cli
 a66:	42 de       	rcall	.-892    	; 0x6ec
 a68:	78 94       	sei
 a6a:	01 d0       	rcall	.+2      	; 0xa6e
 a6c:	8d ce       	rjmp	.-742    	; 0x788

00000a6e <AvrXIntSendMessage>:
 a6e:	f9 2f       	mov	r31, r25
 a70:	e8 2f       	mov	r30, r24
 a72:	67 df       	rcall	.-306    	; 0x942
 a74:	49 cf       	rjmp	.-366    	; 0x908

00000a76 <AvrXWaitMessage>:
 a76:	e8 2f       	mov	r30, r24
 a78:	f9 2f       	mov	r31, r25
 a7a:	f8 94       	cli
 a7c:	79 df       	rcall	.-270    	; 0x970
 a7e:	78 94       	sei
 a80:	21 f4       	brne	.+8      	; 0xa8a
 a82:	1e df       	rcall	.-452    	; 0x8c0
 a84:	82 50       	subi	r24, 0x02	; 2
 a86:	90 40       	sbci	r25, 0x00	; 0
 a88:	f6 cf       	rjmp	.-20     	; 0xa76

00000a8a <_rm01>:
 a8a:	f5 d0       	rcall	.+490    	; 0xc76
 a8c:	86 2f       	mov	r24, r22
 a8e:	97 2f       	mov	r25, r23
 a90:	08 95       	ret

00000a92 <AvrXDelay>:
 a92:	01 d0       	rcall	.+2      	; 0xa96
 a94:	15 cf       	rjmp	.-470    	; 0x8c0

00000a96 <AvrXStartTimer>:
 a96:	60 50       	subi	r22, 0x00	; 0
 a98:	70 40       	sbci	r23, 0x00	; 0
 a9a:	09 f4       	brne	.+2      	; 0xa9e
 a9c:	28 cf       	rjmp	.-432    	; 0x8ee

00000a9e <CountNotZero>:
 a9e:	f8 94       	cli
 aa0:	25 de       	rcall	.-950    	; 0x6ec
 aa2:	78 94       	sei
 aa4:	e8 d0       	rcall	.+464    	; 0xc76
 aa6:	e4 e3       	ldi	r30, 0x34	; 52
 aa8:	f1 e0       	ldi	r31, 0x01	; 1
 aaa:	f8 94       	cli
 aac:	20 91 36 01 	lds	r18, 0x0136
 ab0:	2a 95       	dec	r18
 ab2:	20 93 36 01 	sts	0x0136, r18
 ab6:	78 94       	sei

00000ab8 <ast00>:
 ab8:	ce 2f       	mov	r28, r30
 aba:	df 2f       	mov	r29, r31
 abc:	e8 81       	ld	r30, Y
 abe:	f9 81       	ldd	r31, Y+1	; 0x01
 ac0:	30 96       	adiw	r30, 0x00	; 0
 ac2:	59 f0       	breq	.+22     	; 0xada
 ac4:	24 81       	ldd	r18, Z+4	; 0x04
 ac6:	35 81       	ldd	r19, Z+5	; 0x05
 ac8:	62 1b       	sub	r22, r18
 aca:	73 0b       	sbc	r23, r19
 acc:	a8 f7       	brcc	.-22     	; 0xab8
 ace:	62 0f       	add	r22, r18
 ad0:	73 1f       	adc	r23, r19
 ad2:	26 1b       	sub	r18, r22
 ad4:	37 0b       	sbc	r19, r23
 ad6:	24 83       	std	Z+4, r18	; 0x04
 ad8:	35 83       	std	Z+5, r19	; 0x05

00000ada <ast01>:
 ada:	99 83       	std	Y+1, r25	; 0x01
 adc:	88 83       	st	Y, r24
 ade:	d9 2f       	mov	r29, r25
 ae0:	c8 2f       	mov	r28, r24
 ae2:	f9 83       	std	Y+1, r31	; 0x01
 ae4:	e8 83       	st	Y, r30
 ae6:	6c 83       	std	Y+4, r22	; 0x04
 ae8:	7d 83       	std	Y+5, r23	; 0x05
 aea:	3c d0       	rcall	.+120    	; 0xb64
 aec:	4d ce       	rjmp	.-870    	; 0x788

00000aee <AvrXTimerHandler>:
 aee:	f8 94       	cli
 af0:	20 91 36 01 	lds	r18, 0x0136
 af4:	21 50       	subi	r18, 0x01	; 1
 af6:	20 93 36 01 	sts	0x0136, r18
 afa:	78 94       	sei
 afc:	08 f0       	brcs	.+2      	; 0xb00
 afe:	08 95       	ret

00000b00 <ati00>:
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	af 93       	push	r26
 b06:	bf 93       	push	r27
 b08:	d0 91 35 01 	lds	r29, 0x0135
 b0c:	c0 91 34 01 	lds	r28, 0x0134
 b10:	20 96       	adiw	r28, 0x00	; 0
 b12:	21 f1       	breq	.+72     	; 0xb5c
 b14:	fd 81       	ldd	r31, Y+5	; 0x05
 b16:	ec 81       	ldd	r30, Y+4	; 0x04
 b18:	31 97       	sbiw	r30, 0x01	; 1
 b1a:	fd 83       	std	Y+5, r31	; 0x05
 b1c:	ec 83       	std	Y+4, r30	; 0x04

00000b1e <ati01>:
 b1e:	ef 2b       	or	r30, r31
 b20:	e9 f4       	brne	.+58     	; 0xb5c
 b22:	a8 81       	ld	r26, Y
 b24:	b9 81       	ldd	r27, Y+1	; 0x01
 b26:	b0 93 35 01 	sts	0x0135, r27
 b2a:	a0 93 34 01 	sts	0x0134, r26
 b2e:	f9 83       	std	Y+1, r31	; 0x01
 b30:	e8 83       	st	Y, r30
 b32:	8a 81       	ldd	r24, Y+2	; 0x02
 b34:	9b 81       	ldd	r25, Y+3	; 0x03
 b36:	82 50       	subi	r24, 0x02	; 2
 b38:	90 40       	sbci	r25, 0x00	; 0
 b3a:	31 f4       	brne	.+12     	; 0xb48
 b3c:	8e 81       	ldd	r24, Y+6	; 0x06
 b3e:	9f 81       	ldd	r25, Y+7	; 0x07
 b40:	7d 2f       	mov	r23, r29
 b42:	6c 2f       	mov	r22, r28
 b44:	94 df       	rcall	.-216    	; 0xa6e
 b46:	03 c0       	rjmp	.+6      	; 0xb4e

00000b48 <ati04>:
 b48:	8c 2f       	mov	r24, r28
 b4a:	9d 2f       	mov	r25, r29
 b4c:	dd de       	rcall	.-582    	; 0x908

00000b4e <ati03>:
 b4e:	10 96       	adiw	r26, 0x00	; 0
 b50:	29 f0       	breq	.+10     	; 0xb5c
 b52:	ca 2f       	mov	r28, r26
 b54:	db 2f       	mov	r29, r27
 b56:	fd 81       	ldd	r31, Y+5	; 0x05
 b58:	ec 81       	ldd	r30, Y+4	; 0x04
 b5a:	e1 cf       	rjmp	.-62     	; 0xb1e

00000b5c <ati02>:
 b5c:	bf 91       	pop	r27
 b5e:	af 91       	pop	r26
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28

00000b64 <TimerHandler>:
 b64:	f8 94       	cli
 b66:	20 91 36 01 	lds	r18, 0x0136
 b6a:	23 95       	inc	r18
 b6c:	20 93 36 01 	sts	0x0136, r18
 b70:	78 94       	sei
 b72:	31 f6       	brne	.-116    	; 0xb00
 b74:	08 95       	ret

00000b76 <AvrXStartTimerMessage>:
 b76:	60 50       	subi	r22, 0x00	; 0
 b78:	70 40       	sbci	r23, 0x00	; 0
 b7a:	29 f4       	brne	.+10     	; 0xb86
 b7c:	68 2f       	mov	r22, r24
 b7e:	79 2f       	mov	r23, r25
 b80:	84 2f       	mov	r24, r20
 b82:	95 2f       	mov	r25, r21
 b84:	6f cf       	rjmp	.-290    	; 0xa64

00000b86 <axstm0>:
 b86:	e8 2f       	mov	r30, r24
 b88:	f9 2f       	mov	r31, r25
 b8a:	57 83       	std	Z+7, r21	; 0x07
 b8c:	46 83       	std	Z+6, r20	; 0x06
 b8e:	42 e0       	ldi	r20, 0x02	; 2
 b90:	50 e0       	ldi	r21, 0x00	; 0
 b92:	53 83       	std	Z+3, r21	; 0x03
 b94:	42 83       	std	Z+2, r20	; 0x02
 b96:	83 cf       	rjmp	.-250    	; 0xa9e

00000b98 <AvrXCancelTimer>:
 b98:	f8 94       	cli
 b9a:	a8 dd       	rcall	.-1200   	; 0x6ec
 b9c:	78 94       	sei
 b9e:	b4 de       	rcall	.-664    	; 0x908
 ba0:	6a 8d       	ldd	r22, Y+26	; 0x1a
 ba2:	7b 8d       	ldd	r23, Y+27	; 0x1b
 ba4:	e4 e3       	ldi	r30, 0x34	; 52
 ba6:	f1 e0       	ldi	r31, 0x01	; 1
 ba8:	f8 94       	cli
 baa:	d9 de       	rcall	.-590    	; 0x95e
 bac:	20 50       	subi	r18, 0x00	; 0
 bae:	30 40       	sbci	r19, 0x00	; 0
 bb0:	59 f0       	breq	.+22     	; 0xbc8
 bb2:	c6 2f       	mov	r28, r22
 bb4:	d7 2f       	mov	r29, r23
 bb6:	6c 81       	ldd	r22, Y+4	; 0x04
 bb8:	7d 81       	ldd	r23, Y+5	; 0x05
 bba:	95 81       	ldd	r25, Z+5	; 0x05
 bbc:	84 81       	ldd	r24, Z+4	; 0x04
 bbe:	86 0f       	add	r24, r22
 bc0:	97 1f       	adc	r25, r23
 bc2:	84 83       	std	Z+4, r24	; 0x04
 bc4:	95 83       	std	Z+5, r25	; 0x05
 bc6:	e0 cd       	rjmp	.-1088   	; 0x788

00000bc8 <act00>:
 bc8:	2a 8f       	std	Y+26, r18	; 0x1a
 bca:	3b 8f       	std	Y+27, r19	; 0x1b
 bcc:	dd cd       	rjmp	.-1094   	; 0x788

00000bce <AvrXCancelTimerMessage>:
 bce:	f8 94       	cli
 bd0:	8d dd       	rcall	.-1254   	; 0x6ec
 bd2:	78 94       	sei
 bd4:	68 2f       	mov	r22, r24
 bd6:	79 2f       	mov	r23, r25
 bd8:	e4 e3       	ldi	r30, 0x34	; 52
 bda:	f1 e0       	ldi	r31, 0x01	; 1
 bdc:	f8 94       	cli
 bde:	bf de       	rcall	.-642    	; 0x95e
 be0:	20 50       	subi	r18, 0x00	; 0
 be2:	30 40       	sbci	r19, 0x00	; 0
 be4:	59 f0       	breq	.+22     	; 0xbfc
 be6:	c6 2f       	mov	r28, r22
 be8:	d7 2f       	mov	r29, r23
 bea:	6c 81       	ldd	r22, Y+4	; 0x04
 bec:	7d 81       	ldd	r23, Y+5	; 0x05
 bee:	95 81       	ldd	r25, Z+5	; 0x05
 bf0:	84 81       	ldd	r24, Z+4	; 0x04
 bf2:	86 0f       	add	r24, r22
 bf4:	97 1f       	adc	r25, r23
 bf6:	84 83       	std	Z+4, r24	; 0x04
 bf8:	95 83       	std	Z+5, r25	; 0x05
 bfa:	c6 cd       	rjmp	.-1140   	; 0x788

00000bfc <actm00>:
 bfc:	e8 8d       	ldd	r30, Y+24	; 0x18
 bfe:	f9 8d       	ldd	r31, Y+25	; 0x19
 c00:	ae de       	rcall	.-676    	; 0x95e
 c02:	20 50       	subi	r18, 0x00	; 0
 c04:	30 40       	sbci	r19, 0x00	; 0
 c06:	11 f4       	brne	.+4      	; 0xc0c
 c08:	aa 8f       	std	Y+26, r26	; 0x1a
 c0a:	bb 8f       	std	Y+27, r27	; 0x1b

00000c0c <actm01>:
 c0c:	bd cd       	rjmp	.-1158   	; 0x788

00000c0e <AvrXReadEEProm>:
 c0e:	68 2f       	mov	r22, r24
 c10:	79 2f       	mov	r23, r25
 c12:	91 e0       	ldi	r25, 0x01	; 1
 c14:	88 e3       	ldi	r24, 0x38	; 56
 c16:	56 de       	rcall	.-852    	; 0x8c4

00000c18 <are01>:
 c18:	e1 99       	sbic	0x1c, 1	; 28
 c1a:	fe cf       	rjmp	.-4      	; 0xc18
 c1c:	6e bb       	out	0x1e, r22	; 30
 c1e:	7f bb       	out	0x1f, r23	; 31
 c20:	e0 9a       	sbi	0x1c, 0	; 28
 c22:	0d b2       	in	r0, 0x1d	; 29
 c24:	0f 92       	push	r0
 c26:	65 de       	rcall	.-822    	; 0x8f2
 c28:	8f 91       	pop	r24
 c2a:	08 95       	ret

00000c2c <AvrXReadEEPromWord>:
 c2c:	68 2f       	mov	r22, r24
 c2e:	79 2f       	mov	r23, r25
 c30:	91 e0       	ldi	r25, 0x01	; 1
 c32:	88 e3       	ldi	r24, 0x38	; 56
 c34:	47 de       	rcall	.-882    	; 0x8c4

00000c36 <arew01>:
 c36:	e1 99       	sbic	0x1c, 1	; 28
 c38:	fe cf       	rjmp	.-4      	; 0xc36
 c3a:	6e bb       	out	0x1e, r22	; 30
 c3c:	7f bb       	out	0x1f, r23	; 31
 c3e:	e0 9a       	sbi	0x1c, 0	; 28
 c40:	0d b2       	in	r0, 0x1d	; 29
 c42:	0f 92       	push	r0
 c44:	6f 5f       	subi	r22, 0xFF	; 255
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	6e bb       	out	0x1e, r22	; 30
 c4a:	7f bb       	out	0x1f, r23	; 31
 c4c:	e0 9a       	sbi	0x1c, 0	; 28
 c4e:	0d b2       	in	r0, 0x1d	; 29
 c50:	0f 92       	push	r0
 c52:	4f de       	rcall	.-866    	; 0x8f2
 c54:	9f 91       	pop	r25
 c56:	8f 91       	pop	r24
 c58:	08 95       	ret

00000c5a <AvrXWriteEEProm>:
 c5a:	46 2f       	mov	r20, r22
 c5c:	68 2f       	mov	r22, r24
 c5e:	79 2f       	mov	r23, r25
 c60:	91 e0       	ldi	r25, 0x01	; 1
 c62:	88 e3       	ldi	r24, 0x38	; 56
 c64:	2f de       	rcall	.-930    	; 0x8c4

00000c66 <awe00>:
 c66:	e1 99       	sbic	0x1c, 1	; 28
 c68:	fe cf       	rjmp	.-4      	; 0xc66
 c6a:	6e bb       	out	0x1e, r22	; 30
 c6c:	7f bb       	out	0x1f, r23	; 31
 c6e:	4d bb       	out	0x1d, r20	; 29
 c70:	e2 9a       	sbi	0x1c, 2	; 28
 c72:	e1 9a       	sbi	0x1c, 1	; 28
 c74:	3e ce       	rjmp	.-900    	; 0x8f2

00000c76 <AvrXIntResetObjectSemaphore>:
 c76:	e8 2f       	mov	r30, r24
 c78:	f9 2f       	mov	r31, r25
 c7a:	32 96       	adiw	r30, 0x02	; 2
 c7c:	02 c0       	rjmp	.+4      	; 0xc82

00000c7e <AvrXIntResetSemaphore>:
 c7e:	f9 2f       	mov	r31, r25
 c80:	e8 2f       	mov	r30, r24

00000c82 <ars00>:
 c82:	f8 94       	cli
 c84:	40 81       	ld	r20, Z
 c86:	51 81       	ldd	r21, Z+1	; 0x01
 c88:	41 50       	subi	r20, 0x01	; 1
 c8a:	50 40       	sbci	r21, 0x00	; 0
 c8c:	11 f0       	breq	.+4      	; 0xc92
 c8e:	4f 5f       	subi	r20, 0xFF	; 255
 c90:	5f 4f       	sbci	r21, 0xFF	; 255

00000c92 <ars01>:
 c92:	51 83       	std	Z+1, r21	; 0x01
 c94:	40 83       	st	Z, r20
 c96:	18 95       	reti

00000c98 <_exit>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98
