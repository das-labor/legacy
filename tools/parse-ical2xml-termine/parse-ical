#!/usr/bin/env ruby



XMLFILE="termine.xml";
NRXMLFILE="talksworkshops.xml";
ICALFILE="termine.ics";

#############################################################################
# Starts Here
require 'rubygems' 
require 'ri_cal'
require 'date'


class LaborTermine 
	attr_reader "termine"
	attr_reader "nrtermine"

	def initialize()
		@termine = Array.new
		@nrtermine = Array.new
	end
	

	def parse()	
		term = Array.new	# array to return (all events)
		nrterm = Array.new	# array to return (non-recurring events only)

		cals= File.open(ICALFILE, "r")
		cal = RiCal.parse(cals)

		## sort recurring from non-recurring events

		cal.first.events.each{|e|

			# push non-reccurring event parameters into hash table
			if !e.recurs? then
				e.occurrences(:starting => Date.today).each{|nre|
					nrt = Hash.new
					#puts ":::::::..NON-RECURRING EVENT..:::::::"
					#puts nre.dtstart
					nrt["date"] = nre.dtstart
	
					#puts nre.summary
					nrt["text"] = nre.summary
	
					#puts nre.attach
					nrt["link"] = nre.attach

					# push hash table into array
					nrterm.push(nrt)
				}
			end

			# put all relevant occurances of an event
			e.occurrences(:before => Date.today+(14) >> 1, :starting => Date.today).each{|re|
				t = Hash.new
				#puts "::::::::..ANY EVENT..::::::::"
				#puts re.dtstart
				t["date"] = re.dtstart

				#puts re.summary
				t["text"] = re.summary

				#puts re.attach
				t["link"] = re.attach

				#push event hash table into array
				term.push(t)
			}
		}
		thash = Hash.new
		thash["termine"] = term
		thash["nrtermine"] = nrterm	
		return thash
	end

	def sort(tarr)		# events are not necessarily ordered by date
#		puts "Sorting by date ..."
		d = Array.new	# array to sort dates
		ttermine = Array.new 	# temp array to overwrite @termine with

		tarr.each{|t|
			d.push(t["date"])
		}
		d.sort!
#		puts "Sorting @termine by date ..."
		d.each{|da|
			tarr.each{|t|
				if t["date"] == da then
					ttermine.push(t)	
				end
			}
		} 
		return ttermine
	end

	def properdate(tarr)
		tarr.each{|t|
			# padding with leading zeros and add the results as idividual keys to our hash
			t["day"] = "%02d" % t["date"].day.to_s
			t["month"] = "%02d" % t["date"].mon.to_s
			t["year"] = t["date"].year.to_s
			t["hour"] = "%02d" % t["date"].hour.to_s
			t["min"] = "%02d" % t["date"].min.to_s
	
			# translate numeric day of week to a meaningful string
			twd = t["date"].wday
			if twd == 0 then
				t["wday"] = "So"
			elsif twd == 1 then
				t["wday"] = "Mo"
			elsif twd == 2 then
				t["wday"] = "Di"
			elsif twd == 3 then
				t["wday"] = "Mi"
			elsif twd == 4 then
				t["wday"] = "Do"
			elsif twd == 5 then
				t["wday"] = "Fr"
			elsif twd == 6 then
				t["wday"] = "Sa"
			end

			t.delete("date")	# currently we do not need the comlete date anymore => delete it
		}
		return tarr
	end

	def debug(arr)
		puts "\n \n ::::::::::::::::..Debug output..::::::::::::::::::::"
		arr.each{|e|
			puts ":::::::..Event..::::::::"
			puts e["date"]
			puts e["date"].gregorian?
			puts e["text"]
			puts e["link"]
		}
	end

	def run
		parsedtermine = parse()

		# all events
#		puts "handling all events ..."
		termine = sort(parsedtermine["termine"])
		@termine = properdate(termine)

		# non-recurring events only
#		puts "handling non-recurring events ..."
		nrtermine = sort(parsedtermine["nrtermine"])
		@nrtermine = properdate(nrtermine)	
	end
end




####
# MAIN
#

#class Array
#  def to_h
#    Hash[*self]
#  end
#end



lt = LaborTermine.new;	# create instance
lt.run;	# run the parser


puts "Alle Termine:"
File.open( XMLFILE, "w" ) { |f|
  f.puts "<termine>"
  lt.termine.each { |termin|
    puts "#{termin["day"]}.#{termin["month"]}.#{termin["year"]} #{termin["hour"]}:#{termin["min"]} #{termin["text"]}"
    f.puts "<termin>"
      termin.each { |key,val|
        f.puts "  <#{key}>#{val}</#{key}>"
    	}
    f.puts "</termin>"
  }
  f.puts "</termine>"
}

puts "VortrÃ¤ge und Workshops:"
File.open( NRXMLFILE, "w" ) { |f|
  f.puts "<termine>"
  lt.nrtermine.each { |termin|
    puts "#{termin["day"]}.#{termin["month"]}.#{termin["year"]} #{termin["hour"]}:#{termin["min"]} #{termin["text"]}"
    f.puts "<termin>"
      termin.each { |key,val|
        f.puts "  <#{key}>#{val}</#{key}>"
    	}
    f.puts "</termin>"
  }
  f.puts "</termine>"
}
