#!/usr/bin/env ruby

require 'rexml/document'
require 'date'

LOOKAHEAD=20    # Tage in die Zukunft gucken.
LOOKPAST=1      # alte Termine weiter anzeigen (Tage)
XMLSOURCE=ARGV[0]+"/termine.xml";

class Termin
  attr_reader :day, :wday, :month, :year, :text, :link, :date, :datestr, :hour, :min;

  def initialize(xml)
    @day   = xml.elements["day"].text.to_i;
    @wday  = xml.elements["wday"].text;
    @month = xml.elements["month"].text.to_i;
    @year  = xml.elements["year"].text.to_i;
    @text  = xml.elements["text"].text;
    @link  = xml.elements["link"].text;
    @hour  = xml.elements["hour"].text;
    @min   = xml.elements["min"].text;
    
    @year += 2000 if @year < 2000;

    @date  = Date.new( @year, @month, @day );
    @month = @date.strftime("%m") 
    @day = @date.strftime("%d") 
    @datestr = "#{@day}.#{@month}.#{@year} (#{@wday})"
  end

  def to_s
    return @datestr + " - " + @text;
  end
end


timestamp = Time.now.to_i

doc = REXML::Document.new( File.new( XMLSOURCE ));
at = Array.new

doc.elements.each("/termine/termin") { |tx|
    at.push(Termin.new(tx));
}


##############################################################################
# Sichtbare Termine ##########################################################
at.sort!{ |a,b| a.date <=> b.date }  # sortiere liste

termine = Array.new;
at.each { |t|
  if ((Date.today+LOOKAHEAD) > t.date) and (t.date > (Date.today-LOOKPAST)) then
    termine.push(t);
   end;
}

puts "Choosing Termine..."
termine.each { |t|
  puts "    #{t.date}  #{t.hour}:#{t.min}  #{t.text}"
}


##############################################################################
# HTML Output ################################################################
puts "Generating html..."
htmlout = File.new( ARGV[0]+"/termine_html", "w" );
termine.each { |term|
    if term.date == Date.today then
     htmlout.puts "<b><a href=\"#{term.link}\">#{term.day}.#{term.month}.#{term.year} (#{term.wday}) #{term.hour}:#{term.min} - #{term.text}</a></b><br/>"
    else
      htmlout.puts "<a href=\"#{term.link}\">#{term.day}.#{term.month}.#{term.year} (#{term.wday}) #{term.hour}:#{term.min} - #{term.text}</a><br/>"
   end
}
htmlout.close


##############################################################################
# RSS Output #################################################################
puts "Generating RSS 2.0..."
rss20out = File.new( ARGV[0]+"/termine.rss", "w" );
rss20out.puts "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> \n 
<rss version=\"2.0\"> \n 
<channel> \n 
<title>LABOR Bochum: Termine</title> \n
<link>http://www.das-labor.org</link> \n 
<description>Terminfeed des LABORs</description> \n 
<language>de-de</language> \n
<pubDate>#{Time.now.strftime("%a, %d %b %Y %H:%M:%S %Z")}</pubDate>"
termine.each { |term|
    rss20out.puts "<item>\n<title>#{term.text}</title>\n<description>#{term.day}.#{term.month}.#{term.year} (#{term.wday}) #{term.hour}:#{term.min} - #{term.text}</description>\n<link>#{term.link}</link>\n</item>\n\n"
}
rss20out.puts "</channel> \n</rss>"
rss20out.close

##############################################################################
# ICAL Output ################################################################
puts "Generating iCal..."
icalout = File.new( ARGV[0]+"/termine.ics", "w" );
icalout.puts "BEGIN:VCALENDAR
VERSION:2.0
X-WR-CALNAME:LABOR-Termine
PRODID:-//Apple Computer\, Inc//iCal 2.0//EN
X-WR-RELCALID:5644223456g
X-WR-TIMEZONE:Europe/Berlin
CALSCALE:GREGORIAN
METHOD:PUBLISH"

termine.each { |term|
    icalout.puts "BEGIN:VEVENT
LOCATION:Labor
DTSTAMP:#{timestamp}Z
UID:#{term.year}#{term.month}#{term.day}#{term.hour}#{term.min}@labor
SEQUENCE:10
URL;VALUE=URI:#{term.link}
DTSTART;TZID=Europe/Berlin:#{term.year}#{term.month}#{term.day}T#{term.hour}#{term.min}00
SUMMARY:#{term.text}
DTEND;TZID=Europe/Berlin:#{term.year}#{term.month}#{term.day}T235900
LAST-MODIFIED:#{timestamp}
DESCRIPTION:#{term}
END:VEVENT\n"

}
icalout.puts "END:VCALENDAR"
icalout.close

