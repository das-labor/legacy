%!PS PostScript document
% author:  Daniel Otte
% email:   daniel.otte@rub.de
% date:    2008-06-13
% license: GPLv3 

%    Copyright (C) 2008  Daniel Otte
%
%    This program is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    This program is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with this program.  If not, see <http://www.gnu.org/licenses/>.


/pi_stroke true def

/inch {	72 mul } def
%/cm { 28.346456 mul } def	
/cm { inch 2.54 div } def
/DIN_A_ratio  2 sqrt  def
/DIN_A_0 [ 100 cm 100 cm mul DIN_A_ratio div sqrt dup DIN_A_ratio mul ] cvx def % A = 1 qm
/DIN_A { % a -- x y 	a is the number of th DIN A, x and y are the corresponding sizes
	dup 0 eq 
		{ pop DIN_A_0 }
		{ 1 sub DIN_A 2 div exch } ifelse
} def

/papersize [
	4 DIN_A 
        floor exch floor exch % dirty hack, might work 
] cvx def

/pi_size papersize pop 1.25 mul def 

/lmargin 
 papersize pop 1 cm div dup floor sub % fraction of cm of width
 2 div cm 
def

/rmargin
 lmargin
def

/tmargin
 papersize exch pop 1 cm div dup floor sub % fraction of cm of height
 2 div cm
def
 
/bmargin
 tmargin
def

/squaresize 1 cm def

/fontsize squaresize 0.75 mul def

/getcolor {
 dup
 48 lt 1 index 58 ge or 
  {pop 0 0 1} % if not a number 
%  {(color_0) dup 6 3 index  put cvn load exec 4 1 roll pop}
  {48 sub 9 div 0.8 mul saturation 1} 
  ifelse 
} def

/drawsquare { % fieldvalue -- 
  currentpoint                                        %  fieldvalue -- fv x y
  currentpoint                                        %  fv x y     -- fv x y x y
  newpath
  moveto                                              %  fv x y x y -- fv x y
  0 squaresize -1 mul rlineto
  squaresize 0        rlineto
  0 squaresize        rlineto
  closepath
  2 index dup getcolor 3 copy sethsbcolor             %  fv x y     -- fv x y fv h s v
  fill
  5 index fontsize 3 div add 5 index squaresize sub fontsize 3 div add moveto               %  fv x y fv h s v -- fv x y fv h s v
  pop 0.5 sethsbcolor % select darker color for num   %  fv x y fv h s v -- fv x y fv     
  (0) dup 0 3 index put show pop                      %  fv x y fv -- fv x y 
  moveto
  squaresize 0 rmoveto
  pop
} def


/drawsquareNumOnly { % fieldvalue -- 
  currentpoint  
  1 index fontsize 3 div add                          % fv x y    -- fv x y fx
  1 index squaresize sub fontsize 3 div add           % fv x y fx -- fv x y fx fy
  moveto                                              % fv x y fx fy -- fv x y
  0 0 0 setrgbcolor  % select black  for num          % fv x y -- fv x y      
  (0) dup 0 5 index put show                          % fv x y -- fv x y 
  moveto                                              % fv x y -- fv
  squaresize 0 rmoveto
  pop
} def

%--- numbers --------------------------------------------------------------------x

%[(01234 56789) (3123956789) (0123456789) (0123456789)]
[
(3.141592653582148086)
(51442881097572458700)
(66330572703698336733)
(62000568127142019956)
(11502445945559825349)
(04380952572055748572)
(42858361603593313677)
(02678235478132116534)
(49816470605477624168)
(27967976606744278629)
(46576407849625245176)
(86838689443904512440)
(16842739489793238463)
(28230664766593344610)
(63155881757595919534)
(40656643045263560822)
(12902196034690830262)
(87554687310654858634)
(54150695963707660108)
(98915210463600934178)
(72027559661452491928)
(62518983581454100952)
(03919494595126946834)
(93996514327741559911)
(36549762752267467672)
(64338327909384460952)
(84756482348815209200)
(92186117386021394947)
(78577134286403441814)
] dup
%--- MAIN -----------------------------------------------------------------------x


(\n\n) print
(capable of printing ) print
papersize  1 cm div floor exch 1 cm div floor
 squaresize 1 cm div div floor 
  8 string cvs print
 (x) print
 squaresize 1 cm div div floor
  8 string cvs print
 ( digits\n\n) print


% goto start position
lmargin papersize exch pop tmargin sub squaresize add moveto

/Helvetica findfont fontsize scalefont setfont
/saturation 0.75 def
{
 currentpoint squaresize sub lmargin exch
 moveto pop
 {
   drawsquare
 } forall
} forall

/Symbol findfont pi_size scalefont setfont
newpath
papersize pi_size 2 div sub 2 div exch pi_size 2 div sub 2 div exch moveto
0 0 0 setrgbcolor
(\160) true charpath clip


lmargin papersize exch pop tmargin sub squaresize add moveto
/Helvetica findfont fontsize scalefont setfont
/saturation 0.4 def
{
 currentpoint squaresize sub lmargin exch
 moveto pop
 {
   drawsquare
 } forall
} forall

initclip

/Helvetica findfont lmargin 1.2 mul scalefont setfont
0 0 0 setrgbcolor
papersize tmargin 20 mul sub exch pop lmargin .2 mul exch moveto
-90 rotate
(by Daniel Otte, license: GPLv3 or later) show

showpage



