
main-uart_ni-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000084c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a41  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000070 <__c.1208>:
  70:	0d 0a 75 61 72 74 20 30 20 69 6e 69 74 69 61 6c     ..uart 0 initial
  80:	69 7a 65 64 0d 0a 00 00                             ized....

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d0 e1       	ldi	r29, 0x10	; 16
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e8 e1       	ldi	r30, 0x18	; 24
  9c:	f2 e0       	ldi	r31, 0x02	; 2
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <.do_copy_data_start>

000000a0 <.do_copy_data_loop>:
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0

000000a4 <.do_copy_data_start>:
  a4:	a0 31       	cpi	r26, 0x10	; 16
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <.do_copy_data_loop>

000000aa <__do_clear_bss>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e1       	ldi	r26, 0x10	; 16
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  be:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <printstr_P>:
*/

#include "uart_ni.h"
#include <avr/pgmspace.h>

void printstr_P(PGM_P s){
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <printstr_P+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <printstr_P+0x8>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <printstr_P+0xa>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	9e 83       	std	Y+6, r25	; 0x06
  d6:	8d 83       	std	Y+5, r24	; 0x05
	unsigned char c;
	for(;;){
		c = pgm_read_byte(s++);
  d8:	2d 81       	ldd	r18, Y+5	; 0x05
  da:	3e 81       	ldd	r19, Y+6	; 0x06
  dc:	3b 83       	std	Y+3, r19	; 0x03
  de:	2a 83       	std	Y+2, r18	; 0x02
  e0:	2d 81       	ldd	r18, Y+5	; 0x05
  e2:	3e 81       	ldd	r19, Y+6	; 0x06
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	3e 83       	std	Y+6, r19	; 0x06
  ea:	2d 83       	std	Y+5, r18	; 0x05
  ec:	ea 81       	ldd	r30, Y+2	; 0x02
  ee:	fb 81       	ldd	r31, Y+3	; 0x03
  f0:	24 91       	lpm	r18, Z
  f2:	29 83       	std	Y+1, r18	; 0x01
  f4:	29 81       	ldd	r18, Y+1	; 0x01
  f6:	2c 83       	std	Y+4, r18	; 0x04
		if(c=='\0')
  f8:	2c 81       	ldd	r18, Y+4	; 0x04
  fa:	22 23       	and	r18, r18
  fc:	21 f0       	breq	.+8      	; 0x106 <printstr_P+0x40>
			return;
		uart0_putc(c);
  fe:	8c 81       	ldd	r24, Y+4	; 0x04
 100:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart0_putc>
 104:	e9 cf       	rjmp	.-46     	; 0xd8 <printstr_P+0x12>
	}
}
 106:	26 96       	adiw	r28, 0x06	; 6
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <printhex>:

void printhex(unsigned char c){
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
	static char ht[] = {'0','1','2','3',
	                    '4','5','6','7',
	                    '8','9','A','B',
	                    'C','D','E','F' };
	uart0_putc(ht[c>>4]);
 124:	29 81       	ldd	r18, Y+1	; 0x01
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	22 2f       	mov	r18, r18
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	20 81       	ld	r18, Z
 136:	82 2f       	mov	r24, r18
 138:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart0_putc>
	uart0_putc(ht[c&0xf]);
 13c:	29 81       	ldd	r18, Y+1	; 0x01
 13e:	22 2f       	mov	r18, r18
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	2f 70       	andi	r18, 0x0F	; 15
 144:	30 70       	andi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	20 81       	ld	r18, Z
 14e:	82 2f       	mov	r24, r18
 150:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart0_putc>
}
 154:	0f 90       	pop	r0
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <main>:

/******************************************************************************/

int main (void){
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	uart0_init();
 166:	0e 94 c5 00 	call	0x18a	; 0x18a <uart0_init>
	printstr_P(PSTR("\r\nuart 0 initialized\r\n"));
 16a:	20 e7       	ldi	r18, 0x70	; 112
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	c9 01       	movw	r24, r18
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <printstr_P>
	unsigned char c;
	for(;;){
		c = uart0_getc();
 174:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart0_getc>
 178:	28 2f       	mov	r18, r24
 17a:	29 83       	std	Y+1, r18	; 0x01
		printhex(c);
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	0e 94 8c 00 	call	0x118	; 0x118 <printhex>
		uart0_putc(' ');
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart0_putc>
 188:	f5 cf       	rjmp	.-22     	; 0x174 <main+0x18>

0000018a <uart0_init>:
#include "config.h"

#include <avr/io.h>
#include "uart_ni.h"

void uart0_init(void){
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	#define BAUD UART0_BAUD_RATE
	#include <util/setbaud.h>	
	UBRR0H = UBRRH_VALUE;
 192:	e5 ec       	ldi	r30, 0xC5	; 197
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
 198:	e4 ec       	ldi	r30, 0xC4	; 196
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	29 e1       	ldi	r18, 0x19	; 25
 19e:	20 83       	st	Z, r18
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~_BV(U2X0);
 1a0:	a0 ec       	ldi	r26, 0xC0	; 192
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	20 81       	ld	r18, Z
 1aa:	2d 7f       	andi	r18, 0xFD	; 253
 1ac:	2c 93       	st	X, r18
	#endif
 	UCSR0C = 0x06; /* asynchronous, 1 stop bit, no paraty, 8 bits*/
 1ae:	e2 ec       	ldi	r30, 0xC2	; 194
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	26 e0       	ldi	r18, 0x06	; 6
 1b4:	20 83       	st	Z, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0); /* enable TX and RX */
 1b6:	e1 ec       	ldi	r30, 0xC1	; 193
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	28 e1       	ldi	r18, 0x18	; 24
 1bc:	20 83       	st	Z, r18
}
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <uart0_putc>:

void uart0_putc(unsigned char c){
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	0f 92       	push	r0
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & _BV(UDRE0))) /* wait for UDR0 to be empty */
 1d0:	e0 ec       	ldi	r30, 0xC0	; 192
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	20 81       	ld	r18, Z
 1d6:	22 2f       	mov	r18, r18
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	20 72       	andi	r18, 0x20	; 32
 1dc:	30 70       	andi	r19, 0x00	; 0
 1de:	21 15       	cp	r18, r1
 1e0:	31 05       	cpc	r19, r1
 1e2:	b1 f3       	breq	.-20     	; 0x1d0 <uart0_putc+0xc>
     ;
	UDR0 = c;
 1e4:	e6 ec       	ldi	r30, 0xC6	; 198
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	29 81       	ldd	r18, Y+1	; 0x01
 1ea:	20 83       	st	Z, r18
}
 1ec:	0f 90       	pop	r0
 1ee:	cf 91       	pop	r28
 1f0:	df 91       	pop	r29
 1f2:	08 95       	ret

000001f4 <uart0_getc>:

unsigned char uart0_getc(void){
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & _BV(RXC0))) /* wait for data to arrive */
 1fc:	e0 ec       	ldi	r30, 0xC0	; 192
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	20 81       	ld	r18, Z
 202:	22 23       	and	r18, r18
 204:	dc f7       	brge	.-10     	; 0x1fc <uart0_getc+0x8>
     ;
	return UDR0;
 206:	e6 ec       	ldi	r30, 0xC6	; 198
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	20 81       	ld	r18, Z
}
 20c:	82 2f       	mov	r24, r18
 20e:	cf 91       	pop	r28
 210:	df 91       	pop	r29
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
